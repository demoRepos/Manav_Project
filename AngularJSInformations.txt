Websites that are made in Angular JS.

Paytm.
Forbes.
Desiny movies.
GoDaddy.
Google Carriers.
McDonald's Mobile and McDonald's Happy Meal.

In order to run angular js application, we need a one script file i.e angular.js.

1 : What is Angular JS

Angular JS is a one of the JavaScript Framework that help us to build web application.
It is open source.
It is made by Google.

What is AngularJS

Angular JS is an open source JavaScript framework that is used to build web applications. It can be freely used, changed and shared by anyone. Angular Js is developed by Google.
It is an excellent framework for building single phase applications and line of business applications.

Advantage of AngularJS

There are a lot of JavaScript frameworks for building web applications. So, it is a genuine question, why to use Angular JS.

Following are the advantages of AngularJS over other JavaScript frameworks:

(a) : Dependency Injection: Dependency Injection specifies a design pattern in which components are given their dependencies instead of hard coding them within the component.
(b) : Two way data binding: AngularJS creates a two way data-binding between the select element and the orderProp model. orderProp is then used as the input for the orderBy filter.
(c) : Testing: Angular JS is designed in a way that we can test right from the start. So, it is very easy to test any of its components through unit testing and end-to-end testing.
(d) : Model View Controller: In Angular JS, it is very easy to develop application in a clean MVC way. You just have to split your application code into MVC components i.e. Model, 
	  View and the Controller. Directives, filters, modules, routes etc.


	  
	  
2 : AngularJS MVC Architecture

M : Model.
V : View.
C : Controller.

Model : Model contains the data that we want to display over the view.

View : View is a part where we have to display model (Model contains the data that we want to display over the view) data.

Controller : Controller contains the logic that we need to prepare the model data and calling the view.

MVC stands for Model View Controller. It is a software design pattern for developing web applications. It is very popular because it isolates the application logic from the user 
interface layer and supports separation of concerns.

The MVC pattern is made up of the following three parts:

Model: It is responsible for managing application data. It responds to the requests from view and to the instructions from controller to update itself.
View: It is responsible for displaying all data or only a portion of data to the users. It also specifies the data in a particular format triggered by the controller's decision to 
present the data. They are script-based template systems such as JSP, ASP, PHP and very easy to integrate with AJAX technology.
Controller: It is responsible to control the relation between models and views. It responds to user input and performs interactions on the data model objects. The controller receives
input, validates it, and then performs business operations that modify the state of the data model. 

3 : Simple Angualr JS example 'angular'. Here we are using ng-app directive i.e pre-defined directive and there are many more pre-defined directives. When we are using angular JS then
angular JS will first search for ng-app directive in particular html page and when angular found the ng-app then from that tab angular js application will start executing. We are
also this double curly braces {{  }} and this is a binding expression. We are also adding a reference to angular js script file in my html for example ' <script src="D:\\Angular JS\\
angular.min.js or path where  angular js file is present in your computer or you can specify the url of anugular js for eg ' 
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.5/angular.min.js"> ' "> </script> ' . We are also able to use comparison operator over their for eg : 1 == 2 this will
return the boolean value. Also, if we are using more than one ng-app directive; the first appeared directive will be used. The other attribute where we have used the ng-app, it will
not considered as a Angular JS Application.


Angular JS Controller : It is used to build Models (data) that need to display over the screen. Controller is always associated with module i.e in order to use controller in Angular
JS Application we need to use/create module. In example 'angular', such as below : 

<script>  
var app = angular.module('myApp', []);  

(Creating the Controller from ) [ var controller = function($scope) {  
    $scope.firstName = "Manav";  
    $scope.lastName = "Khanna";  
    $scope.fullName = function() {  
        return $scope.firstName + " " + $scope.lastName;  
    };  
} ]

app.controller((Registering the controller in module with name ' personCtrl ' ) 'personCtrl',  controller);  

</script>  

The above code we have combined in two lines as below : 

<script>  
var app = angular.module('myApp', []);  
app.controller((Registering the controller in module with name ' personCtrl ' ) 'personCtrl', (Creating the Controller from ) [ function($scope) {  
    $scope.firstName = "Manav";  
    $scope.lastName = "Khanna";  
    $scope.fullName = function() {  
        return $scope.firstName + " " + $scope.lastName;  
    };  
} ] );  
</script>  

We are creating controller and also registering the controller in module by one line as mentioned in above code. $scope is used for building a mapping between the Model and View part
and vice-a-versa. For example <div ng-app="myApp" ng-controller="personCtrl">, if we are using ng-controller with div then only this div is able to access the logic for that controller 
that we have defined in ng-controller attribute under this div but if we use this ng-controller in parent of the child then one is able to use the logic of ng-controller in all the 
child tags. 

Also, still the above code can be combined into one line such as below : 

<script>  
		angular.
				module('myApp', [])  
								   .controller((Registering the controller in module with name ' personCtrl ' ) 'personCtrl', (Creating the Controller from ) [ function($scope) {  
																																	$scope.firstName = "Manav";  
																																	$scope.lastName = "Khanna";  
																																	$scope.fullName = function() {  
																																	return $scope.firstName + " " + $scope.lastName;  
																																	};  
																														} ] );  
</script>  

 
The AngularJS ng-controller directive adds a controller class to the view (your application). It is the key aspect which specifies the principles behind the Model-View-Controller 
design pattern. It facilitates you to write code and make functions and variables, which will be parts of an object, available inside the current HTML element. This object is called 
scope. This is supported by all HTML elements.

Syntax:

<element ng-controller="expression"></element>  
Parameter explanation:

expression: It specifies the name of the controller.

Let's take an example to demonstrate ng-controller directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="myCtrl">  
Full Name: {{firstName + " " + lastName}}  
</div>  
<script>  
var app = angular.module('myApp', []);  
app.controller('myCtrl', function($scope) {  
    $scope.firstName = "Aryan";  
    $scope.lastName = "Jaiswal";  
});  
</script>  
<p>In this example you can see how to define a controller, and how to use variables made for the scope.</p>  
</body>  
</html>   
 
 
What is AngularJS?
AngularJS is an open source web application framework. It was originally developed in 2009 by Misko Hevery and Adam Abrons. It is now maintained by Google. Its latest version is 
1.4.3.

Definition of AngularJS as put by its official documentation is as follows −

AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components
clearly and succinctly. Angular's data binding and dependency injection eliminate much of the code you currently have to write. And it all happens within the browser, making it an 
ideal partner with any server technology.

Features
AngularJS is a powerful JavaScript based development framework to create RICH Internet Application(RIA).

AngularJS provides developers options to write client side application (using JavaScript) in a clean MVC(Model View Controller) way.

Application written in AngularJS is cross-browser compliant. AngularJS automatically handles JavaScript code suitable for each browser.

AngularJS is open source, completely free, and used by thousands of developers around the world. It is licensed under the Apache License version 2.0.

Overall, AngularJS is a framework to build large scale and high performance web application while keeping them as easy-to-maintain.

Core Features
Following are most important core features of AngularJS −

Data-binding − It is the automatic synchronization of data between model and view components.

Scope − These are objects that refer to the model. They act as a glue between controller and view.

Controller − These are JavaScript functions that are bound to a particular scope.

Services − AngularJS come with several built-in services for example $http to make a XMLHttpRequests. These are singleton objects which are instantiated only once in app.

Filters − These select a subset of items from an array and returns a new array.

Directives − Directives are markers on DOM elements (such as elements, attributes, css, and more). These can be used to create custom HTML tags that serve as new, custom widgets.
AngularJS has built-in directives (ngBind, ngModel...)

Templates − These are the rendered view with information from the controller and model. These can be a single file (like index.html) or multiple views in one page using "partials".

Routing − It is concept of switching views.

Model View Whatever − MVC is a design pattern for dividing an application into different parts (called Model, View and Controller), each with distinct responsibilities. AngularJS does
not implement MVC in the traditional sense, but rather something closer to MVVM (Model-View-ViewModel). The Angular JS team refers it humorously as Model View Whatever.

Deep Linking − Deep linking allows you to encode the state of application in the URL so that it can be bookmarked. The application can then be restored from the URL to the same state.

Dependency Injection − AngularJS has a built-in dependency injection subsystem that helps the developer by making the application easier to develop, understand, and test.

Concepts
Following diagram depicts some important parts of AngularJS which we will discuss in detail in the subsequent chapters.

AngularJS Concepts
Advantages of AngularJS
AngularJS provides capability to create Single Page Application in a very clean and maintainable way.

AngularJS provides data binding capability to HTML thus giving user a rich and responsive experience

AngularJS code is unit testable.

AngularJS uses dependency injection and make use of separation of concerns.

AngularJS provides reusable components.

With AngularJS, developer write less code and get more functionality.

In AngularJS, views are pure html pages, and controllers written in JavaScript do the business processing.

On top of everything, AngularJS applications can run on all major browsers and smart phones including Android and iOS based phones/tablets.

Disadvantages of AngularJS
Though AngularJS comes with lots of plus points but same time we should consider the following points −

Not Secure − Being JavaScript only framework, application written in AngularJS are not safe. Server side authentication and authorization is must to keep an application secure.

Not degradable − If your application user disables JavaScript then user will just see the basic page and nothing more.



The AngularJS Components
The AngularJS framework can be divided into following three major parts −

ng-app − This directive defines and links an AngularJS application to HTML.

ng-model − This directive binds the values of AngularJS application data to HTML input controls.

ng-bind − This directive binds the AngularJS Application data to HTML tags. 



AngularJS Extends HTML
AngularJS extends HTML with ng-directives.

The ng-app directive defines an AngularJS application.

The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.

The ng-bind directive binds application data to the HTML view.

AngularJS Example
<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="">
 	<p>Name: <input type="text" ng-model="name"></p>
 	<p ng-bind="name"></p>
</div>

</body>
</html>
Try it Yourself »
Example explained:

AngularJS starts automatically when the web page has loaded.

The ng-app directive tells AngularJS that the <div> element is the "owner" of an AngularJS application.

The ng-model directive binds the value of the input field to the application variable name.

The ng-bind directive binds the innerHTML of the <p> element to the application variable name.



AngularJS Directives
As you have already seen, AngularJS directives are HTML attributes with an ng prefix.

The ng-init directive initializes AngularJS application variables.

AngularJS Example
<div ng-app="" ng-init="firstName='John'">

<p>The name is <span ng-bind="firstName"></span></p>



AngularJS Expressions
AngularJS expressions can be written inside double braces: {{ expression }}.

AngularJS expressions can also be written inside a directive: ng-bind="expression".

AngularJS will resolve the expression, and return the result exactly where the expression is written.

AngularJS expressions are much like JavaScript expressions: They can contain literals, operators, and variables.

Example {{ 5 + 5 }} or {{ firstName + " " + lastName }}



AngularJS Modules

An AngularJS module defines an application.

The module is a container for the different parts of an application.

The module is a container for the application controllers.

Controllers always belong to a module.

Creating a Module
A module is created by using the AngularJS function angular.module

<div ng-app="myApp">...</div>

<script>

var app = angular.module("myApp", []); 

</script>
The "myApp" parameter refers to an HTML element in which the application will run.

Now you can add controllers, directives, filters, and more, to your AngularJS application.

Adding a Controller
Add a controller to your application, and refer to the controller with the ng-controller directive:

Example
<div ng-app="myApp" ng-controller="myCtrl">
{{ firstName + " " + lastName }}
</div>

<script>

var app = angular.module("myApp", []);

app.controller("myCtrl", function($scope) {
    $scope.firstName = "John";
    $scope.lastName = "Doe";
});

</script>
Try it Yourself »
You will learn more about controllers later in this tutorial.

Adding a Directive
AngularJS has a set of built-in directives which you can use to add functionality to your application.

For a full reference, visit our AngularJS directive reference.

In addition you can use the module to add your own directives to your applications:

Example
<div ng-app="myApp" w3-test-directive></div>

<script> 
var app = angular.module("myApp", []);

app.directive("w3TestDirective", function() {
    return {
        template : "I was made in a directive constructor!"
    };
});
</script>
Try it Yourself »
You will learn more about directives later in this tutorial.

Modules and Controllers in Files
It is common in AngularJS applications to put the module and the controllers in JavaScript files.

In this example, "myApp.js" contains an application module definition, while "myCtrl.js" contains the controller:

Example
<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
{{ firstName + " " + lastName }}
</div>

<script src="myApp.js"></script>
<script src="myCtrl.js"></script>

</body>
</html>
Try it Yourself »
myApp.js
var app = angular.module("myApp", []);
The [] parameter in the module definition can be used to define dependent modules.

Without the [] parameter, you are not creating a new module, but retrieving an existing one.

myCtrl.js
app.controller("myCtrl", function($scope) {
    $scope.firstName	= "John";
    $scope.lastName= "Doe";
});
Functions can Pollute the Global Namespace
Global functions should be avoided in JavaScript. They can easily be overwritten or destroyed by other scripts.

AngularJS modules reduces this problem, by keeping all functions local to the module.

When to Load the Library
While it is common in HTML applications to place scripts at the end of the <body> element, it is recommended that you load the AngularJS library either in the <head> or at the start 
of the <body>.

This is because calls to angular.module can only be compiled after the library has been loaded.

Example
<!DOCTYPE html>
<html>
<body>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>

<div ng-app="myApp" ng-controller="myCtrl">
{{ firstName + " " + lastName }}
</div>

<script>
var app = angular.module("myApp", []);
app.controller("myCtrl", function($scope) {
    $scope.firstName = "John";
    $scope.lastName = "Doe";
});
</script>

</body>
</html>








In this chapter we will discuss about how to set up AngularJS library to be used in web application development. We will also briefly study the directory structure and its contents.

When you open the link https://angularjs.org/, you will see there are two options to download AngularJS library −

AngularJS Download
View on GitHub − Click on this button to go to GitHub and get all of the latest scripts.

Download AngularJS 1 − Or click on this button, a screen as below would be seen −

AngularJS Download
This screen gives various options of using Angular JS as follows −

Downloading and hosting files locally

There are two different options legacy and latest. The names itself are self descriptive. legacy has version less than 1.2.x and latest has 1.5.x version.

We can also go with the minified, uncompressed or zipped version.

CDN access − You also have access to a CDN. The CDN will give you access around the world to regional data centers that in this case, Google host. This means using CDN moves the 
responsibility of hosting files from your own servers to a series of external ones. This also offers an advantage that if the visitor to your webpage has already downloaded a copy of 
AngularJS from the same CDN, it won't have to be re-downloaded.

Try the new angularJS 2 − Click on this button to download Angular JS beta 2 version.This version is very fast, mobile supported and flexible compare to legacy and latest of AngularJS1.

We are using the CDN versions of the library throughout this tutorial.
Example
Now let us write a simple example using AngularJS library. Let us create an HTML file myfirstexample.html as below −

<!doctype html>
<html>
   
   <head>
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.5.2/angular.min.js"></script>
   </head>
   
   <body ng-app = "myapp">
      
      <div ng-controller = "HelloController" >
         <h2>Welcome {{helloTo.title}} to the world of Tutorialspoint!</h2>
      </div>
      
      <script>
         angular.module("myapp", [])
         
         .controller("HelloController", function($scope) {
            $scope.helloTo = {};
            $scope.helloTo.title = "AngularJS";
         });
      </script>
      
   </body>
</html>
Following sections describe the above code in detail −

Include AngularJS
We have included the AngularJS JavaScript file in the HTML page so we can use AngularJS −

<head>
   <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
</head>
If you want to update into latest version of Angular JS, use the following script source or else Check the latest version of AngularJS on their official website.

<head>
   <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.5.2/angular.min.js"></script>
</head>

Point to AngularJS app
Next we tell what part of the HTML contains the AngularJS app. This done by adding the ng-app attribute to the root HTML element of the AngularJS app. You can either add it to html 
element or body element as shown below −

<body ng-app = "myapp">
</body>
View
The view is this part −

<div ng-controller = "HelloController" >
   <h2>Welcome {{helloTo.title}} to the world of Tutorialspoint!</h2>
</div>
ng-controller tells AngularJS what controller to use with this view. helloTo.title tells AngularJS to write the "model" value named helloTo.title to the HTML at this location.

Controller
The controller part is −

<script>
   angular.module("myapp", [])
   
   .controller("HelloController", function($scope) {
      $scope.helloTo = {};
      $scope.helloTo.title = "AngularJS";
   });
</script>

This code registers a controller function named HelloController in the angular module named myapp. We will study more about modules and controllers in their respective chapters. The 
controller function is registered in angular via the angular.module(...).controller(...) function call.

The $scope parameter passed to the controller function is the model. The controller function adds a helloTo JavaScript object, and in that object it adds a title field.

Execution
Save the above code as myfirstexample.html and open it in any browser. You will see an output as below −

Welcome AngularJS to the world of Tutorialspoint!
When the page is loaded in the browser, following things happen −

HTML document is loaded into the browser, and evaluated by the browser. AngularJS JavaScript file is loaded, the angular global object is created. Next, JavaScript which registers 
controller functions is executed.

Next AngularJS scans through the HTML to look for AngularJS apps and views. Once view is located, it connects that view to the corresponding controller function.

Next, AngularJS executes the controller functions. It then renders the views with data from the model populated by the controller. The page is now ready.


 
AngularJS - MVC Architecture

Model View Controller or MVC as it is popularly called, is a software design pattern for developing web applications. A Model View Controller pattern is made up of the following three
parts:-

Model − It is the lowest level of the pattern responsible for maintaining data.

View − It is responsible for displaying all or a portion of the data to the user.

Controller − It is a software Code that controls the interactions between the Model and View.

MVC is popular because it isolates the application logic from the user interface layer and supports separation of concerns. The controller receives all requests for the application
and then works with the model to prepare any data needed by the view. The view then uses the data prepared by the controller to generate a final presentable response. The MVC 
abstraction can be graphically represented as follows.

For more information, you can see example 'MVCController'.

AngularJS MVC

The Model
The model is responsible for managing application data. It responds to the request from view and to the instructions from controller to update itself.

The View
A presentation of data in a particular format, triggered by the controller's decision to present the data. They are script-based template systems such as JSP, ASP, PHP and very easy
to integrate with AJAX technology.

The Controller
The controller responds to user input and performs interactions on the data model objects. The controller receives input, validates it, and then performs business operations that
modify the state of the data model.

AngularJS - Controllers : AngularJS application mainly relies on controllers to control the flow of data in the application. A controller is defined using ng-controller directive. A 
controller is a JavaScript object containing attributes/properties and functions. Each controller accepts $scope as a parameter which refers to the application/module that controller
is to control.

<div ng-app = "" ng-controller = "studentController">
   ...
</div>

AngularJS is a MVC based framework. In the coming chapters, we will see how AngularJS uses MVC methodology. 

 
4 :  Different examples : 

AngularJS Numbers

AngularJS numbers are similar to JavaScript numbers.

 <!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="" ng-init="quantity=5;cost=5">  
<p>Total in dollar: {{ quantity * cost }}</p>  
</div>  
</body>  
</html>  


We can use the same example by using ng-bind:

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="" ng-init="quantity=5;cost=5">  
<p>Total in dollar: <span ng-bind="quantity * cost"></span></p>  
</div>  
</body>  
</html>                                                                                                                                                      


AngularJS Strings

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="" ng-init="firstName='Sonoo';lastName='Jaiswal'">  
<p>My full name is: {{ firstName + " " + lastName }}</p>  
</div>  
</body>  
</html>  


Same example with ng-bind:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="" ng-init="firstName='Sonoo';lastName='Jaiswal'">  
<p>My full name is: <span ng-bind="firstName + ' ' + lastName"></span></p>  
</div>  
</body>  
</html>  


AngularJS Objects

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="" ng-init="person={firstName:'Sonoo',lastName:'Jaiswal'}">  
<p>My name is {{ person.firstName }}</p>  
</div>  
</body>  
</html>  


Same example with ng-bind:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="" ng-init="person={firstName:'Sonoo',lastName:'Jaiswal'}">  
<p>The name is <span ng-bind="person.firstName"></span></p>  
</div>  
</body>  
</html>  


AngularJS Arrays

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="" ng-init="points=[1,15,19,2,40]">  
<p>The first result is {{ points[0] }}</p>  
</div>  
</body>  
</html>  


Same example with ng-bind:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="" ng-init="points=[1,15,19,2,40]">  
<p>The first result is <span ng-bind="points[0]"></span></p>  
</div>  
</body>  
</html>


AngularJS - First Application

Before we start with creating actual HelloWorld application using AngularJS, let us see what are the actual parts of a AngularJS application. An AngularJS application consists of 
following three important parts −

ng-app − This directive defines and links an AngularJS application to HTML.

ng-model − This directive binds the values of AngularJS application data to HTML input controls.

ng-bind − This directive binds the AngularJS Application data to HTML tags.

Steps to create AngularJS Application
Step 1 − Load framework
Being a pure JavaScript framework, It can be added using <Script> tag.

<script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js">
</script>
Step 2 − Define AngularJS Application using ng-app directive
<div ng-app = "">
   ...
</div>
Step 3 − Define a model name using ng-model directive
<p>Enter your Name: <input type = "text" ng-model = "name"></p>
Step 4 − Bind the value of above model defined using ng-bind directive.
<p>Hello <span ng-bind = "name"></span>!</p>
Steps to run AngularJS Application
Use above mentioned three steps in an HTML page.

testAngularJS.htm

<html>
   
   <head>
      <title>AngularJS First Application</title>
   </head>
   
   <body>
      <h1>Sample Application</h1>
      
      <div ng-app = "">
         <p>Enter your Name: <input type = "text" ng-model = "name"></p>
         <p>Hello <span ng-bind = "name"></span>!</p>
      </div>
      
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      
   </body>
</html>
Output
Open textAngularJS.htm in a web browser. Enter your name and see the result.


How AngularJS integrates with HTML
ng-app directive indicates the start of AngularJS application.

ng-model directive then creates a model variable named "name" which can be used with the html page and within the div having ng-app directive.

ng-bind then uses the name model to be displayed in the html span tag whenever user input something in the text box.

Closing</div> tag indicates the end of AngularJS application.



AngularJS - Expressions

Expressions are used to bind application data to html. Expressions are written inside double braces like {{ expression}}. Expressions behaves in same way as ng-bind directives. 
AngularJS application expressions are pure javascript expressions and outputs the data where they are used.

Using numbers
<p>Expense on Books : {{cost * quantity}} Rs</p>
Using strings
<p>Hello {{student.firstname + " " + student.lastname}}!</p>
Using object
<p>Roll No: {{student.rollno}}</p>
Using array
<p>Marks(Math): {{marks[3]}}</p>
Example
Following example will showcase all the above mentioned expressions.

testAngularJS.htm

<html>
   
   <head>
      <title>AngularJS Expressions</title>
   </head>
   
   <body>
      <h1>Sample Application</h1>
      
      <div ng-app = "" ng-init = "quantity = 1;cost = 30; student = {firstname:'Mahesh',lastname:'Parashar',rollno:101};marks = [80,90,75,73,60]">
         <p>Hello {{student.firstname + " " + student.lastname}}!</p>
         <p>Expense on Books : {{cost * quantity}} Rs</p>
         <p>Roll No: {{student.rollno}}</p>
         <p>Marks(Math): {{marks[3]}}</p>
      </div>
      
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      
   </body>
</html>
Output
Open textAngularJS.htm in a web browser. See the result.

Sample Application

Hello Mahesh Parashar!

Expense on Books : 30 Rs

Roll No: 101

Marks(Math): 73


5 : Difference between AngularJS Expressions and JavaScript expressions:

AngularJS expressions can be written inside HTML, while JavaScript expressions cannot.
AngularJS expressions support filters, while JavaScript expressions do not.
AngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.
Similarity between AngularJS Expressions and JavaScript expressions:

AngularJS expressions and JavaScript expressions both can contain literals, operators and variables.

6 : AngularJS Directives

AngularJS facilitates you to extend HTML with new attributes. These attributes are called directives.

There is a set of built-in directive in AngularJS which offers functionality to your applications. You can also define your own directives.

Directives are special attributes starting with ng- prefix. Following are the most common directives:

ng-app: This directive starts an AngularJS Application.
ng-init: This directive initializes application data.
ng-model: This directive defines the model that is variable to be used in AngularJS.
ng-repeat: This directive repeats html elements for each item in a collection.


ng-app directive

ng-app directive defines the root element. It starts an AngularJS Application and automatically initializes or bootstraps the application when web page containing AngularJS 
Application is loaded. It is also used to load various AngularJS modules in AngularJS Application.

See this example:

In following example, we've defined a default AngularJS application using ng-app attribute of a div element.

<div ng-app = "">  
   ...  
</div>  
  
   
ng-init directive

ng-init directive initializes an AngularJS Application data. It defines the initial values for an AngularJS application.

In following example, we'll initialize an array of countries. We're using JSON syntax to define array of countries.

<div ng-app = "" ng-init = "countries = [{locale:'en-IND',name:'India'}, {locale:'en-PAK',name:'Pakistan'}, {locale:'en-AUS',name:'Australia'}]">  
   ...  
</div>  


ng-model directive:

ng-model directive defines the model/variable to be used in AngularJS Application.

In following example, we've defined a model named "name".

<div ng-app = "">  
   ...  
   <p>Enter your Name: <input type = "text" ng-model = "name"></p>  
</div>  


ng-repeat directive

ng-repeat directive repeats html elements for each item in a collection. In following example, we've iterated over array of countries.

<div ng-app = "">  
   ...  
   <p>List of Countries with locale:</p>  
     
   <ol>  
      <li ng-repeat = "country in countries">  
         {{ 'Country: ' + country.name + ', Locale: ' + country.locale }}  
      </li>  
   </ol>  
AngularJS directives Example

Let's take an example to use all the above discussed directives:

<!DOCTYPE html>  
<html>  
<head>  
      <title>AngularJS Directives</title>  
</head>  
<body>  
      <h1>Sample Application</h1>  
        
      <div ng-app = "" ng-init = "countries = [{locale:'en-IND',name:'India'}, {locale:'en-PAK',name:'Pakistan'}, {locale:'en-AUS',name:'Australia'}]">   
         <p>Enter your Name: <input type = "text" ng-model = "name"></p>  
         <p>Hello <span ng-bind = "name"></span>!</p>  
         <p>List of Countries with locale:</p>  
        
         <ol>  
            <li ng-repeat = "country in countries">  
               {{ 'Country: ' + country.name + ', Locale: ' + country.locale }}  
            </li>  
         </ol>  
      </div>  
<script src = "http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>  
</body>  
</html>  

AngularJS Directives List

AnglarJS directives are used to add functionality to your application. You can also add your own directives for your applications.

Following is a list of AngularJS directives:

Directive	Description
ng-app	It defines the root element of an application.
ng-bind	It binds the content of an html element to application data.
ng-bind-html	It binds the inner HTML of an HTML element to application data, and also removes dangerous code from the html string.
ng-bind-template	It specifies that the text content should be replaced with a template.
ng-blur	It specifies a behavior on blur events.
ng-change	It specifies an expression to evaluate when content is being changed by the user.
ng-checked	It specifies if an element is checked or not.
ng-class	It specifies css classes on html elements.
ng-class-even	It is same as ng-class, but will only take effect on even rows.
ng-class-odd	It is same as ng-class, but will only take effect on odd rows.
ng-click	It specifies an expression to evaluate when an element is being clicked.
ng-cloak	It prevents flickering when your application is being loaded.
ng-controller	It defines the controller object for an application.
ng-copy	It specifies a behavior on copy events.
ng-csp	It changes the content security policy.
ng-cut	It specifies a behavior on cut events.
ng-dblclick	It specifies a behavior on double-click events.
ng-focus	It specifies a behavior on focus events.
ng-hide	It hides or shows html elements.
ng-href	It specifies a URL for the <a> element.
ng-if	It removes the html element if a condition is false.
ng-include	It includes html in an application.
ng-init	It defines initial values for an application.
ng-jq	It specifies that the application must use a library, like jQuery.
ng-keydown	It specifies a behavior on keydown events.
ng-keypress	It specifies a behavior on keypress events.
ng-keyup	It specifies a behavior on keyup events.
ng-list	It converts text into a list (array).
ng-open	It specifies the open attribute of an element.
ng-options	It specifies <options> in a <select> list.
ng-paste	It specifies a behavior on paste events.
ng-pluralize	It specifies a message to display according to en-us localization rules.
ng-readonly	It specifies the readonly attribute of an element.
ng-required	It specifies the required attribute of an element.
ng-selected	It specifies the selected attribute of an element.
ng-show	It shows or hides html elements.
ng-src	It specifies the src attribute for the <img> element.
ng-srcset	It specifies the srcset attribute for the <img> element.
ng-style	It specifies the style attribute for an element.
ng-submit	It specifies expressions to run on onsubmit events.
ng-switch	It specifies a condition that will be used to show/hide child elements.
ng-transclude	It specifies a point to insert transcluded elements.
ng-value	It specifies the value of an input element.
ng-disabled	It specifies if an element is disabled or not.
ng-form	It specifies an html form to inherit controls from.
ng-model	It binds the value of html controls to application data.
ng-model-options	It specifies how updates in the model are done.
ng-mousedown	It specifies a behavior on mousedown events.
ng-mouseenter	It specifies a behavior on mouseenter events.
ng-mouseleave	It specifies a behavior on mouseleave events.
ng-mousemove	It specifies a behavior on mousemove events.
ng-mouseover	It specifies a behavior on mouseover events.
ng-mouseup	It specifies a behavior on mouseup events.
ng-non-bindable	It specifies that no data binding can happen in this element, or it's children.
ng-repeat	It defines a template for each data in a collection.

7 : Various Directives : 

AngularJS ng-app Directive

The AngularJS ng-app specifies that it is the root element of the AngularJS application. All AngularJS application must contain a root element. You can only have one ng-app directive
in your HTML document. If you have more than one ng-app directive; the first appeared directive will be used.

Syntax:

<element ng-app="modulename">  
...  
  content inside the ng-app root element can contain AngularJS code  
...  
</element>   


Parameter explanation:

modulename: It is an optional parameter. It specifies the name of a module that you want to add with the application.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="">  
<p>The calculated value is : {{ 5 + 5 * 8 / 2}}</p>  
</div>  
</body>  
  
</html>  


AngularJS ng-bind Directive

The AngularJS ng-bind directive replaces the content of an HTML element with the value of a given variable, or expression. If you change the value of the given variable or 
expression, AngularJS changes the content of the specified HTML element as well as.


AngularJS ng-bind-html Directive

The AngularJS ng-bind-html directive is used to bind content to an HTML element securely.

It evaluates the expressions and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the $sanitize service. You 
have to include ngSanitize in your module's dependencies to utilize this functionality. So "angular-sanitize.js" must be in your application.

Syntax:

<element ng-bind-html="expression"></element>  
Parameter explanation:

expression: It specifies a variable or an expression to evaluate.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-sanitize.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="myCtrl">  
<p ng-bind-html="myText"></p>  
</div>  
<script>  
var app = angular.module("myApp", ['ngSanitize']);  
app.controller("myCtrl", function($scope) {  
    $scope.myText = "Welcome to: <h1>JavaTpoint!</h1>";  
});  
</script>  
<p><b>Note:</b> This example has "angular-sanitize.js",  
which has functions for removing potentially dangerous tokens from the HTML.</p>  
</body>  
</html>  




AngularJS ng-blur Directive

The AngularJS ng-blur directive specifies that what to do if an HTML element loses focus.

It doesn't override the element's original onblur event and both the ng-blur expression and the original onblur event will be executed.

Note: This ng-blur directive is supported by the HTML tags like < a >, < input >, < select >, < textarea >, and the window object.

Syntax:

<element ng-blur="expression"></element>   
Parameter explanation:

expression: It specifies an expression that is executed when an element loses focus.

Let's take an example to demonstrate ng-blur directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<input ng-blur="count = count + 1" ng-init="count=0" />  
<h1>{{count}}</h1>  
<p>By default, the value is 0 but it will increase the value of the variable "count" every time when the input field loses focus.</p>  
</body>  
</html>  



AngularJS ng-app Directive

The AngularJS ng-app specifies that it is the root element of the AngularJS application. All AngularJS application must contain a root element. You can only have one ng-app directive 
in your HTML document. If you have more than one ng-app directive; the first appeared directive will be used.

Syntax:

<element ng-app="modulename">  
...  
  content inside the ng-app root element can contain AngularJS code  
...  
</element>   
Parameter explanation:

modulename: It is an optional parameter. It specifies the name of a module that you want to add with the application.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="">  
<p>The calculated value is : {{ 5 + 5 * 8 / 2}}</p>  
</div>  
</body>  
  
</html>  

Note: ng-app is the simplest, easiest and most common way to bootstrap an application.



AngularJS ng-bind-template Directive

The AngularJS ng-bind-template directive specifies that the text content should be replaced with a template. It replaces the content of an HTML element with the value of the given expressions.

Unlike ngBind, the ngBindTemplate can contain multiple {{ }} expressions. So, it is used when we want to bind more than one expression to your HTML element. It is required because some HTML elements like TITLE and OPTION cannot contain SPAN elements.

Syntax:

<element ng-bind-template="expression"></element>   
Parameter explanation:

expression: It specifies one or more expressions to evaluate, each surrounded by {{ }}.

Let's take an example to demonstrate ng-bind-template directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-bind-template="{{firstName}} {{lastName}}" ng-controller="myCtrl">  
</div>  
<script>  
var app = angular.module("myApp", []);  
app.controller("myCtrl", function($scope) {  
    $scope.firstName = "Sonoo";  
    $scope.lastName = "Jaiswal";  
});  
</script>  
</body>  
</html>



AngularJS ng-change Directive

AngularJS ng-change directive specifies what to do when the user changes the value of an HTML element. The ng-change directive evaluates the expression immediately unlike the 
JavaScript onchange event which only triggers at the end of the change. It doesn't wait until all changes are made, or when the input field loses focus.

The ng-model directive must be presented to use ng-change directive.

Note: This ng-change directive is supported by the HTML tags like <input>, <select>, and <textarea>.

Syntax:

<element ng-change="expression"></element>  
Parameter explanation:

expression: It specifies an expression that is executed when an element's value changes.

Let's take an example to demonstrate ng-change directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="myApp">  
<div ng-controller="myCtrl">  
  <p>Type something in the input field:</p>  
  <input type="text" ng-change="myFunc()" ng-model="myValue" />  
  <p>The input field has changed {{count}} times.</p>  
</div>  
  
<script>  
  angular.module('myApp', [])  
    .controller('myCtrl', ['$scope', function($scope) {  
      $scope.count = 0;  
      $scope.myFunc = function() {  
        $scope.count++;  
      };  
    }]);  
</script>  
</body>  
</html>  



AngularJS ng-checked Directive

The AngularJS ng-checked directive is used to set a checked attribute on the element and add a checkbox or a radiobutton. You can set its value true or false. The checkbox, or 
radiobutton, will be checked if the expression inside the ng-checked attribute returns true.

Note: This ng-change directive is supported by the HTML tags like <input> elements of type checkbox or radio.

Syntax:

<input type="checkbox|radio" ng->  
Parameter explanation:

expression: It specifies an expression that will set the element's checked attribute if it returns true.

Let's take an example to demonstrate ng-checked directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<p>Courses offered:</p>  
<input type="checkbox" ng-model="all"> Check all<br><br>  
<input type="checkbox" ng-checked="all">Java<br>  
<input type="radio" ng-checked="all">Oracle<br>  
<input type="checkbox" ng-checked="all">C/C++<br>  
<input type="checkbox" ng-checked="all">.NET<br>  
<input type="checkbox" ng-checked="all">SQT<br>  
<input type="checkbox" ng-checked="all">Hadoop<br>  
<input type="checkbox" ng-checked="all">PHP  
<p>Click "Check all" to select all courses.</p>  
</body>  
</html>  





AngularJS ng-class Directive

The AngularJS ng-class directive facilitates you to dynamically set CSS classes on an HTML element by databinding an expression that represents all classes to be added. It may be a 
String, an object or an array.

In case of a string, it should contain one or more, space-separated class names. In case of an object, it should contain key-value pairs, where the key is the class name of the class 
you want to add, and the value is a Boolean value. In the case of an array, it can be a combination of both.

Note: The ng-class directive is supported by all HTML elements.

Syntax:

<element ng-class="expression"></element>  
Parameter explanation:

expression: It specifies an expression that returns one or more class names.

Let's take an example to demonstrate ng-class directive.

See this example:

 <!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<style>  
.normal {  
    color:white;  
    background-color:grey;  
    padding:20px;  
    font-family:"Courier New";  
}  
.medium {  
    color:white;  
    background-color:brown;  
    padding:30px;  
    font-family:"Courier New";  
}  
.advance {  
    background-color:red;  
    padding:40px;  
    font-family:Verdana;  
}  
</style>  
<body ng-app="">  
<p>Choose a class:</p>  
<select ng-model="home">  
<option value="normal">Normal</option>  
<option value="medium">Medium</option>  
<option value="advance">Advance</option>  
</select>  
<div ng-class="home">  
  <h1>Welcome To JavaTpoint!</h1>  
  <p>A solution of all technologies!</p>  
</div>  
</body>  
</html>  



AngularJS ng-click Directive

The AngularJS ng-click directive facilitates you to specify custom behavior when an element is clicked. So, it is responsible for the result what you get after clicking.

It is supported by all HTML elements.

Syntax:

<element ng-click="expression"></element>   
Parameter explanation:

expression: It specifies an expression that is executed when an element is clicked.

Let's take an example to demonstrate the ng-click directive.

See this example:

Example1:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<p>Click the button:</p>  
<button ng-click="count = count + 1" ng-init="count=0">OK</button>  
<p>The button has been clicked <strong>{{count}} </strong>times.</p>  
<p><strong>Note:</strong>This example counts a value every time you click on the button and increase the value of the variable.</p>  
</body>  
</html>  
Test it Now
ng-click directive example using function

Example2:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="myApp">  
<div ng-controller="myCtrl">  
  <p>Click the button to execute a function:</p>  
  <button ng-click="myFunc()">OK</button>  
  <p>The button has been clicked <strong>{{count}}</strong> times.</p>  
</div>  
<script>  
angular.module('myApp', [])  
  .controller('myCtrl', ['$scope', function($scope) {  
    $scope.count = 0;  
    $scope.myFunc = function() {  
      $scope.count++;  
    };  
  }]);  
</script>  
</body>  
</html>  



AngularJS ng-copy Directive

The AngularJS ng-copy directive specifies the custom behavior of AngularJS when an HTML element is being copied. It doesn't override the element's original on copy event; both the 
ng-copy expression and the original on copy event will be executed.

It is supported by all HTML elements.

Syntax:

<element ng-copy="expression"></element>   
Parameter explanation:

expression: It specifies an expression that is executed when the text of an element is being copied.

Let's take an example to demonstrate the ng-copy directive.
<!DOCTYPE html>  
<html>  
<script src="D:\\Angular JS\\angular.min.js"></script>



<body ng-app="myModule" ng-controller="myController">  
<input type = "text" ng-copy="test()" value="Copy this text" /> 
<p>This example shows that every time you copy the content in the input field, it will increase the value of the variable "count".</p>  
</body>  

<script>

var app = angular.module('myModule', []);  
app.controller('myController', function($scope) {  
    
$scope.test = function(){

alert('test');

}
  
}); 
</script>

</html>




AngularJS ng-cut Directive

The AnglarJS ng-cut directive specifies the custom behavior of AnglarJS when the text of the input field is being cut. It doesn?t override the element's original oncut event; both the
ng-cut expression and the original oncut event will be executed.

It is supported by HTML tags like < a >, < input >, < select >, < textarea >, and the window object.

Syntax:

<element ng-cut="expression"></element>   
Parameter explanation:

expression: It specifies an expression that is executed when the text of an element is being cut.

Let's take an example to demonstrate ng-ct directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<input ng-cut="count = count + 1" ng-init="count=0" value="Cut this text" />  
<p>The text has been cut<strong> {{count}} </strong>times.</p>  
<p>This example shows that every time you cut the content in the input field, it will increase the value of the variable "count".</p>  
</body>  
</html>  



AngularJS ng-dblclick Directive

The AngularJS ng-dblclick directive facilitates you to specify custom behavior on a dblclick event. It tells what to do when an HTML element is double-clicked. It doesn't override the
element's original ondblclick event, both are executed.

It is supported by all HTML elements.

Syntax:

<element ng-dblclick="expression"></element>   
Parameter explanation:

expression: It specifies an expression that is executed when an element is double-licked.

Let's take an example to demonstrate the ng-dblclick directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<h1 ng-dblclick="count = count + 1" ng-init="count=0">Double click on me!</h1>  
<p>The header has been double-clicked<strong> {{count}} </strong>times.</p>  
<p>In this example, every double click on the header increases the value of the variable "count".</p>  
</body>  
</html>



AngularJS ng-focus Directive

The AngularJS ng-focus directive specifies the custom behavior on focus event. It tells AngularJS what to do when an HTML element gets focus. It doesn't override the element's
original onfocus event, both will be executed.

It is supported by HTML elements like < a >, < input >, < select >, < textarea >, and the window object.

Syntax:

<element ng-focus="expression"></element>   
Parameter explanation:

expression: It specifies an expression that is executed when an element gets focus.

Let's take an example to demonstrate ng-focus directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<input ng-focus="count = count + 1" ng-init="count=0" />  
<h1>{{count}}</h1>  
<p>In this example, everytime you make a focus on the specified box, it increases the value of the variable "count"</p>  
</body>  
</html>  



AngularJS ng-href Directive

The AngularJS ng-href directive provides a replacement for the original href attribute of an <a> element. You can use the ng-href directive instead of href if you have AngularJS code
inside the href value.

The ng-href directive ensures that the link is not broken even if the user clicks the link beforethe code execution. It is supported by <a> element.

Syntax:

<a ng-href="string"></a>   
Parameter explanation:

string: It specifies a string value, or an expression resulting in a string.

Let's take an example to demonstrate the ng-href directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<div ng-init="myVar = 'http://www.javatpoint.com/java-tutorial'">  
<h1>Java Tutorials</h1>  
<p>Go to <a ng-href="{{myVar}}">{{myVar}}</a> to learn java.</p>  
</div>  
<p>You can use here original href attribute, but in AngularJS, the ng-href attribute is safer.</p>  
</body>  
</html>  


AngularJS ng-if Directive

The AngularJS ng-if directive is used to remove the HTML elements if the expression is set to false. If the if element is set to true, a copy of the element is added in the DOM.

ngIf is different from ngShow and ngHide which show and hide the elements while ngIf completely removes and recreates the element in the DOM rather than changing its visibility.

It is supported by all HTML elements.

Syntax:

<element ng-if="expression"></element>   
Parameter explanation:

expression: It specifies an expression that completely removes the element if it returns false. If it returns true, it inserts an element in the DOM instead.

Let's take an example to demonstrate ng-if directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
Keep HTML: <input type="checkbox" ng-model="myVar" ng-init="myVar = true">  
<div ng-if="myVar">  
<h1>Welcome to JavaTpoint!</h1>  
<p>A solution of all technologies..</p>  
<hr>  
</div>  
<p>If you uncheck the checkbox then DIV element will be removed.</p>  
<p>If you check the checkbox then DIV element will return.</p>  
</body>  
</html>  





AngularJS ng-keyup Directive

The AngularJS ng-keyup directive specifies the custom behavior of AngularJS when you leave a key after pressing on the keyboard for a specific HTML element.

Following is the order of a key stroke:

Keydown
Keypress
Keyup
It is supported by <input>, <select>, <textarea>, and other editable elements.

Syntax:

<element ng-keyup="expression"></element>  
Parameter explanation:

expression: It specifies an expression that is executed when you leave a key after pressing it on keyboard.

Let's take an example to demonstrate the usage of ng-keyup directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<p>Press and leave any key within the input box.</p>  
<input ng-keyup="count = count + 1" ng-init="count=0" />  
<h1>{{count}}</h1>  
<p>Every time you leave a key after pressing in the input field, this will increase the value of the variable "count".</p>  
</body>  
</html> 




AngularJS ng-keypress Directive

The AngularJS ng-keypress directive specifies the custom behavior of AngularJS when you press any on the keyboard for a specific HTML element.

Following is the order of a key stroke:

Keydown
Keypress
Keyup
It is supported by <input>, <select>, <textarea>, and other editable elements.

Syntax:

<element ng-keypress="expression"></element>  
Parameter explanation:

expression: It specifies an expression that is executed when a key is pressed on the keyboard.

Let's take an example to demonstrate ng-keypress directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<p>Press any key within the input box.</p>  
<input ng-keydown="count = count + 1" ng-init="count=0" />  
<h1>{{count}}</h1>  
<p>Every time you press a key in the input field, this will increase the value of the variable "count".</p>  
</body>  
</html>   



AngularJS ng-list Directive

The ng-list directive is used to convert a string into an array of string, using a comma as the default separator. You can also convert an array of string and display the input 
field as a string by putting the ng-list directive on the input field.

The value of the ng-list attribute defines the separator.

Syntax:

<element ng-list="separator"></element>  
Parameter explanation:

separator: It is an optional directive. It defines the separator. Its default value is a comma ","

Let's take an example to demonstrate the usage of ng-list directive.

See this example:

 <!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="">  
<p>Write some names in the input field, use a comma to separate them:</p>  
<input ng-model="customers" ng-list/>  
<p>This example will convert your input into an array, one item for each name:</p>  
<pre>{{customers}}</pre>  
</div>  
</body>  
</html>  





AngularJS ng-open Directive

The AngularJS ng-open directive sets the open attribute of a detailed list. This detailed list is visible if the expression inside the ng-open in true. A special directive is 
required because interpolation cannot be used inside the open attribute.

It is supported by the <details>element.

Syntax:

<details ng-open="expression">...</details>   
Parameter explanation:

expression: It specifies an expression that will set the element's open attribute if it returns true.

Let's take an example to demonstrate the sage of ng-open directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
Click here to show the content of the details list: <input type="checkbox" ng-model="showDetails"><br>  
<br>  
<details ng-open="showDetails">  
  <summary>Copyright 2011-2016.</summary>  
  <p> - by JavaTpoint. All Rights Reserved.</p>  
</details>  
<p><b>Note:</b> The details tag is currently only supported in Opera, Chrome, and Safari.</p>  
</body>  
</html>  




AngularJS ng-options Directive

The AngularJS ng-options directive is used to dynamically generate a list of <option> elements for the <select> elements. It uses array to fill the dropdown list. The ng-repeat 
directive can also be used in some cases for the same reason and it is easier too, but ng-options directive provides more flexibility.

It is supported by <select> statement.

Syntax:

<select ng-options="array expression"></select>  
array expression: It specifies an expression that selects the specified parts of an array to fill the select element.

Let's take an example to demonstrate the usage of ng-options directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="myCtrl">  
<select ng-model="selectedName" ng-options="item for item in names">  
</select>  
</div>  
<script>  
var app = angular.module('myApp', []);  
app.controller('myCtrl', function($scope) {  
    $scope.names = ["Java", ".Net", "PHP" , "C/C++", "Oracle"];  
});  
</script>  
<p>This example shows how to fill a dropdown list using the ng-options directive.</p>  
</body>  
</html>  





AngularJS ng-paste Directive

The AnglarJS ng-paste directive specifies the custom behavior of AngularJS when text is pasted into an HTML element. It doesn't override the element's original onpaste event, both 
will be executed.

It is supported by <input>, <select>, and <textarea> and other editable elements.

Syntax:

<element ng-paste="expression"></element>  
Parameter explanation:

expression: It specifies an expression that is executed when text is being pasted into an element.

Let's take an example to demonstrate the usage of the ng-paste directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<input ng-paste="count = count + 1" ng-init="count=0" value="Paste any text here!" />  
<p>Text has been pasted <strong>{{count}}</strong> times.</p>  
<p><strong>Note:</strong> Every time yo paste any text here, it will increase the value of the variable "count".</p>  
</body>  
</html>  



AngularJS ng-readonly Directive

The AnglarJS readonly directive sets the readonly attribute on the element; if it gets that the expression inside ng-readonly is true.

It is only applied to input elements with specific types. The ng-readonly directive is necessary to enable to shift the values between true and false. In HTML, readonly attributes 
cannot be set to false.

It is supported by <input> <textarea> elements.

Syntax:

<input ng-readonly="expression"></input:>  
Parameter explanation:

expression: It specifies an expression that will set the element's readonly attribute if it returns true.

Let's take an example to demonstrate ng-readonly directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
Click here to make the input field readonly:<input type="checkbox" ng-model="all"><br>  
<br>  
<input type="text" ng-readonly="all">  
<p><strong>Note:</strong> After clicking on the checkbox, the inpt field will be disable for writing.</p>  
</body>  
</html>  




AngularJS ng-required Directive

The AngularJS ng-required directive is used to add the required validator to ng-model. It is mainly used for input and select control but it can also be used for custom controls.

The ng-required directive is necessary to makes you able to shift the value between true and false. In HTML, the required attribute cannot be set to false.

It is supported by <input>, <select>, and <textarea> and other editable elements.

Syntax:

<input ng-required="expression"></input>  
Parameter explanation:

expression: It specifies an expression that will set the required attribute if it returns true.

Let's take an example to demonstrate the usage of ng-required directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<form name="myForm">  
Click here to make the input field required:  
<input type="checkbox" ng-model="myVar"><br><br>  
<input name="myInput" ng-model="myInput" ng-required="myVar">  
<h1 ng-if="!myForm.myInput.$valid">The input field cannot be empty</h1>  
</form>  
<p><strong>Note:</strong> This example shows an error if the input field is empty <strong>and</strong>  
 the checkbox is checked for "required".</p>  
</body>  
</html>  




AngularJS ng-selected Directive

The AngularJS ng-selected directive adds the selected attribute on the element, if it gets that the expression inside ng-selected is true.

The ng-selected directive is necessary to makes you able to shift the value between true and false. In HTML, the selected attribute cannot be set to false.

It is supported by <option> element.

Syntax:

<option ng-selected="expression"></option>  
Parameter explanation:

expression: It specifies an expression that will set the element's selected attribute if it returns true.

Let's take an example to demonstrate the usage of ng-selected directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
Click here to select Mercedes as your favorite car:  
<input type="checkbox" ng-model="mySel">  
<p>My Car's collection:</p>  
<select>  
  <option>Mahindra</option>  
  <option ng-selected="mySel">Mercedes</option>  
  <option>Ford</option>  
  <option>Volvo</option>  
  <option>Tata</option>  
  <option>Maruti</option>  
  <option>Tesla</option>  
</select>  
</body>  
</html> 




AngularJS ng-style Directive

The AnglarJS ng-style directive facilitates you to set CSS style for the HTML elements. The value of ng-style attribute must be an object, or an expression returning an object. Object contains CSS properties and values, in key value pairs.

It is supported by all HTML elements.

Syntax:

<element ng-style="expression"></element>  
Parameter explanation:

expression: It specifies an expression which returns an object where the keys are CSS properties, and the values are CSS values.

Let's take an example to demonstrate the usage of ng-style directive.

See this example:

 <!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="myApp" ng-controller="myCtrl">  
<h1 ng-style="myObj">Welcome to JavaTpoint!</h1>  
<script>  
var app = angular.module("myApp", []);  
app.controller("myCtrl", function($scope) {  
  $scope.myObj = {  
    "color" : "white",  
    "background-color" : "brown",  
    "font-size" : "40px",  
    "padding" : "40px"  
  }  
});  
</script>  
</body>  
</html>  




AngularJS ng-submit Directive

The AngularJS ng-submit directive specifies a function to be executed when the form is submitted. If you don't use the ng-submit directive in the form then it will not be submitted.

It is supported by <form> element.

Syntax:

<form ng-submit="expression"></form>  
Parameter explanation:

expression: It specifies a function that is called when the form is being submitted, or an expression to be evaluated, which should return a function call.

Let's take an example to demonstrate the usage of ng-submit directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="myApp" ng-controller="myCtrl">  
<form ng-submit="myFunc()">  
  <input type="text">  
  <input type="submit">  
</form>  
<p>{{myTxt}}</p>  
<p>In this example you can see, how an AngularJS function is executed when a form is submitted.</p>  
<script>  
var app = angular.module("myApp", []);  
app.controller("myCtrl", function($scope) {  
  $scope.myTxt = "Nothing is submitted.";  
  $scope.myFunc = function () {  
      $scope.myTxt = "Submit button clicked successfully.";  
  }  
});  
</script>  
</body>  
</html>  




AngularJS ng-switch Directive

The AngularJS ng-switch directive facilitates you to hide/show HTML elements according to an expression. Child elements with the ng-switch-when directive will be displayed if it gets a match, otherwise the element, and its children will be removed.

If you want to define a default section you can use ng-switch-default directive.

Syntax:

<element ng-switch="expression">  
  <element ng-switch-when="value"></element>  
  <element ng-switch-when="value"></element>  
  <element ng-switch-when="value"></element>  
  <element ng-switch-default></element>  
</element>   
Parameter explanation:

expression: It specifies an expression that will remove elements with no match, and display elements with a match.

Let's take an example to demonstrate the usage of ng-swith directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
Choose your favorite topic:  
<select ng-model="myVar">  
  <option value="animals">Zoology  
  <option value="tuts">Tutorials  
  <option value="cars">Cars  
  <option value="bikes">Bikes  
</select>  
<hr>  
<div ng-switch="myVar">  
  <div ng-switch-when="animals">  
     <h1>Zoology</h1>  
     <p>Welcome to a world of zoology.</p>  
  </div>  
  <div ng-switch-when="tuts">  
     <h1>Tutorials</h1>  
     <p>Learn from examples.</p>  
  </div>  
  <div ng-switch-when="cars">  
     <h1>Cars</h1>  
     <p>Read about cars.</p>  
  </div>  
  <div ng-switch-when="bikes">  
     <h1>Cars</h1>  
     <p>Read about bikes.</p>  
 </div>  
  <div ng-switch-default>  
     <h1>Switch</h1>  
     <p>Select topic from the dropdown, to switch the content of this DIV.</p>  
  </div>  
</div>  
<hr>  
<p>The ng-switch directive hides and shows HTML sections depending on a certain value.</p>  
</body>  
</html>  



Angular JS src tab.

<img ng-src="G:\\m1m.jpg"></img>. For more information, you can see example ' angular '.


8 : We can also use the search filter in angular. For more information, you can see example ' SearchFilterInAngularJS '. Purpose of using this technique is that if we want to search 
the data that are availaible on UI side (that we have fetched from one of the database table). This can be done from this example.

9 : We can also use the Two Way DataBinding in angular. For more information, you can see example ' TwoWayDataBinding '. Purpose of Two way binding is that when we change the model 
then their correspounding UI value is also changed and vice - a - versa.

10 : We can also use the ng-repeat as well as nested ng-repeat in angular. For more information, you can see example ' NgRepeat '. Purpose of using this technique is that if we want to 
show data in list form using ng-repeat and ng-repeat is used to show data on the screen by performing iterating same as we use foreach loop in java.

11 : We can also use the ng-repeat and ng-click in angular. For more information, you can see example ' ClickEventAurNgRepeatExample '. Purpose of using this technique is that if we 
want to use click functionality on button click by using ng-click and using ng-repeat in order to show data on the screen by performing iterating same as we use foreach loop in java.

12 : We can also use the some js filters in angular. For more information, you can see example ' AngularJsFilterExamle '. Purpose of using this technique is that if we want to 
show data after performing some filterations on screen for example displaying data in uppercase/lowerc \
`ase etc.

13 : We can also use the sorting of rows by clicking on row header in angular. For more information, you can see example ' AngularJSSortRowsByTableHeader '. Purpose of using this 
technique is that if we want to sort data by clicking to their correspounding column. If you click first time then it will sort data in ascending order and if you click second time 
then it will sort data in descending order.

14 : We can also use the multiple filters in angular. For more information, you can see example 'AngularjsFilterByMultipleProperties'. Purpose of using this technique is that if we
want to use multiple filters at same time.

15 : We can also use the custom filters in angular. For more information, you can see example 'Create a custom filter in AngularJS'. Purpose of using this technique is that if we want
to create custom filters.

16 : We can also use the show/hide functionality in angular. For more information, you can see examples 'ng hide and ng show in AngularJS', 'ng hide and ng show in AngularJS_1'.Purpose
of using this technique is that if we want to use show/hide functionality in angular JS.

17 : What is Services in ANgular JS.

A service in angular JS is an object that provide some sort of services that can be re-used in angular js application. Various types of angular js build in services are $http, $log.

$http() : This service is used to send input request to a remote server. We are only able to give single parameter to $http method and that object is configration object but we are 
able to give more than one parameter to confirmation object. The return type of $http get method is promise object so we are not able to put the value of this object (Promise object) 
to any $scope instance. In order to resolve this issue (Related to Promise object), we have to use 'then' method of $http method and then we can pass the annonomous function in order 
to pass the response to the specified $scope object.

18 : AngularJS Data Binding

Data binding is a very useful and powerful feature used in software development technologies. It acts as a bridge between the view and business logic of the application. AngularJS 
follows Two-Way data binding model.

One-Way Data Binding

The one-way data binding is an approach where a value is taken from the data model and inserted into an HTML element. There is no way to update model from view. It is used in 
classical template systems. These systems bind data in only one direction.

One Way Data Binding
For more information, you can see example 'OneWayDataBinding'.


Two-Way Data Binding

Data-binding in Angular apps is the automatic synchronization of data between the model and view components. Data binding lets you treat the model as the single-source-of-truth in 
your application. The view is a projection of the model at all times. If the model is changed, the view reflects the change and vice versa.

Two Way Data Binding
For more information, you can see example 'TwoWayDataBinding'.


<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="" ng-init="firstName='Ajeet'">  
<p>Input something in the input box:</p>  
<p>Name: <input type="text" ng-model="firstName"></p>  
<p>You wrote: {{ firstName }}</p>  
</div>  
</body>  
</html>  
Test it Now
In the above example, the {{ firstName }} expression is an AngularJS data binding expression. Data binding in AngularJS binds AngularJS expressions with AngularJS data.

{{ firstName }} is bound with ng-model="firstName".

19 : AngularJS Expressions

In AngularJS, expressions are used to bind application data to HTML. AngularJS resolves the expression, and return the result exactly where the expression is written.

Expressions are written inside double braces {{expression}}.They can also be written inside a directive:

ng-bind="expression".  
AnularJS expressions are very similar to JavaScript expressions. They can contain literals, operators, and variables. For example:

{{ 5 + 5 }} or {{ firstName + " " + lastName }}  
AngularJS Expressions Example

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app>  
<p>A simple expression example: {{ 5 + 5 }}</p>  
</div>  
</body>  
</html>  
Test it Now
Note: If you remove the directive "ng-app", HTML will display the expression without solving it.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<p>If you remove the directive "ng-app", HTML will display the expression without solving it.</p>  
<div>  
<p>A simple expression example:  {{ 5 + 5 }}</p>  
</div>  
</body>  
</html>  
Test it Now
You can also write expressions wherever you want, AngularJS will resolve the expression and return the result.

20 : AngularJS Controllers

AngularJS controllers are used to control the flow of data of AngularJS application. A controller is defined using ng-controller directive. A controller is a JavaScript object 
containing attributes/properties and functions. Each controller accepts $scope as a parameter which refers to the application/module that controller is to control.

AngularJS Controller Example

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
  
<div ng-app="myApp" ng-controller="myCtrl">  
  
First Name: <input type="text" ng-model="firstName"><br>  
Last Name: <input type="text" ng-model="lastName"><br>  
<br>  
Full Name: {{firstName + " " + lastName}}  
  
</div>  
  
<script>  
var app = angular.module('myApp', []);  
app.controller('myCtrl', function($scope) {  
    $scope.firstName = "Aryan";  
    $scope.lastName = "Khanna";  
});  
</script>  
  
</body>  
</html>  
Test it Now
Note:

Here, the AngularJS application runs inside the <div> is defined by ng-app="myApp".
The AngularJS directive is ng-controller="myCtrl" attribute.
The myCtrl function is a JavaScript function.
AngularJS will invoke the controller with a $scope object.
In AngularJS, $scope is the application object (the owner of application variables and functions).
The controller creates two properties (variables) in the scope (firstName and lastName).
The ng-model directives bind the input fields to the controller properties (firstName and lastName).
AngularJS controller example with methods (variables as functions)

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
  
<div ng-app="myApp" ng-controller="personCtrl">  
  
First Name: <input type="text" ng-model="firstName"><br>  
Last Name: <input type="text" ng-model="lastName"><br>  
<br>  
Full Name: {{fullName()}}  
  
</div>  
<script>  
var app = angular.module('myApp', []);  
app.controller('personCtrl', function($scope) {  
    $scope.firstName = "Aryan";  
    $scope.lastName = "Khanna";  
    $scope.fullName = function() {  
        return $scope.firstName + " " + $scope.lastName;  
    };  
});  
</script>  
  
</body>  
</html>  
Test it Now
AngularJS Controller in external files

In larger applications, generally the controllers are stored in external files.

Create an external file named "personController.js" to store controller.

Here, "personController.js" is:

   angular.module('myApp', []).controller('personCtrl', function($scope) {  
    $scope.firstName = "Aryan",  
    $scope.lastName = "Khanna",  
    $scope.fullName = function() {  
        return $scope.firstName + " " + $scope.lastName;  
    }  
});  
See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="personCtrl">  
First Name: <input type="text" ng-model="firstName"><br>  
Last Name: <input type="text" ng-model="lastName"><br>  
<br>  
Full Name: {{firstName + " " + lastName}}  
</div>  
<script src="personController.js"></script>  
</body>  
</html>  

21 : AngularJS Module

In AngularJS, a module defines an application. It is a container for the different parts of your application like controller, services, filters, directives etc.

A module is used as a Main() method. Controller always belongs to a module.

How to create a module

The angular object's module() method is used to create a module. It is also called AngularJS function angular.module

 <div ng-app="myApp">...</div>  
<script>  
var app = angular.module("myApp", []);   
</script>  
Here, "myApp" specifies an HTML element in which the application will run.

Now we can add controllers, directives, filters, and more, to AngularJS application.

How to add controller to a module

If you want to add a controller to your application refer to the controller with the ng-controller directive.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="myCtrl">  
{{ firstName + " " + lastName }}  
</div>  
<script>  
var app = angular.module("myApp", []);  
app.controller("myCtrl", function($scope) {  
    $scope.firstName = "Ajeet";  
    $scope.lastName = "Maurya";  
});  
</script>  
</body>  
</html> 

22 : AngularJS Scopes

The Scope is an object that is specified as a binding part between the HTML (view) and the JavaScript (controller). It plays a role of joining controller with the views. It is 
available for both the view and the controller.

How to use Scope

To make a controller in AngularJS, you have to pass the $scope object as an argument.

See this example:

 <!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="myCtrl">  
<h1>{{carname}}</h1>  
</div>  
<script>  
var app = angular.module('myApp', []);  
app.controller('myCtrl', function($scope) {  
    $scope.carname = "Volvo";  
});  
</script>  
<p>The property "carname" was made in the controller, and can be referred to in the view by using the {{ }} brackets.</p>  
</body>  
</html>  

23 : AngularJS Dependency Injection

AngularJS comes with a built-in dependency injection mechanism. It facilitates you to divide your application into multiple different types of components which can be injected into 
each other as dependencies.

Dependency Injection is a software design pattern that specifies how components get holds of their dependencies. In this pattern, components are given their dependencies instead of 
coding them within the component.

Modularizing your application makes it easier to reuse, configure and test the components in your application. Following are the core types of objects and components:

value
factory
service
provider
constant
These objects and components can be injected into each other using AngularJS Dependency Injection.

Value

In AngularJS, value is a simple object. It can be a number, string or JavaScript object. It is used to pass values in factories, services or controllers during run and config phase.

//define a module  
var myModule = angular.module("myModule", []);  
//create a value object and pass it a data.   
myModule.value("numberValue", 100);  
myModule.value("stringValue", "abc");  
myModule.value("objectValue", { val1 : 123, val2 : "abc"} );  
Here, values are defined using the value() function on the module. The first parameter specifies the name of the value, and the second parameter is the value itself. Factories, services and controllers can now reference these values by their name.

Injecting a value

To inject a value into AngularJS controller function, add a parameter with the same when the value is defined.

var myModule = angular.module("myModule", []);  
myModule.value("numberValue", 100);  
myModule.controller("MyController", function($scope, numberValue) {  
 console.log(numberValue);  
});  

Factory

Factory is a function that is used to return value. When a service or controller needs a value injected from the factory, it creates the value on demand. It normally uses a factory 
function to calculate and return the value.

Let's take an example that defines a factory on a module, and a controller which gets the factory created value injected:

var myModule = angular.module("myModule", []);  
myModule.factory("myFactory", function() {  
    return "a value";  
});  
myModule.controller("MyController", function($scope, myFactory) {  
console.log(myFactory);  
});  
Injecting values into factory

To inject a value into AngularJS controller function, add a parameter with the same when the value is defined.

var myModule = angular.module("myModule", []);  
myModule.value("numberValue", 100);  
myModule.controller("MyController", function($scope, numberValue) {  
 console.log(numberValue);  
});  
Note: It is not the factory function that is injected, but the value produced by the factory function.

24 : AngularJS Filters

In AngularJS, filters are used to format data. Following is a list of filters used for transforming data.

Filter	Description
Currency	It formats a number to a currency format.
Date	It formats a date to a specified format.
Filter	It select a subset of items from an array.
Json	It formats an object to a Json string.
Limit	It is used to limit an array/string, into a specified number of elements/characters.
Lowercase	It formats a string to lower case.
Number	It formats a number to a string.
Orderby	It orders an array by an expression.
Uppercase	It formats a string to upper case.
How to add filters to expressions

You can add filters to expressions by using the pipe character |, followed by a filter.

In this example, the uppercase filter format strings to upper case:

See this example:

 <!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="personCtrl">  
<p>The name is {{ firstName | uppercase }}</p>  
</div>  
<script>  
angular.module('myApp', []).controller('personCtrl', function($scope) {  
    $scope.firstName = "Sonoo",  
    $scope.lastName = "Jaiswal"  
});  
</script>  
</body>  
</html>  
Test it Now
Let's apply the lowercase filter into the same example:

See this example:

   <!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="personCtrl">  
<p>The name is {{ firstName | lowercase }}</p>  
</div>  
<script>  
angular.module('myApp', []).controller('personCtrl', function($scope) {  
    $scope.firstName = "Sonoo",  
    $scope.lastName = "Jaiswal"  
});  
</script>  
</body>  
</html>  
Test it Now
How to add filters to directives

Filters can be added to directives, like ng-repeat, by using the pipe character |, followed by a filter.

Let's take an example:

In this example, orderBy filter is used to sort an array.

See this example:

 <!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>      
<div ng-app="myApp" ng-controller="namesCtrl">  
<p>Looping with objects:</p>  
<ul>  
  <li ng-repeat="x in names | orderBy:'country'">  
    {{ x.name + ', ' + x.country }}  
  </li>  
</ul>  
</div>  
<script>  
angular.module('myApp', []).controller('namesCtrl', function($scope) {  
    $scope.names = [  
        {name:'Ramesh',country:'India'},  
        {name:'Alex',country:'USA'},  
        {name:'Pooja',country:'India'},  
        {name:'Mahesh',country:'India'},  
        {name:'Iqbal',country:'Pakistan'},  
        {name:'Ramanujam',country:'India'},  
        {name:'Osama',country:'Iraq'},  
        {name:'Johnson',country:'UK'},  
        {name:'Karl',country:'Russia'}  
        ];  
});  
</script>  
</body>  
</html>  
Test it Now
The filter Filter

The filter Filter can only be used on arrays because it selects a subset of an array. It returns an array containing only the matching items.

Let's take an example:

This example will return the names that contain the letter "o".

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="namesCtrl">  
<ul>  
  <li ng-repeat="x in names | filter : 'o'">  
    {{ x }}  
  </li>  
</ul>  
</div>  
<script>  
angular.module('myApp', []).controller('namesCtrl', function($scope) {  
    $scope.names = [  
'Ramesh',  
'Pooja',  
'Mahesh',  
'Ramanujam',  
'Osama',  
'Iqbal',  
'Karl',  
'Johnson',  
'Alex'  
    ];  
});  
</script>  
<p>This example displays only the names containing the letter "o".</p>  
</body>  
</html>  
Test it Now
Filter an array based on user input

You can use the value of the input field as an expression in a filter by setting the ng-model directive on an input field.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="namesCtrl">  
<p>Type a letter in the input field:</p>  
<p><input type="text" ng-model="test"></p>  
<ul>  
  <li ng-repeat="x in names | filter:test">  
    {{ x }}  
  </li>  
</ul>  
</div>  
<script>  
angular.module('myApp', []).controller('namesCtrl', function($scope) {  
    $scope.names = [  
        'Ramesh',  
'Pooja',  
'Mahesh',  
'Ramanujam',  
'Osama',  
'Iqbal',  
'Karl',  
'Johnson',  
'Alex'  
   ];  
});  
</script>  
<p>The list will only contain the names matching the filter.</p>  
</body>  
</html>  
Test it Now
Sort an array based on user input

You can sort an array according to the table columns.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<p>Click the table headers to change the sorting order:</p>  
<div ng-app="myApp" ng-controller="namesCtrl">  
<table border="1" width="100%">  
<tr>  
<th ng-click="orderByMe('name')">Name</th>  
<th ng-click="orderByMe('country')">Country</th>  
</tr>  
<tr ng-repeat="x in names | orderBy:myOrderBy">  
<td>{{x.name}}</td>  
<td>{{x.country}}</td>  
</tr>  
</table>  
</div>  
<script>  
angular.module('myApp', []).controller('namesCtrl', function($scope) {  
       $scope.names = [  
        {name:'Ramesh',country:'India'},  
        {name:'Alex',country:'USA'},  
        {name:'Pooja',country:'India'},  
        {name:'Mahesh',country:'India'},  
        {name:'Iqbal',country:'Pakistan'},  
        {name:'Ramanujam',country:'India'},  
        {name:'Osama',country:'Iraq'},  
        {name:'Johnson',country:'UK'},  
        {name:'Karl',country:'Russia'}  
        ];  
  
    $scope.orderByMe = function(x) {  
        $scope.myOrderBy = x;  
    }  
});  
</script>  
</body>  
</html>  
Test it Now
AngularJS Custom Filters

You can create your own filters by register a new filter factory function with your module.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<p>Click the table headers to change the sorting order:</p>  
<div ng-app="myApp" ng-controller="namesCtrl">  
<table border="1" width="100%">  
<tr>  
<th ng-click="orderByMe('name')">Name</th>  
<th ng-click="orderByMe('country')">Country</th>  
</tr>  
<tr ng-repeat="x in names | orderBy:myOrderBy">  
<td>{{x.name}}</td>  
<td>{{x.country}}</td>  
</tr>  
</table>  
</div>  
<script>  
angular.module('myApp', []).controller('namesCtrl', function($scope) {  
       $scope.names = [  
        {name:'Ramesh',country:'India'},  
        {name:'Alex',country:'USA'},  
        {name:'Pooja',country:'India'},  
        {name:'Mahesh',country:'India'},  
        {name:'Iqbal',country:'Pakistan'},  
        {name:'Ramanujam',country:'India'},  
        {name:'Osama',country:'Iraq'},  
        {name:'Johnson',country:'UK'},  
        {name:'Karl',country:'Russia'}  
        ];  
  
    $scope.orderByMe = function(x) {  
        $scope.myOrderBy = x;  
    }  
});  
</script>  
</body>  
</html> 

25 : AngularJS Select

In AngularJS, you can create a dropdown list (select box) based on items in an array, or an object.

Using ng-options

You should use the ng-option directive to create a dropdown list, based on an object or an array in AngularJS.

See this example:

 <!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="myCtrl">  
<select ng-model="selectedName" ng-options="x for x in names">  
</select>  
</div>  
<script>  
var app = angular.module('myApp', []);  
app.controller('myCtrl', function($scope) {  
    $scope.names = ["Java", "PHP", ".Net", "AngularJS", "C/C++"];  
});  
</script>  
</body>  
</html>  
Test it Now
Note:

You can also use the ng-repeat directive to make the same dropdown list as ng-options.

See this example:

 <!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="myCtrl">  
<select>  
<option ng-repeat="x in names">{{x}}</option>  
</select>  
</div>  
<script>  
var app = angular.module('myApp', []);  
app.controller('myCtrl', function($scope) {  
        $scope.names = ["Java", "PHP", ".Net", "AngularJS", "C/C++"];  
});  
</script>  
<p>The same example of dropdown list using the ng-repeat directive.</p>  
</body>  
</html>  
Test it Now
ng-options vs. ng-repeat

Although, both can be used for dropdown list, but ng-repeat directive repeats a block of HTML code for each item in an array, it can be used to create options in a dropdown list, 
while the ng-options directive was made especially for filling a dropdown list with options, and has at least one important advantage:

Dropdowns made with ng-options allows the selected value to be an object, while dropdowns made from ng-repeat has to be a string.

Consider that you have an array of objects:

$scope.cars = [  
    {model : "Ford Mustang", color : "red"},  
    {model : "Fiat 500", color : "white"},  
    {model : "Volvo XC90", color : "black"}  
];  
Limitation of ng-repeat

The ng-repeat directive has a limitation that the selected value must be a string:

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="myCtrl">  
<p>Select a car:</p>  
<select ng-model="selectedCar">  
<option ng-repeat="x in cars" value="{{x.model}}">{{x.model}}</option>  
</select>  
<h1>You selected: {{selectedCar}}</h1>  
</div>  
<script>  
var app = angular.module('myApp', []);  
app.controller('myCtrl', function($scope) {  
    $scope.cars = [  
        {model : "Ford", color : "red"},  
        {model : "Honda", color : "white"},  
        {model : "Volvo", color : "black"},  
        {model : "Hundai", color : "gray"}  
    ];  
});  
</script>  
</body>  
</html>  
Test it Now
While using the ng-options directive, you can select an object value:

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="myCtrl">  
<p>Select a car:</p>  
<select ng-model="selectedCar" ng-options="x.model for x in cars">  
</select>  
<h1>You selected: {{selectedCar.model}}</h1>  
<p>It's color is: {{selectedCar.color}}</p>  
</div>  
<script>  
var app = angular.module('myApp', []);  
app.controller('myCtrl', function($scope) {  
       $scope.cars = [  
        {model : "Ford", color : "red"},  
        {model : "Honda", color : "white"},  
        {model : "Volvo", color : "black"},  
        {model : "Hundai", color : "gray"}  
    ];  
  
});  
</script>  
</body>  
</html>  

26 : AngularJS HTML DOM

In AngularJS, some directives can be used to bind application data to attributes of HTML DOM elements.

These directives are:
Directive	Description
ng-disabled	It disables a given control.
ng-show	It shows a given control.
ng-hide	It hides a given control.
ng-click	It represents an AangularJS click event.
ng-disabled directive:The ng-disabled directive binds AngularJS application data to the disabled attribute of HTML elements. In the below code, it binds a model to a checkbox.

<input type = "checkbox" ng-model = "enableDisableButton">Disable Button  
button ng-disabled = "enableDisableButton">Click Me!</button>  
ng-show directive: The ng-show directive shows or hides an HTML element. In the below code, it binds a model to a checkbox.

<input type = "checkbox" ng-model = "showHide1">Show Button  
button ng-show = "showHide1">Click Me!</button>   
ng-hide directive: The ng-hide directive hides or shows an HTML element. In the below code, it binds a model to a checkbox.

<input type = "checkbox" ng-model = "showHide2">Hide Button  
<button ng-hide = "showHide2">Click Me!</button>   
ng-click directive: The ng-click directive counts the total clicks an HTML element. In the below code, it binds a model to a checkbox.

<p>Total click: {{ clickCounter }}</p>  
lt;button ng-click = "clickCounter = clickCounter + 1">Click Me!</button>   
Let's take an example to deploy the all above directives and test the variations:

See this example:

<!DOCTYPE html>  
<html>  
<head>  
      <title>AngularJS HTML DOM</title>  
</head>  
<body>  
      <h2>AngularJS Sample Application</h2>  
      <div ng-app = "">  
           <table border = "0">  
            <tr>  
               <td><input type = "checkbox" ng-model = "enableDisableButton">Disable Button</td>  
               <td><button ng-disabled = "enableDisableButton">Click Me!</button></td>  
            </tr>  
            <tr>  
               <td><input type = "checkbox" ng-model = "showHide1">Show Button</td>  
               <td><button ng-show = "showHide1">Click Me!</button></td>  
            </tr>  
             <tr>  
               <td><input type = "checkbox" ng-model = "showHide2">Hide Button</td>  
               <td><button ng-hide = "showHide2">Click Me!</button></td>  
            </tr>  
             <tr>  
               <td><p>Total click: {{ clickCounter }}</p></td>  
               <td><button ng-click = "clickCounter = clickCounter + 1">Click Me!</button></td>  
            </tr>  
         </table>  
         </div>  
<script src = "http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>  
</body>  
</html>   

27 : AngularJS Forms

AngularJS facilitates you to create a form enriches with data binding and validation of input controls.

Input controls are ways for a user to enter data. A form is a collection of controls for the purpose of grouping related controls together.

Following are the input controls used in AngularJS forms:

input elements
select elements
button elements
textarea elements
AngularJS provides multiple events that can be associated with the HTML controls. These events are associated with the different HTML input elements.

Following is a list of events supported in AngularJS:

ng-click
ng-dbl-click
ng-mousedown
ng-mouseup
ng-mouseenter
ng-mouseleave
ng-mousemove
ng-mouseover
ng-keydown
ng-keyup
ng-keypress
ng-change
Data Binding

ng-model directive is used to provide data binding.

Let's take an example where ng-model directive binds the input controller to the rest of your application

See this example:

   <!DOCTYPE html>  
<html lang="en">  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="myApp" ng-controller="formCtrl">  
  <form>  
    First Name: <input type="text" ng-model="firstname">  
  </form>  
</div>  
<script>  
var app = angular.module('myApp', []);  
app.controller('formCtrl', function($scope) {  
    $scope.firstname = "Ajeet";  
});  
</script>  
</body>  
</html>   
Test it Now
You can also change the example in the following way:

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="">  
  <form>  
    First Name: <input type="text" ng-model="firstname">  
  </form>  
  <h2>You entered: {{firstname}}</h2>  
</div>  
<p>Change the name inside the input field, and you will see the name in the header changes accordingly.</p>  
</body>  
</html>  
Test it Now
AngularJS Checkbox

A checkbox has a value true or false. The ng-model directive is used for a checkbox.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body>  
<div ng-app="">  
  <form>  
    Check to show this:  
    <input type="checkbox" ng-model="myVar">  
  </form>  
  <h1 ng-show="myVar">Checked</h1>  
</div>  
<p>The ng-show attribute is set to true when the checkbox is checked.</p>  
</body>  
</html>  
Test it Now
AngularJS Radio Buttons

ng-model directive is used to bind radio buttons in your applications.

Let's take an example to display some text, based on the value of the selected radio buttons. In this example, we are also using ng-switch directive to hide and show HTML sections 
depending on the value of the radio buttons.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<form>  
  Pick a topic:  
  <input type="radio" ng-model="myVar" value="tuts">Tutorials  
  <input type="radio" ng-model="myVar" value="fest">Festivals  
  <input type="radio" ng-model="myVar" value="news">News  
</form>  
<div ng-switch="myVar">  
  <div ng-switch-when="tuts">  
     <h1>Tutorials</h1>  
     <p>Welcome to the best tutorials over the net</p>  
  </div>  
  <div ng-switch-when="fest">  
     <h1>Festivals</h1>  
     <p>Most famous festivals</p>  
  </div>  
  <div ng-switch-when="news">  
     <h1>News</h1>  
     <p>Welcome to the news portal.</p>  
  </div>  
</div>  
<p>The ng-switch directive hides and shows HTML sections depending on the value of the radio buttons.</p>  
</body>  
</html>  
Test it Now
AngularJS Selectbox

ng-model directive is used to bind select boxes to your application.

See this example:

<!DOCTYPE html>  
<html>  
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>  
<body ng-app="">  
<form>  
  Select a topic:  
  <select ng-model="myVar">  
    <option value="">  
    <option value="tuts">Tutorials  
    <option value="fest">Festivals  
    <option value="news">News  
  </select>  
</form>  
<div ng-switch="myVar">  
  <div ng-switch-when="tuts">  
     <h1>Tutorials</h1>  
     <p>Welcome to the best tutorials over the net.</p>  
  </div>  
  <div ng-switch-when="fest">  
     <h1>Festivals</h1>  
     <p>Most famous festivals.</p>  
  </div>  
  <div ng-switch-when="news">  
     <h1>News</h1>  
     <p>Welcome to the news portal.</p>  
  </div>  
</div>  
<p>The ng-switch directive hides and shows HTML sections depending on the value of the radio buttons.</p>  
</body>  
</html>  
Test it Now
AngularJS form example

<!DOCTYPE html>  
<html>  
   <head>  
      <title>Angular JS Forms</title>  
      <script src = "http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>  
        
      <style>  
         table, th , td {  
            border: 1px solid grey;  
            border-collapse: collapse;  
            padding: 5px;  
         }  
           
         table tr:nth-child(odd) {  
            background-color: lightpink;  
         }  
           
         table tr:nth-child(even) {  
            background-color: lightyellow;  
         }  
      </style>  
        
   </head>  
   <body>  
        
      <h2>AngularJS Sample Application</h2>  
      <div ng-app = "mainApp" ng-controller = "studentController">  
           
         <form name = "studentForm" novalidate>  
            <table border = "0">  
               <tr>  
                  <td>Enter first name:</td>  
                  <td><input name = "firstname" type = "text" ng-model = "firstName" required>  
                     <span style = "color:red" ng-show = "studentForm.firstname.$dirty && studentForm.firstname.$invalid">  
                        <span ng-show = "studentForm.firstname.$error.required">First Name is required.</span>  
                     </span>  
                  </td>  
               </tr>  
                 
               <tr>  
                  <td>Enter last name: </td>  
                  <td><input name = "lastname"  type = "text" ng-model = "lastName" required>  
                     <span style = "color:red" ng-show = "studentForm.lastname.$dirty && studentForm.lastname.$invalid">  
                        <span ng-show = "studentForm.lastname.$error.required">Last Name is required.</span>  
                     </span>  
                  </td>  
               </tr>  
                 
               <tr>  
                  <td>Email: </td><td><input name = "email" type = "email" ng-model = "email" length = "100" required>  
                     <span style = "color:red" ng-show = "studentForm.email.$dirty && studentForm.email.$invalid">  
                        <span ng-show = "studentForm.email.$error.required">Email is required.</span>  
                        <span ng-show = "studentForm.email.$error.email">Invalid email address.</span>  
                     </span>  
                  </td>  
               </tr>  
                 
               <tr>  
                  <td>  
                     <button ng-click = "reset()">Reset</button>  
                  </td>  
                  <td>  
                     <button ng-disabled = "studentForm.firstname.$dirty &&  
                        studentForm.firstname.$invalid || studentForm.lastname.$dirty &&  
                        studentForm.lastname.$invalid || studentForm.email.$dirty &&  
                        studentForm.email.$invalid" ng-click="submit()">Submit</button>  
                  </td>  
               </tr>  
                      
            </table>  
         </form>  
      </div>  
        
      <script>  
         var mainApp = angular.module("mainApp", []);  
           
         mainApp.controller('studentController', function($scope) {  
            $scope.reset = function(){  
               $scope.firstName = "Sonoo";  
               $scope.lastName = "Jaiswal";  
               $scope.email = "sonoojaiswal@javatpoint.com";  
            }  
              
            $scope.reset();  
         });  
      </script>  
        
   </body>  
</html>  

28 : AngularJS Form Validation

AngularJS provides client-side form validation. It checks the state of the form and input fields (input, textarea, select), and lets you notify the user about the current state.

It also holds the information about whether the input fields have been touched, or modified, or not.

Following directives are generally used to track errors in an AngularJS form:

$dirty - states that value has been changed.
$invalid - states that value entered is invalid.
$error - states the exact error.
AngularJS Form Validation Example

<!DOCTYPE html>  
 <html>  
   <head>  
      <title>Angular JS Forms</title>  
      <script src = "http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>  
        
 <style>  
         table, th , td {  
            border: 1px solid grey;  
            border-collapse: collapse;  
            padding: 5px;  
         }  
           
         table tr:nth-child(odd) {  
            background-color: lightpink;  
         }  
           
         table tr:nth-child(even) {  
            background-color: lightyellow;  
         }  
      </style>  
        
   </head>  
   <body>  
        
      <h2>AngularJS Sample Application</h2>  
      <div ng-app = "mainApp" ng-controller = "studentController">  
           
         <form name = "studentForm" novalidate>  
            <table border = "0">  
               <tr>  
                  <td>Enter first name:</td>  
                  <td><input name = "firstname" type = "text" ng-model = "firstName" required>  
                     <span style = "color:red" ng-show = "studentForm.firstname.$dirty && studentForm.firstname.$invalid">  
                        <span ng-show = "studentForm.firstname.$error.required">First Name is required.</span>  
                     </span>  
                  </td>  
               </tr>  
                 
               <tr>  
                  <td>Enter last name: </td>  
                  <td><input name = "lastname"  type = "text" ng-model = "lastName" required>  
                     <span style = "color:red" ng-show = "studentForm.lastname.$dirty && studentForm.lastname.$invalid">  
                        <span ng-show = "studentForm.lastname.$error.required">Last Name is required.</span>  
                     </span>  
                  </td>  
               </tr>  
                 
               <tr>  
                  <td>Email: </td><td><input name = "email" type = "email" ng-model = "email" length = "100" required>  
                     <span style = "color:red" ng-show = "studentForm.email.$dirty && studentForm.email.$invalid">  
                        <span ng-show = "studentForm.email.$error.required">Email is required.</span>  
                        <span ng-show = "studentForm.email.$error.email">Invalid email address.</span>  
                     </span>  
                  </td>  
               </tr>  
                <tr>  
                  <td>  
                     <button ng-click = "reset()">Reset</button>  
                  </td>  
                  <td>  
                     <button ng-disabled = "studentForm.firstname.$dirty &&  
                        studentForm.firstname.$invalid || studentForm.lastname.$dirty &&  
                        studentForm.lastname.$invalid || studentForm.email.$dirty &&  
                        studentForm.email.$invalid" ng-click="submit()">Submit</button>  
                  </td>  
               </tr>  
     </table>  
         </form>  
      </div>  
        <script>  
         var mainApp = angular.module("mainApp", []);  
         mainApp.controller('studentController', function($scope) {  
            $scope.reset = function(){  
               $scope.firstName = "Sonoo";  
               $scope.lastName = "Jaiswal";  
               $scope.email = "sonoojaiswal@javatpoint.com";  
            }  
             $scope.reset();  
         });  
      </script>  
     </body>  
</html>  

29 : AngularJS - Filters

Filters are used to change modify the data and can be clubbed in expression or directives using pipe character. Following is the list of commonly used filters.

Sr.No.	Name	Description
1	uppercase	converts a text to upper case text.
2	lowercase	converts a text to lower case text.
3	currency	formats text in a currency format.
4	filter	filter the array to a subset of it based on provided criteria.
5	orderby	orders the array based on provided criteria.
uppercase filter
Add uppercase filter to an expression using pipe character. Here we've added uppercase filter to print student name in all capital letters.

Enter first name:<input type = "text" ng-model = "student.firstName">
Enter last name: <input type = "text" ng-model = "student.lastName">
Name in Upper Case: {{student.fullName() | uppercase}}
lowercase filter
Add lowercase filter to an expression using pipe character. Here we've added lowercase filter to print student name in all lowercase letters.

Enter first name:<input type = "text" ng-model = "student.firstName">
Enter last name: <input type = "text" ng-model = "student.lastName">
Name in Lower Case: {{student.fullName() | lowercase}}
currency filter
Add currency filter to an expression returning number using pipe character. Here we've added currency filter to print fees using currency format.

Enter fees: <input type = "text" ng-model = "student.fees">
fees: {{student.fees | currency}}
filter filter
To display only required subjects, we've used subjectName as filter.

Enter subject: <input type = "text" ng-model = "subjectName">
Subject:
<ul>
  <li ng-repeat = "subject in student.subjects | filter: subjectName">
     {{ subject.name + ', marks:' + subject.marks }}
  </li>
</ul>
orderby filter
To order subjects by marks, we've used orderBy marks.

Subject:
<ul>
  <li ng-repeat = "subject in student.subjects | orderBy:'marks'">
     {{ subject.name + ', marks:' + subject.marks }}
  </li>
</ul>
Example
Following example will showcase all the above mentioned filters.

testAngularJS.htm

<html>
   
   <head>
      <title>Angular JS Filters</title>
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
   </head>
   
   <body>
      <h2>AngularJS Sample Application</h2>
      <div ng-app = "mainApp" ng-controller = "studentController">
         <table border = "0">
            <tr>
               <td>Enter first name:</td>
               <td><input type = "text" ng-model = "student.firstName"></td>
            </tr>
            
            <tr>
               <td>Enter last name: </td>
               <td><input type = "text" ng-model = "student.lastName"></td>
            </tr>
            
            <tr>
               <td>Enter fees: </td>
               <td><input type = "text" ng-model = "student.fees"></td>
            </tr>
            
            <tr>
               <td>Enter subject: </td>
               <td><input type = "text" ng-model = "subjectName"></td>
            </tr>
         </table>
         <br/>
         
         <table border = "0">
            <tr>
               <td>Name in Upper Case: </td><td>{{student.fullName() | uppercase}}</td>
            </tr>
         
            <tr>
               <td>Name in Lower Case: </td><td>{{student.fullName() | lowercase}}</td>
            </tr>
         
            <tr>
               <td>fees: </td><td>{{student.fees | currency}}
               </td>
            </tr>
				
            <tr>
               <td>Subject:</td>

               <td>
                  <ul>
                     <li ng-repeat = "subject in student.subjects | filter: subjectName |orderBy:'marks'">
                        {{ subject.name + ', marks:' + subject.marks }}
                     </li>
                  </ul>
               </td>
            </tr>
         </table>
         
      </div>
      
      <script>
         var mainApp = angular.module("mainApp", []);
         
         mainApp.controller('studentController', function($scope) {
            $scope.student = {
               firstName: "Mahesh",
               lastName: "Parashar",
               fees:500,
               
               subjects:[
                  {name:'Physics',marks:70},
                  {name:'Chemistry',marks:80},
                  {name:'Math',marks:65}
               ],
               
               fullName: function() {
                  var studentObject;
                  studentObject = $scope.student;
                  return studentObject.firstName + " " + studentObject.lastName;
               }
            };
         });
      </script>
      
   </body>
</html>
Output
Open textAngularJS.htm in a web browser. See the result.

AngularJS Sample Application

Enter first name:	
Mahesh
Enter last name:	
Parashar
Enter fees:	
500
Enter subject:	

Name in Upper Case:	MAHESH PARASHAR
Name in Lower Case:	mahesh parashar
fees:	$500.00
Subject:	
Math, marks:65
Physics, marks:70
Chemistry, marks:80

30 : AngularJS - Tables

Table data is normally repeatable by nature. ng-repeat directive can be used to draw table easily. Following example states the use of ng-repeat directive to draw a table.

<table>
   <tr>
      <th>Name</th>
      <th>Marks</th>
   </tr>
   
   <tr ng-repeat = "subject in student.subjects">
      <td>{{ subject.name }}</td>
      <td>{{ subject.marks }}</td>
   </tr>
</table>
Table can be styled using CSS Styling.

<style>
   table, th , td {
      border: 1px solid grey;
      border-collapse: collapse;
      padding: 5px;
   }
   
   table tr:nth-child(odd) {
      background-color: #f2f2f2;
   }

   table tr:nth-child(even) {
      background-color: #ffffff;
   }
</style>
Example
Following example will showcase all the above mentioned directive.

testAngularJS.htm

<html>
   
   <head>
      <title>Angular JS Table</title>
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      
      <style>
         table, th , td {
            border: 1px solid grey;
            border-collapse: collapse;
            padding: 5px;
         }
         
         table tr:nth-child(odd) {
            background-color: #f2f2f2;
         }
         
         table tr:nth-child(even) {
            background-color: #ffffff;
         }
      </style>
      
   </head>
   <body>
      <h2>AngularJS Sample Application</h2>
      <div ng-app = "mainApp" ng-controller = "studentController">
         
         <table border = "0">
            <tr>
               <td>Enter first name:</td>
               <td><input type = "text" ng-model = "student.firstName"></td>
            </tr>
            
            <tr>
               <td>Enter last name: </td>
               <td>
                  <input type = "text" ng-model = "student.lastName">
               </td>
            </tr>
            
            <tr>
               <td>Name: </td>
               <td>{{student.fullName()}}</td>
            </tr>
            
            <tr>
               <td>Subject:</td>
					
               <td>
                  <table>
                     <tr>
                        <th>Name</th>.
                        <th>Marks</th>
                     </tr>
                     
                     <tr ng-repeat = "subject in student.subjects">
                        <td>{{ subject.name }}</td>
                        <td>{{ subject.marks }}</td>
                     </tr>
							
                  </table>
               </td>
					
            </tr>
         </table>
         
      </div>
      
      <script>
         var mainApp = angular.module("mainApp", []);
         
         mainApp.controller('studentController', function($scope) {
            $scope.student = {
               firstName: "Mahesh",
               lastName: "Parashar",
               fees:500,
               
               subjects:[
                  {name:'Physics',marks:70},
                  {name:'Chemistry',marks:80},
                  {name:'Math',marks:65},
                  {name:'English',marks:75},
                  {name:'Hindi',marks:67}
               ],
               
               fullName: function() {
                  var studentObject;
                  studentObject = $scope.student;
                  return studentObject.firstName + " " + studentObject.lastName;
               }
            };
         });
      </script>
      
   </body>
</html>
Output
Open textAngularJS.htm in a web browser. See the result.

AngularJS Sample Application

Enter first name:	Mahesh
Enter last name:	Parashar
Name:	Mahesh Parashar
Subject:	Name	Marks
			Physics	70
			Chemistry	80
			Math	65
			English	75
			Hindi	67
			
31 : AngularJS - HTML DOM

Following directives can be used to bind application data to attributes of HTML DOM Elements.

Sr.No.	Name	Description
1	ng-disabled	disables a given control.
2	ng-show	shows a given control.
3	ng-hide	hides a given control.
4	ng-click	represents a AngularJS click event.
ng-disabled directive
Add ng-disabled attribute to a HTML button and pass it a model. Bind the model to an checkbox and see the variation.

<input type = "checkbox" ng-model = "enableDisableButton">Disable Button
<button ng-disabled = "enableDisableButton">Click Me!</button>
ng-show directive
Add ng-show attribute to a HTML button and pass it a model. Bind the model to an checkbox and see the variation.

<input type = "checkbox" ng-model = "showHide1">Show Button
<button ng-show = "showHide1">Click Me!</button>
ng-hide directive
Add ng-hide attribute to a HTML button and pass it a model. Bind the model to an checkbox and see the variation.

<input type = "checkbox" ng-model = "showHide2">Hide Button
<button ng-hide = "showHide2">Click Me!</button>
ng-click directive
Add ng-click attribute to a HTML button and update a model. Bind the model to html and see the variation.

<p>Total click: {{ clickCounter }}</p>
<button ng-click = "clickCounter = clickCounter + 1">Click Me!</button>
Example
Following example will showcase all the above mentioned directives.

testAngularJS.htm

<html>
   
   <head>
      <title>AngularJS HTML DOM</title>
   </head>
   
   <body>
      <h2>AngularJS Sample Application</h2>
      <div ng-app = "">
         
         <table border = "0">
            <tr>
               <td><input type = "checkbox" ng-model = "enableDisableButton">Disable Button</td>
               <td><button ng-disabled = "enableDisableButton">Click Me!</button></td>
            </tr>
            
            <tr>
               <td><input type = "checkbox" ng-model = "showHide1">Show Button</td>
               <td><button ng-show = "showHide1">Click Me!</button></td>
            </tr>
            
            <tr>
               <td><input type = "checkbox" ng-model = "showHide2">Hide Button</td>
               <td><button ng-hide = "showHide2">Click Me!</button></td>
            </tr>
            
            <tr>
               <td><p>Total click: {{ clickCounter }}</p></td>
               <td><button ng-click = "clickCounter = clickCounter + 1">Click Me!</button></td>
            </tr>
         </table>
         
      </div>
      
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      
   </body>
</html>
Output
Open textAngularJS.htm in a web browser. See the result.			

AngularJS Sample Application

Disable Button	Click Me!
Show Button	
Hide Button	Click Me!
Total click: 3

Click Me!

32 : AngularJS - Modules

AngularJS supports modular approach. Modules are used to separate logics say services, controllers, application etc. and keep the code clean. We define modules in separate js files 
and name them as per the module.js file. In this example we're going to create two modules.

Application Module − used to initialize an application with controller(s).

Controller Module − used to define the controller.

Application Module
mainApp.js

var mainApp = angular.module("mainApp", []);
Here we've declared an application mainApp module using angular.module function. We've passed an empty array to it. This array generally contains dependent modules.

Controller Module
studentController.js

mainApp.controller("studentController", function($scope) {
   $scope.student = {
      firstName: "Mahesh",
      lastName: "Parashar",
      fees:500,
      
      subjects:[
         {name:'Physics',marks:70},
         {name:'Chemistry',marks:80},
         {name:'Math',marks:65},
         {name:'English',marks:75},
         {name:'Hindi',marks:67}
      ],
      
      fullName: function() {
         var studentObject;
         studentObject = $scope.student;
         return studentObject.firstName + " " + studentObject.lastName;
      }
   };
});
Here we've declared a controller studentController module using mainApp.controller function.

Use Modules
<div ng-app = "mainApp" ng-controller = "studentController">
   ...
   <script src = "mainApp.js"></script>
   <script src = "studentController.js"></script>
	
</div>
Here we've used application module using ng-app directive and controller using ng-controller directive. We've imported mainApp.js and studentController.js in the main html page.

Example
Following example will showcase all the above mentioned modules.

testAngularJS.htm

<html>
   
   <head>
      <title>Angular JS Modules</title>
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      <script src = "/angularjs/src/module/mainApp.js"></script>
      <script src = "/angularjs/src/module/studentController.js"></script>
      
      <style>
         table, th , td {
            border: 1px solid grey;
            border-collapse: collapse;
            padding: 5px;
         }
         
         table tr:nth-child(odd) {
            background-color: #f2f2f2;
         }
         
         table tr:nth-child(even) {
            background-color: #ffffff;
         }
      </style>
      
   </head>
   
   <body>
      <h2>AngularJS Sample Application</h2>
      <div ng-app = "mainApp" ng-controller = "studentController">
         
         <table border = "0">
            <tr>
               <td>Enter first name:</td>
               <td><input type = "text" ng-model = "student.firstName"></td>
            </tr>
         
            <tr>
               <td>Enter last name: </td>
               <td><input type = "text" ng-model = "student.lastName"></td>
            </tr>
         
            <tr>
               <td>Name: </td>
               <td>{{student.fullName()}}</td>
            </tr>
         
            <tr>
               <td>Subject:</td>
               <td>
               
                  <table>
                     <tr>
                        <th>Name</th>
                        <th>Marks</th>
                     </tr>
                  
                     <tr ng-repeat = "subject in student.subjects">
                        <td>{{ subject.name }}</td>
                        <td>{{ subject.marks }}</td>
                     </tr>
                  </table>
                  
               </td>
            </tr>
         </table>
         
      </div>
      
   </body>
</html>
mainApp.js

var mainApp = angular.module("mainApp", []);
studentController.js

mainApp.controller("studentController", function($scope) {
   $scope.student = {
      firstName: "Mahesh",
      lastName: "Parashar",
      fees:500,
      
      subjects:[
         {name:'Physics',marks:70},
         {name:'Chemistry',marks:80},
         {name:'Math',marks:65},
         {name:'English',marks:75},
         {name:'Hindi',marks:67}
      ],
      
      fullName: function() {
         var studentObject;
         studentObject = $scope.student;
         return studentObject.firstName + " " + studentObject.lastName;
      }
   };
});
Output
Open textAngularJS.htm in a web browser. See the result.

AngularJS Sample Application

Enter first name:	Mahesh
Enter last name:	Parashar
Name:	Mahesh Parashar
Subject:	Name	Marks
			Physics	70
			Chemistry	80
			Math	65
			English	75
			Hindi	67
			
33 : AngularJS - Forms

AngularJS enriches form filling and validation. We can use ng-click to handle AngularJS click on button and use $dirty and $invalid flags to do the validations in seemless way. Use 
novalidate with a form declaration to disable any browser specific validation. Forms controls makes heavy use of Angular events. Let's have a quick look on events first.

Events
AngularJS provides multiple events which can be associated with the HTML controls. For example ng-click is normally associated with button. Following are supported events in Angular JS.

ng-click
ng-dbl-click
ng-mousedown
ng-mouseup
ng-mouseenter
ng-mouseleave
ng-mousemove
ng-mouseover
ng-keydown
ng-keyup
ng-keypress
ng-change
ng-click
Reset data of a form using on-click directive of a button.

<input name = "firstname" type = "text" ng-model = "firstName" required>
<input name = "lastname" type = "text" ng-model = "lastName" required>
<input name = "email" type = "email" ng-model = "email" required>
<button ng-click = "reset()">Reset</button>

<script>
   function studentController($scope) { 
      $scope.reset = function(){
         $scope.firstName = "Mahesh";
         $scope.lastName = "Parashar";
         $scope.email = "MaheshParashar@tutorialspoint.com";
      }   
      
      $scope.reset();
   }
</script>
Validate data
Following can be used to track error.

$dirty − states that value has been changed.

$invalid − states that value entered is invalid.

$error − states the exact error.

Example
Following example will showcase all the above mentioned directives.

testAngularJS.htm				

<html>
   <head>
      <title>Angular JS Forms</title>
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      
      <style>
         table, th , td {
            border: 1px solid grey;
            border-collapse: collapse;
            padding: 5px;
         }
         
         table tr:nth-child(odd) {
            background-color: #f2f2f2;
         }
         
         table tr:nth-child(even) {
            background-color: #ffffff;
         }
      </style>
      
   </head>
   <body>
      
      <h2>AngularJS Sample Application</h2>
      <div ng-app = "mainApp" ng-controller = "studentController">
         
         <form name = "studentForm">
            <table border = "0">
               <tr>
                  <td>Enter first name:</td>
                  <td><input name = "firstname" type = "text" ng-model = "firstName" required>
                        <span ng-show = "studentForm.firstname.$invalid">First Name is required.</span>

                  </td>
               </tr>
               
               <tr>
                  <td>Enter last name: </td>
                  <td><input name = "lastname"  type = "text" ng-model = "lastName" required>
                        <span ng-show = "studentForm.lastname.$invalid">Last Name is required.</span>
                     
                  </td>
               </tr>
               
               <tr>
                  <td>Email: </td><td><input name = "email" type = "email" ng-model = "email" length = "100" required>
                     
                        <span ng-show = "studentForm.email.$invalid">Email is required.</span>
                        <span ng-show = "studentForm.email.$error.email">Invalid email address.</span>

                  </td>
               </tr>
               
               <tr>
                  <td>
                     <button ng-click = "reset()">Reset</button>
                  </td>
                  <td>
                     <button ng-disabled = "studentForm.firstname.$dirty &&
                        studentForm.firstname.$invalid || studentForm.lastname.$dirty &&
                        studentForm.lastname.$invalid || studentForm.email.$dirty &&
                        studentForm.email.$invalid" ng-click="submit()">Submit</button>
                  </td>
               </tr>
     
            </table>
         </form>
      </div>
      
      <script>
         var mainApp = angular.module("mainApp", []);
         
         mainApp.controller('studentController', function($scope) {
            $scope.reset = function(){
               $scope.firstName = "Mahesh";
               $scope.lastName = "Parashar";
               $scope.email = "MaheshParashar@tutorialspoint.com";
            }
            
            $scope.reset();
         });
      </script>
      
   </body>
</html>

For more information regarding Form Validation in Angular JS, you can see example 'https://docs.angularjs.org/api/ng/type/form.FormController'.

34 : AngularJS - Ajax

AngularJS provides $http control which works as a service to read data from the server. The server makes a database call to get the desired records. AngularJS needs data in JSON
format. Once the data is ready, $http can be used to get the data from server in the following manner −

function studentController($scope,$http) {
var url = "data.txt";

   $http.get(url).success( function(response) {
      $scope.students = response; 
   });
}

Here, the file data.txt contains student records. $http service makes an ajax call and sets response to its property students. students model can be used to draw tables in HTML.

Examples
data.txt
[
   {
      "Name" : "Mahesh Parashar",
      "RollNo" : 101,
      "Percentage" : "80%"
   },
	
   {
      "Name" : "Dinkar Kad",
      "RollNo" : 201,
      "Percentage" : "70%"
   },
	
   {
      "Name" : "Robert",
      "RollNo" : 191,
      "Percentage" : "75%"
   },
	
   {
      "Name" : "Julian Joe",
      "RollNo" : 111,
      "Percentage" : "77%"
   }
]
testAngularJS.htm
<html>
   <head>
      <title>Angular JS Includes</title>
      
      <style>
         table, th , td {
            border: 1px solid grey;
            border-collapse: collapse;
            padding: 5px;
         }
         
         table tr:nth-child(odd) {
            background-color: #f2f2f2;
         }
         
         table tr:nth-child(even) {
            background-color: #ffffff;
         }
      </style>
      
   </head>
   <body>
      <h2>AngularJS Sample Application</h2>
      <div ng-app = "" ng-controller = "studentController">
      
         <table>
            <tr>
               <th>Name</th>
               <th>Roll No</th>
               <th>Percentage</th>
            </tr>
         
            <tr ng-repeat = "student in students">
               <td>{{ student.Name }}</td>
               <td>{{ student.RollNo }}</td>
               <td>{{ student.Percentage }}</td>
            </tr>
         </table>
      </div>
      
      <script>
         function studentController($scope,$http) {
            var url = "data.txt";
         
            $http.get(url).success( function(response) {
               $scope.students = response;
            });
         }
      </script>
      
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.min.js"></script>
      
   </body>
</html>
Output
To execute this example, you need to deploy testAngularJS.htm and data.txt file to a web server. Open the file testAngularJS.htm using the URL of your server in a web browser and see
the result.

AngularJS Sample Application

Name	Roll No	Percentage
Mahesh Parashar	101	80%
Dinkar Kad	201	70%
Robert	191	75%
Julian Joe	111	77%

35 : AngularJS - Scopes

Scope is a special javascript object which plays the role of joining controller with the views. Scope contains the model data. In controllers, model data is accessed via $scope 
object.

<script>
   var mainApp = angular.module("mainApp", []);
   
   mainApp.controller("shapeController", function($scope) {
      $scope.message = "In shape controller";
      $scope.type = "Shape";
   });
</script>
Following are the important points to be considered in above example.

$scope is passed as first argument to controller during its constructor definition.

$scope.message and $scope.type are the models which are to be used in the HTML page.

We've set values to models which will be reflected in the application module whose controller is shapeController.

We can define functions as well in $scope.

Scope Inheritance
Scope are controllers specific. If we defines nested controllers then child controller will inherit the scope of its parent controller.

<script>
   var mainApp = angular.module("mainApp", []);
   
   mainApp.controller("shapeController", function($scope) {
      $scope.message = "In shape controller";
      $scope.type = "Shape";
   });
   
   mainApp.controller("circleController", function($scope) {
      $scope.message = "In circle controller";
   });
	
</script>
Following are the important points to be considered in above example.

We've set values to models in shapeController.

We've overridden message in child controller circleController. When "message" is used within module of controller circleController, the overridden message will be used.

Example
Following example will showcase all the above mentioned directives.

testAngularJS.htm

<html>
   <head>
      <title>Angular JS Forms</title>
   </head>
   
   <body>
      <h2>AngularJS Sample Application</h2>
      
      <div ng-app = "mainApp" ng-controller = "shapeController">
         <p>{{message}} <br/> {{type}} </p>
         
         <div ng-controller = "circleController">
            <p>{{message}} <br/> {{type}} </p>
         </div>
         
         <div ng-controller = "squareController">
            <p>{{message}} <br/> {{type}} </p>
         </div>
			
      </div>
		
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      
      <script>
         var mainApp = angular.module("mainApp", []);
         
         mainApp.controller("shapeController", function($scope) {
            $scope.message = "In shape controller";
            $scope.type = "Shape";
         });
         
         mainApp.controller("circleController", function($scope) {
            $scope.message = "In circle controller";
         });
         
         mainApp.controller("squareController", function($scope) {
            $scope.message = "In square controller";
            $scope.type = "Square";
         });
			
      </script>
      
   </body>
</html>
Result
Open textAngularJS.htm in a web browser. See the result.

AngularJS Sample Application

In shape controller 
Shape

In circle controller 
Shape

In square controller 
Square

36 : AngularJS - Services

AngularJS supports the concepts of "Separation of Concerns" using services architecture. Services are javascript functions and are responsible to do a specific tasks only. This makes
them an individual entity which is maintainable and testable. Controllers, filters can call them as on requirement basis. Services are normally injected using dependency injection
mechanism of AngularJS.

AngularJS provides many inbuilt services for example, $http, $route, $window, $location etc. Each service is responsible for a specific task for example, $http is used to make ajax
call to get the server data. $route is used to define the routing information and so on. Inbuilt services are always prefixed with $ symbol.

There are two ways to create a service.

factory
service

Using factory method
Using factory method, we first define a factory and then assign method to it.

var mainApp = angular.module("mainApp", []);
mainApp.factory('MathService', function() {
   var factory = {};
   
   factory.multiply = function(a, b) {
      return a * b
   }
   
   return factory;
}); 
Using service method
Using service method, we define a service and then assign method to it. We've also injected an already available service to it.

mainApp.service('CalcService', function(MathService){
   this.square = function(a) {
      return MathService.multiply(a,a);
   }
});
Example
Following example will showcase all the above mentioned directives.

testAngularJS.htm

<html>

   <head>
      <title>Angular JS Services</title>
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
   </head>
   
   <body>
      <h2>AngularJS Sample Application</h2>
      
      <div ng-app = "mainApp" ng-controller = "CalcController">
         <p>Enter a number: <input type = "number" ng-model = "number" /></p>
         <button ng-click = "square()">X<sup>2</sup></button>
         <p>Result: {{result}}</p>
      </div>
      
      <script>
         var mainApp = angular.module("mainApp", []);
         
         mainApp.factory('MathService', function() {
            var factory = {};
            
            factory.multiply = function(a, b) {
               return a * b
            }
            return factory;
         });
         
         mainApp.service('CalcService', function(MathService){
            this.square = function(a) {
               return MathService.multiply(a,a);
            }
         });
         
         mainApp.controller('CalcController', function($scope, CalcService) {
            $scope.square = function() {
               $scope.result = CalcService.square($scope.number);
            }
         });
      </script>
      
   </body>
</html>
Result
Open textAngularJS.htm in a web browser. See the result.

AngularJS Sample Application

Enter a number: 
2  X2

Result: 4

37 : AngularJS - Dependency Injection

Dependency Injection is a software design pattern in which components are given their dependencies instead of hard coding them within the component. This relieves a component from
locating the dependency and makes dependencies configurable. This helps in making components reusable, maintainable and testable.

AngularJS provides a supreme Dependency Injection mechanism. It provides following core components which can be injected into each other as dependencies.

value
factory
service
provider
constant
value

value is simple javascript object and it is used to pass values to controller during config phase.

//define a module
var mainApp = angular.module("mainApp", []);

//create a value object as "defaultInput" and pass it a data.
mainApp.value("defaultInput", 5);
...

//inject the value in the controller using its name "defaultInput"
mainApp.controller('CalcController', function($scope, CalcService, defaultInput) {
   $scope.number = defaultInput;
   $scope.result = CalcService.square($scope.number);
   
   $scope.square = function() {
      $scope.result = CalcService.square($scope.number);
   }
});
factory
factory is a function which is used to return value. It creates value on demand whenever a service or controller requires. It normally uses a factory function to calculate and 
return the value.

//define a module
var mainApp = angular.module("mainApp", []);

//create a factory "MathService" which provides a method multiply to return multiplication of two numbers
mainApp.factory('MathService', function() {
   var factory = {};
   
   factory.multiply = function(a, b) {
      return a * b
   }
   return factory;
}); 

//inject the factory "MathService" in a service to utilize the multiply method of factory.
mainApp.service('CalcService', function(MathService){
   this.square = function(a) {
      return MathService.multiply(a,a);
   }
});
...
service
service is a singleton javascript object containing a set of functions to perform certain tasks. Services are defined using service() functions and then injected into controllers.

//define a module
var mainApp = angular.module("mainApp", []);
...

//create a service which defines a method square to return square of a number.
mainApp.service('CalcService', function(MathService){
   this.square = function(a) {
      return MathService.multiply(a,a); 
   }
});

//inject the service "CalcService" into the controller
mainApp.controller('CalcController', function($scope, CalcService, defaultInput) {
   $scope.number = defaultInput;
   $scope.result = CalcService.square($scope.number);
   
   $scope.square = function() {
      $scope.result = CalcService.square($scope.number);
   }
});
provider
provider is used by AngularJS internally to create services, factory etc. during config phase(phase during which AngularJS bootstraps itself). Below mention script can be used to 
create MathService that we've created earlier. Provider is a special factory method with a method get() which is used to return the value/service/factory.

//define a module
var mainApp = angular.module("mainApp", []);
...

//create a service using provider which defines a method square to return square of a number.
mainApp.config(function($provide) {
   $provide.provider('MathService', function() {
      this.$get = function() {
         var factory = {};  
         
         factory.multiply = function(a, b) {
            return a * b; 
         }
         return factory;
      };
   });
});
constant
constants are used to pass values at config phase considering the fact that value can not be used to be passed during config phase.

mainApp.constant("configParam", "constant value");
Example
Following example will showcase all the above mentioned directives.

testAngularJS.htm

<html>
   
   <head>
      <title>AngularJS Dependency Injection</title>
   </head>
   
   <body>
      <h2>AngularJS Sample Application</h2>
      
      <div ng-app = "mainApp" ng-controller = "CalcController">
         <p>Enter a number: <input type = "number" ng-model = "number" /></p>
         <button ng-click = "square()">X<sup>2</sup></button>
         <p>Result: {{result}}</p>
      </div>
      
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      
      <script>
         var mainApp = angular.module("mainApp", []);
   
         mainApp.value("defaultInput", 5);
         
         mainApp.factory('MathService', function() {
            var factory = {};
            
            factory.multiply = function(a, b) {
               return a * b;
            }
            return factory;
         });
         
         mainApp.service('CalcService', function(MathService){
            this.square = function(a) {
               return MathService.multiply(a,a);
            }
         });
         
         mainApp.controller('CalcController', function($scope, CalcService, defaultInput) {
            $scope.number = defaultInput;
            $scope.result = CalcService.square($scope.number);

            $scope.square = function() {
               $scope.result = CalcService.square($scope.number);
            }
         });
   
      </script>
      
   </body>
</html>

38 : AngularJS - Internationalization

AngularJS supports inbuilt internationalization for three types of filters currency, date and numbers. We only need to incorporate corresponding js according to locale of the 
country. By default it handles the locale of the browser. For example, to use Danish locale, use following script.

<script src = "https://code.angularjs.org/1.2.5/i18n/angular-locale_da-dk.js"></script> 
Example using Danish locale
testAngularJS.htm

<html>
   
   <head>
      <title>Angular JS Forms</title>
   </head>
   
   <body>
      <h2>AngularJS Sample Application</h2>
      
      <div ng-app = "mainApp" ng-controller = "StudentController">
         {{fees | currency }}  <br/><br/>
         {{admissiondate | date }}  <br/><br/>
         {{rollno | number }}
      </div>
		
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      <script src = "https://code.angularjs.org/1.3.14/i18n/angular-locale_da-dk.js"></script>
      
      <script>
         var mainApp = angular.module("mainApp", []);
         
         mainApp.controller('StudentController', function($scope) {
            $scope.fees = 100;
            $scope.admissiondate  = new Date();
            $scope.rollno = 123.45;
         });
      </script>
      
   </body>
</html>
Result
Open textAngularJS.htm in a web browser. See the result.

AngularJS Sample Application

100,00 kr 

03/11/2016 

123,45


Example using Browser's locale
testAngularJS.htm

<html>
   
   <head>
      <title>Angular JS Forms</title>
   </head>
   
   <body>
      <h2>AngularJS Sample Application</h2>
      
      <div ng-app = "mainApp" ng-controller = "StudentController">
         {{fees | currency }}  <br/><br/>
         {{admissiondate | date }}  <br/><br/>
         {{rollno | number }}
      </div>
		
      <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
      <!-- <script src = "https://code.angularjs.org/1.3.14/i18n/angular-locale_da-dk.js"></script> -->
      
      <script>
         var mainApp = angular.module("mainApp", []);
         
         mainApp.controller('StudentController', function($scope) {
            $scope.fees = 100;
            $scope.admissiondate  = new Date();
            $scope.rollno = 123.45;
         });
      </script>
      
   </body>
</html>
Result
Open textAngularJS.htm in a web browser. See the result.

AngularJS Sample Application

$100.00 

Nov 3, 2016 

123.45

39 : Angular JS Directives Examples : 

(1)

AngularJS ng-app Directive
❮ AngularJS Reference
Example
Let the body element become the root element for the AngularJS application:

<body ng-app="">

<p>My first expression: {{ 5 + 5 }}</p>

</body>
Try it Yourself »
Definition and Usage
The ng-app directive tells AngularJS that this is the root element of the AngularJS application.

All AngularJS applications must have a root element.

You can only have one ng-app directive in your HTML document. If more than one ng-app directive appears, the first appearance will be used.

Syntax
<element ng-app="modulename">
...
  content inside the ng-app root element can contain AngularJS code
...
</element>
Supported by all HTML elements.

Parameter Values
Value	Description
modulename	Optional. Specifies the name of a module to load with the application
Example
Load a module to run in the application

<div ng-app="myApp" ng-controller="myCtrl">
    {{ firstName + " " + lastName }}
</div>

<script>
var app = angular.module("myApp", []);
app.controller("myCtrl", function($scope) {
    $scope.firstName = "John";
    $scope.lastName = "Doe";
});
</script>

(2)

AngularJS ng-bind Directive

Example
Bind the innerHTML of the <p> element to the variable myText:

<div ng-app="" ng-init="myText='Hello World!'">

<p ng-bind="myText"></p>

</div>
Try it Yourself »
Definition and Usage
The ng-bind directive tells AngularJS to replace the content of an HTML element with the value of a given variable, or expression.

If the value of the given variable, or expression, changes, the content of the specified HTML element will be changed as well.

Syntax
<element ng-bind="expression"></element>
Or as a CSS class:

<element class="ng-bind: expression"></element>
Supported by all HTML elements.

Parameter Values

Value	Description

expression	Specifies a variable, or an expression to evaluate.

(3)

AngularJS ng-blur Directive

Example
Execute an expresson when the input field loses focus (onblur):

<input ng-blur="count = count + 1" ng-init="count=0" />

<h1>{{count}}</h1>
Try it Yourself »
Definition and Usage
The ng-blur directive tells AngularJS what to do when an HTML element loses focus.

The ng-blur directive from AngularJS will not override the element's original onblur event, both the ng-blur expression and the original onblur event will be executed.

Syntax
<element ng-blur="expression"></element>
Supported by <a>, <input>, <select>, <textarea>, and the window object.

Parameter Values

Value	Description

expression	An expression to execute when an element loses focus.

(4)

AngularJS ng-change Directive

Example
Execute a function when the value of the input field changes:

<body ng-app="myApp">

<div ng-controller="myCtrl">
    <input type="text" ng-change="myFunc()" ng-model="myValue" />
    <p>The input field has changed {{count}} times.</p>
</div>

<script>
angular.module('myApp', [])
.controller('myCtrl', ['$scope', function($scope) {
    $scope.count = 0;
    $scope.myFunc = function() {
        $scope.count++;
    };
}]);
</script>

</body>
Try it Yourself »
Definition and Usage
The ng-change directive tells AngularJS what to do when the value of an HTML element changes.

The ng-change directive requires a ng-model directive to be present.

The ng-change directive from AngularJS will not override the element's original onchange event, both the ng-change expression and the original onchange event will be executed.

The ng-change event is triggered at every change in the value. It will not wait until all changes are made, or when the input field loses focus.

The ng-change event is only triggered if there is a actual change in the input value, and not if the change was made from a JavaScript.

Syntax
<element ng-change="expression"></element>
Supported by <input>, <select>, and  <textarea>.

Parameter Values
Value	Description
expression	An expression to execute when an element's value changes.

(5)

AngularJS ng-checked Directive

Example
Check one to check them all:

<body ng-app="">
<p>My cars:</p>
<input type="checkbox" ng-model="all"> Check all<br><br>

<input type="checkbox" ng-checked="all">Volvo<br>
<input type="checkbox" ng-checked="all">Ford<br>
<input type="checkbox" ng-checked="all">Mercedes
</body>
Try it Yourself »
Definition and Usage
The ng-checked directive sets the checked attribute of a checkbox or a radiobutton.

The checkbox, or radiobutton, will be checked if the expression inside the ng-checked attribute returns true.

The ng-checked directive is necessary to be able to shift the value between true and false. In HTML, you cannot set the checked attribute to false (the presence of the checked
attribute makes the element checked, regardless of its value).

Syntax
<input type="checkbox|radio" ng-checked="expression"></input>
Supported by <input> elements of type checkbox or radio.

Parameter Values
Value	Description
expression	An expression that will set the element's checked attribute if it returns true.

(6)


AngularJS ng-class Directive

Example
<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<style>
.sky {
    color:white;
    background-color:lightblue;
    padding:20px;
    font-family:"Courier New";
}
.tomato {
    background-color:coral;
    padding:40px;
    font-family:Verdana;
}
</style>
<body ng-app="">

<p>Choose a class:</p>

<select ng-model="home">
<option value="sky">Sky</option>
<option value="tomato">Tomato</option>
</select>

<div ng-class="home">
  <h1>Welcome Home!</h1>
  <p>I like it!</p>
</div>

</body>
</html>

Definition and Usage
The ng-class directive dynamically binds one or more CSS classes to an HTML element.

The value of the ng-class directive can be a string, an object, or an array.

If it is a string, it should contain one or more, space-separated class names.

As an object, it should contain key-value pairs, where the key is the class name of the class you want to add, and the value is a boolean value. The class will only be added if the 
value is set to true.

As an array, it can be a combination of both. Each array element can be either a string, or an object, described as above.

Syntax
<element ng-class="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression that returns one or more class names.

(7)

AngularJS ng-copy Directive

Example
Execute an expresson when the text of the input field is being copied:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<input ng-copy="count = count + 1" ng-init="count=0" value="Copy this text" />

<p>The text has been copied {{count}} times.</p>

<p>This example will increase the value of the variable "count" every time you copy the text in the input field.</p>

</body>
</html>

Definition and Usage
The ng-copy directive tells AngularJS what to do when an HTML element is being copied.

The ng-copy directive from AngularJS will not override the element's original oncopy event, both the ng-copy expression and the original oncopy event will be executed.

Syntax
<element ng-copy="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression to execute when the text of an element is being copied.

(8)

AngularJS ng-cut Directive

Example
Execute an expresson when the text of the input field is being cut:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<input ng-cut="count = count + 1" ng-init="count=0" value="Cut this text" />

<p>The text has been cut {{count}} times.</p>

<p>This example will increase the value of the variable "count" every time you cut the text in the input field.</p>

</body>
</html>

Definition and Usage
The ng-cut directive tells AngularJS what to do when you cut the text of an HTML element.

The ng-cut directive from AngularJS will not override the element's original oncut event, both the ng-cut expression and the original oncut event will be executed.

Syntax
<element ng-cut="expression"></element>
Supported by <a>, <input>, <select>, <textarea>, and the window object.

Parameter Values
Value	Description
expression	An expression to execute when the text of an element is being cut.

(9)

AngularJS ng-dblclick Directive

Example
Increase the count variable by one, each time the header is double-clicked:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<p>Double-click the header:</p>

<h1 ng-dblclick="count = count + 1" ng-init="count=0">Welcome</h1>

<p>The header has been double-clicked {{count}} times.</p>

<p>This example increases the value of the variable "count" every time you double-click the header.</p>

</body>
</html>

Definition and Usage
The ng-dblclick directive tells AngularJS what to do when an HTML element is double-clicked.

The ng-dblclick directive from AngularJS will not override the element's original ondblclick event, both are executed.

Syntax
<element ng-dblclick="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression to execute when an element is cdouble-licked.

(10)

AngularJS ng-disabled Directive

Example
Disable / enable the input field:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">
Click here to disable all the form fields:<input type="checkbox" ng-model="all"><br>
<br>

<input type="text" ng-disabled="all">
<input type="radio" ng-disabled="all">
<select ng-disabled="all">
  <option>Female</option>
  <option>Male</option>
</select>

</body>
</html>

Definition and Usage
The ng-disabled directive sets the disabled attribute of a form field (input, select, or textarea).

The form field will be disabled if the expression inside the ng-disabled attribute returns true.

The ng-disabled directive is necessary to be able to shift the value between true and false. In HTML, you cannot set the disabled attribute to false (the presence of the disabled
 attribute makes the element disabled, regardless of its value).

Syntax
<input ng-disabled="expression"></input>
Supported by <input>, <select>, and <textarea> elements.

Parameter Values
Value	Description
expression	An expression that will set the element's disabled attribute if it returns true.

(11)

AngularJS ng-focus Directive

Example
Execute an expression when the input field gets focus:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<input ng-focus="count = count + 1" ng-init="count=0" />

<h1>{{count}}</h1>

<p>This example will increase the value of the variable "count" every time the input field gets focus.</p>

</body>
</html>

Definition and Usage
The ng-focus directive tells AngularJS what to do when an HTML element gets focus.

The ng-focus directive from AngularJS will not override the element's original onfocus event, both will be executed.

Syntax
<element ng-focus="expression"></element>
Supported by <a>, <input>, <select>, <textarea>, and the window object.

Parameter Values
Value	Description
expression	An expression to execute when an element gets focus.

(12)

AngularJS ng-hide Directive

Example
Hide a section when a checkbox is checked:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

Hide HTML: <input type="checkbox" ng-model="myVar">

<div ng-hide="myVar">
<h1>Welcome</h1>
<p>Welcome to my home.</p>
</div>

</body>
</html>

Definition and Usage
The ng-hide directive hides the HTML element if the expression evaluates to true.

ng-hide is also a predefined CSS class in AngularJS, and sets the element's display to none.

Syntax
<element ng-hide="expression"></element>
When used as a CSS class:

<element class="ng-hide"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression that will hide the element if the expression returns true.

(13)

AngularJS ng-href Directive

Example
Make a href using AngularJS:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<div ng-init="myVar = 'http://www.w3schools.com'">
<h1>Tutorials</h1>
<p>Go to <a ng-href="{{myVar}}">W3 Schools</a> to learn!</p>
</div>

<p>This example could use the original href attribute, but in AngularJS, the ng-href attribute is safer.</p>

</body>
</html>

Definition and Usage
The ng-href directive overrides the original href attribute of an <a> element.

The ng-href directive should be used instead of href if you have AngularJS code inside the href value.

The ng-href directive makes sure the link is not broken even if the user clicks the link before AngularJS has evaluated the code.

Syntax
<a ng-href="string"></a>
Supported by the <a> element.

Parameter Values
Value	Description
string	A string value, or an expression resulting in a string.	

(14)

AngularJS ng-if Directive

Example
Uncheck a checkbox to remove a section:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

Keep HTML: <input type="checkbox" ng-model="myVar" ng-init="myVar = true">

<div ng-if="myVar">
<h1>Welcome</h1>
<p>Welcome to my home.</p>
<hr>
</div>

<p>The DIV element will be removed when the checkbox is not checked.</p>
<p>The DIV element will return, if you check the checkbox.</p>

</body>
</html>

Definition and Usage
The ng-if directive removes the HTML element if the expression evaluates to false.

If the if statement evaluates to true, a copy of the Element is added in the DOM.

The ng-if directive is different from the ng-hide, which hides the display of the element, where the ng-if directive completely removes the element from the DOM.

Syntax
<element ng-if="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression that will completely remove the element if it returns false. If it returns true, a copy of the element will be inserted instead.

(15)

AngularJS ng-keydown Directive

Example
Execute an expression at every keystroke:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<input ng-keydown="count = count + 1" ng-init="count=0" />

<h1>{{count}}</h1>

<p>This example will increase the value of the variable "count" every time a key is pressed in the input field.</p>

</body>
</html>

Definition and Usage
The ng-keydown directive tells AngularJS what to do when the keyboard is used on the specific HTML element.

The ng-keydown directive from AngularJS will not override the element's original onkeydown event, both will be executed.

The order of a key stroke is:

1. Keydown

2. Keypress

3. Keyup

Syntax
<element ng-keydown="expression"></element>
Supported by <input>, <select>, <textarea>, and other editable elements.

Parameter Values
Value	Description
expression	An expression to execute when a key is pressed.

(16) : 

AngularJS ng-maxlength Directive

Example
Display an error if the input value is longer than five characters:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<form name="myForm">

<p>Try writing more than five letters in the input field:</p>

<input name="myInput" ng-model="myInput" ng-maxlength="5">

<h1 ng-if="!myForm.myInput.$valid">The value is too long</h1>

</form>

<p>In this example, we will display an error if the field is contains more than five characters.</p>

</body>
</html>

Definition and Usage
The ng-maxlength directive adds a restriction to an input field, and to the validator of the form.

The ng-maxlength is not the same as the maxlength attribute in HTML, which will prevent users from typing more than the restricted number of characters.

The ng-maxlength directive will not prevent users from typing more than the restricted number off characters, but the form will be invalid if they do so.

Syntax
<input type="text" ng-maxlength="number"></input>
Mainly supported by <input> elements of type text, but can also be used on other elements that allows user input.

Parameter Values
Value	Description
number	A number representing the maximum number of characters legal for the input field.

The purpose of this directive is that if we populating the characters the into the input field more than the specified characters then it will throw the errors while typing 
into the input field without clicking on any button type option.

(17) : 

AngularJS ng-minlength Directive

Example
Display an error if the input value is shorter than five characters:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<form name="myForm">

<p>An error will be displayed when you type anything less than five characters in the input field:</p>

<input name="myInput" ng-model="myInput" ng-minlength="5">

<h1 ng-if="!myForm.myInput.$valid">The value is too short</h1>

</form>

<p>In this example, we will display an error if the field contains less than five characters.</p>

<p><b>Note:</b> If the field is empty, it is considered valid.</p>


</body>
</html>

Definition and Usage
The ng-minlength directive adds a restriction to an input field, and to the validator of the form.

The ng-minlength directive will add an "invalid" state of the input field if the length of the value is less than specified.

Note: If the value is empty, it is considered valid.

Syntax
<input type="text" ng-minlength="number"></input>
Mainly supported by <input> elements of type text, but can also be used on other elements that allows user input.

Parameter Values
Value	Description
number	A number representing the minimum number of characters legal for the input field.

The purpose of this directive is that if we populating the characters the into the input field less than the specified characters then it will throw the errors while typing 
into the input field without clicking on any button type option.

(18)

AngularJS ng-mousedown Directive

Example
Execute an expression when a mouse click occurs:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<div ng-mousedown="count = count + 1" ng-init="count=0">Click me!</div>

<h1>{{count}}</h1>

<p>This example will increase the value of the variable "count" every time a mouse button is clicked on the DIV element.</p>

</body>
</html>

Definition and Usage
The ng-mousedown directive tells AngularJS what to do when a mouse button is clicked on the specific HTML element.

The ng-mousedown directive from AngularJS will not override the element's original onmousedown event, both will be executed.

The order of a mouse click is:

1. Mousedown

2. Mouseup

3. Click

Syntax
<element ng-mousedown="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression to execute when a mouse button is clicked.

The purpose of this directive is that if we click on any HTML element with which we have associated this directive then we have to perform some specific task.

(19)

AngularJS ng-mouseenter Directive

Example
Execute an expression when the mouse cursor enters a <div> element:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<div ng-mouseenter="count = count + 1" ng-init="count=0">Mouse over me!</div>

<h1>{{count}}</h1>

<p>This example will increase the value of the variable "count" every time the mouse cursor enters the DIV element.</p>

</body>
</html>

Definition and Usage
The ng-mouseenter directive tells AngularJS what to do when a mouse cursor enters the specific HTML element.

The ng-mouseenter directive from AngularJS will not override the element's original onmouseenter event, both will be executed.

Syntax
<element ng-mouseenter="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression to execute when the mouse cursor enters an element.

The purpose of this directive is that if we take the cursor on any HTML element with which we have associated this directive then we have to perform some specific task.

(20)

AngularJS ng-mouseleave Directive

Example
Execute an expression when the mouse cursor leaves a <div> element:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<div ng-mouseleave="count = count + 1" ng-init="count=0">Mouse over me! (and mouse away from me...)</div>

<h1>{{count}}</h1>

<p>This example will increase the value of the variable "count" every time the mouse cursor leaves the DIV element.</p>

</body>
</html>

Definition and Usage
The ng-mouseleave directive tells AngularJS what to do when a mouse cursor leaves the specific HTML element.

The ng-mouseleave directive from AngularJS will not override the element's original onmouseleave event, both will be executed.

Syntax
<element ng-mouseleave="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression to execute when the mouse cursor leaves an element.

The purpose of this directive is that if we take the cursor on any HTML element and after that when we leave the cursor from same HTML element with which we have associated this 
directive then we have to perform some specific task.

(21)

AngularJS ng-mousemove Directive

Example
Execute an expression when the mouse cursor moves over a <div> element:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<div ng-mousemove="count = count + 1" ng-init="count=0">Mouse over me!</div>

<h1>{{count}}</h1>

<p>This example will increase the value of the variable "count" every time the mouse cursor moves over the DIV element.</p>

</body>
</html>

Definition and Usage
The ng-mousemove directive tells AngularJS what to do when a mouse cursor moves over the specific HTML element.

The ng-mousemove directive from AngularJS will not override the element's original onmousemove event, both will be executed.

Syntax
<element ng-mousemove="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression to execute when the mouse cursor moves over an element.

The purpose of this directive is that if we take the cursor on any HTML element (with which we have associated this directive) and if we are moving the cursor on that HTML element
(with which we have associated this directive) then we have can perform some specific task while moving the cursor on that HTML element (with which we have associated this directive).

(22)

AngularJS ng-mouseover Directive

Example
Execute an expression when the mouse cursor moves over a <div> element:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<div ng-mouseover="count = count + 1" ng-init="count=0">Mouse over me!</div>

<h1>{{count}}</h1>

<p>This example will increase the value of the variable "count" every time the mouse cursor moves over the DIV element.</p>

</body>
</html>

Definition and Usage
The ng-mouseover directive tells AngularJS what to do when a mouse cursor moves over the specific HTML element.

The ng-mouseover directive from AngularJS will not override the element's original onmouseover event, both will be executed.

Syntax
<element ng-mouseover="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression to execute when the mouse cursor moves over an element.

The purpose of this directive is that if we take the cursor on any HTML element with which we have associated this directive then we have to perform some specific task.

(23)

AngularJS ng-mouseup Directive

Example
Execute an expression when a mouse click is finished:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<div ng-mouseup="count = count + 1" ng-init="count=0">Click me!</div>

<h1>{{count}}</h1>

<p>This example will increase the value of the variable "count" every time a mouse click on the DIV element is finished.</p>

</body>
</html>

Definition and Usage
The ng-mouseup directive tells AngularJS what to do when a mouse click is finished.

The ng-mouseup directive from AngularJS will not override the element's original onmouseup event, both will be executed.

The order of a mouse click is:

1. Mousedown

2. Mouseup

3. Click

Syntax
<element ng-mouseup="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression to execute when a mouse click is finished.

The purpose of this directive is that if we click the cursor on any HTML element with which we have associated this directive then we can perform some specific task when clicked
operation finished.

(24)

AngularJS ng-non-bindable Directive

Example
This paragraph should not be compiled by AngularJS:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="">

<p>This code is compiled by AngularJS: {{ 5+5 }}</p>
<p ng-non-bindable>This code is not compiled by AngularJS: {{ 5+5 }}</p>

</div>

<p>Use the ng-non-bindable directive when you do not want AngularJS to compile or bind the content.</p>

</body>
</html>

Definition and Usage
The ng-non-bindable directive specifies that the content of this HTML element, and its child nodes, should not be compiled by AngularJS.

Syntax
<element ng-non-bindable></element>
Supported by all HTML elements.

Parameter Values
The ng-non-bindable directive does not have any parameters.

The purpose of this directive is that HTML element with which we have associated this directive will not be compiled with angular JS.

(25)

AngularJS ng-open Directive

Example
Show / Hide a <details> list by clicking a checkbox:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

Click here to show the content of the details list: <input type="checkbox" ng-model="showDetails"><br>
<br>

<details ng-open="showDetails">
  <summary>Copyright 1999-2016.</summary>
  
<input type="checkbox" ng-model="showDetails1">

<details ng-open="showDetails1">
  <summary>Copyright 1999-2017.</summary>
  <p> - by Refsnes Data. All Rights Reserved Latest.</p>
</details>

  <p> - by Refsnes Data. All Rights Reserved.</p>
</details>

<p><b>Note:</b> The details tag is currently only supported in Opera, Chrome, and Safari.</p>

</body>
</html>

Definition and Usage
The ng-open directive sets the open attribute of a details list.

The details list will be visible if the expression inside the ng-open attribute returns true.

Syntax
<details ng-open="expression">...</details>
Supported by the <details> element.

Parameter Values
Value	Description
expression	An expression that will set the element's open attribute if it returns true.

The purpose of this directive is that HTML element with which we have associated this directive will expand their child nodes.

(26)

AngularJS ng-options Directive

Example
Fill options in a dropdown list by using the items of an array:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<select ng-model="selectedName" ng-options="item for item in names">
</select>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.names = ["Emil", "Tobias", "Linus"];
});
</script>

<p>This example shows how to fill a dropdown list using the ng-options directive.</p>

</body>
</html>

Definition and Usage
The ng-options directive fills a <select> element with <options>.

The ng-options directive uses an array to fill the dropdown list. In many cases it would be easier to use the ng-repeat directive, but you have more flexibility when using the ng-options directive.

Syntax
<select ng-options="array expression"></select>
Supported by the <select> element.

Parameter Values
Value	Description
array expression	An expression that selects the specified parts of an array to fill the select element.

Legal expressions:

label for value in array

select as label for value in array

label group by group for value in array

label disabled when disable for value in array

label group by group for value in array track by expression

label disabled when disable for value in array track by expression

label for value in array | orderBy expression track by expression

The purpose of this directive is that HTML element with which we have associated this directive will use the array in order to the values of array for option under select HTML element.

(27)

AngularJS ng-paste Directive

Example
Execute an expression when text is pasted into the the input field:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<input ng-paste="count = count + 1" ng-init="count=0" value="Paste text here!" />

<p>Text has been pasted {{count}} times.</p>

<p>This example will increase the value of the variable "count" every time you paste text into the input field.</p>

</body>
</html>

Definition and Usage
The ng-paste directive tells AngularJS what to do when text is pasted into an HTML element.

The ng-paste directive from AngularJS will not override the element's original onpaste event, both will be executed.

Syntax
<element ng-paste="expression"></element>
Supported by <input>, <select>, and <textarea> and other editable elements

Parameter Values
Value	Description
expression	An expression to execute when text is being pasted into an element.

The purpose of this directive is that HTML element with which we have associated this directive can perform some specific task always when we paste some text into that HTML element.

(28)

AngularJS ng-readonly Directive

Example
Make the input field readonly:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">
Click here to make the input field readonly:<input type="checkbox" ng-model="all"><br>
<br>

<input type="text" ng-readonly="all">

</body>
</html>

Definition and Usage
The ng-readonly directive sets the readonly attribute of a form field (input or textarea).

The form field will be readonly if the expression inside the ng-readonly attribute returns true.

Syntax
<input ng-readonly="expression"></input>
Supported by <input> <textarea> elements.

Parameter Values
Value	Description
expression	An expression that will set the element's readonly attribute if it returns true.

The purpose of this directive is that HTML element with which we have associated this directive will become ready only.

(29)

AngularJS ng-repeat Directive

Example
Write one header for each item in the records array:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>

<body ng-app="myApp" ng-controller="myCtrl">

<h1 ng-repeat="x in records">{{x}}</h1>

<script>
var app = angular.module("myApp", []);
app.controller("myCtrl", function($scope) {
  $scope.records = [
    "Alfreds Futterkiste",
    "Berglunds snabbköp",
    "Centro comercial Moctezuma",
    "Ernst Handel",
  ]
});
</script>

</body>
</html>

Definition and Usage
The ng-repeat directive repeats a set of HTML, a given number of times.

The set of HTML will be repeated once per item in a collection.

The collection must be an array or an object.

Note: Each instance of the repetition is given its own scope, which consist of the current item.

If you have an collection of objects, the ng-repeat directive is perfect for making a HTML table, displaying one table row for each object, and one table data for each object 
property. See example below.

Syntax
<element ng-repeat="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression that specifies how to loop the collection.

Legal Expression examples:

x in records

(key, value) in myObj

x in records track by $id(x)

Example
Write one table row for each item in the records array:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="myApp">

<table ng-controller="myCtrl" border="1">
<tr ng-repeat="x in records">
  <td>{{x.Name}}</td>
  <td>{{x.Country}}</td>
</tr>
</table>

<script>
var app = angular.module("myApp", []);
app.controller("myCtrl", function($scope) {
  $scope.records = [
    {
      "Name" : "Alfreds Futterkiste",
      "Country" : "Germany"
    },
    {
      "Name" : "Berglunds snabbköp",
      "Country" : "Sweden"
    },
    {
      "Name" : "Centro comercial Moctezuma",
      "Country" : "Mexico"
    },
    {
      "Name" : "Ernst Handel",
      "Country" : "Austria"
    }
  ]
});
</script>

</body>
</html>

The purpose of this directive is that HTML element with which we have associated this directive in order to use some iteration values.

(30)

AngularJS ng-required Directive

Example
Make the input field required:

Required:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<form name="myForm">

Click here to make the input field required:

<input type="checkbox" ng-model="myVar"><br><br>

<input name="myInput" ng-model="myInput" ng-required="myVar">

<h1 ng-if="!myForm.myInput.$valid">The input field cannot be empty</h1>

</form>

<p>In this example, we will display an error if the field is empty AND the checkbox is checked for "required".</p>

</body>
</html>

Definition and Usage
The ng-required directive sets the required attribute of a form field (input or textarea).

The form field will be required if the expression inside the ng-required attribute returns true.

Syntax
<input ng-required="expression"></input>
Supported by <input>, <select>, and <textarea> and other editable elements

Parameter Values
Value	Description
expression	An expression that will set the required attribute if it returns true.

The purpose of this directive is that HTML element with which we have associated this directive and validator (valid) then that HTML element will become mandatory in order to enter
some value.

(31)

AngularJS ng-selected Directive
❮ AngularJS Reference
Example
Make the input field readonly:

Click here to select BMW as your favorite car:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">
Click here to select BMW as your favorite car:
<input type="checkbox" ng-model="mySel">

<p>My Favourite car:</p>

<select>
  <option>Volvo</option>
  <option ng-selected="mySel">BMW</option>
  <option>Ford</option>
</select>

</body>
</html>

Definition and Usage
The ng-selected directive sets the selected attribute of an <option> element in a <select> list.

The option will be selected if the expression inside the ng-selected attribute returns true.

The ng-selected directive is necessary to be able to shift the value between true and false. In HTML, you cannot set the selected attribute to false (the presence of the selected 
attribute makes the element selected, regardless of its value).

Syntax
<option ng-selected="expression"></option>
Supported by the <option> element.

Parameter Values
Value	Description
expression	An expression that will set the element's selected attribute if it returns true.

The purpose of this directive is that HTML element with which we have associated this directive will enable the option under select HTML element with which we have used this directive.

(32)

AngularJS ng-show Directive

Example
Show a section when a checkbox is checked:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

Show HTML: <input type="checkbox" ng-model="myVar">

<div ng-show="myVar">
<h1>Welcome</h1>
<p>Welcome to my home.</p>
</div>

</body>
</html>

Definition and Usage
The ng-show directive shows the specified HTML element if the expression evaluates to true, otherwise the HTML element is hidden.

Syntax
<element ng-show="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression that will show the element only if the expression returns true.

The purpose of this directive is that HTML element with which we have associated this directive will display on the  screen when this directive value is true.

(33)

AngularJS ng-src Directive

Example
Add an image, where the src is evaluated by AngularJS:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<div ng-init="myVar = 'pic_angular.jpg'">
<h1>Angular</h1>
<img ng-src="{{myVar}}">
</div>

<p>This example could use the original src attribute, but with AngularJS code inside the value, it is better to use the ng-src attribute instead.</p>

</body>
</html>

Definition and Usage
The ng-src directive overrides the original src attribute of an <img> element.

The ng-src directive should be used instead of src if you have AngularJS code inside the src value.

The ng-src directive makes sure the image is not displayed wrong before AngularJS has evaluated the code.

Syntax
<img ng-src="string"></img>
Supported by the <img> element.

Parameter Values
Value	Description
string	A string value, or an expression resulting in a string.

The purpose of this directive is that we can use ng-src instead of src for uploading the image over the screen.

(34)

AngularJS ng-style Directive

Example
Add som style with AngularJS, using an object with CSS keys and values:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>

<body ng-app="myApp" ng-controller="myCtrl">

<h1 ng-style="myObj">Welcome</h1>

<script>
var app = angular.module("myApp", []);
app.controller("myCtrl", function($scope) {
  $scope.myObj = {
    "color" : "black",
    "background-color" : "coral",
    "font-size" : "60px",
    "padding" : "50px"
  }
});
</script>

</body>
</html>

Definition and Usage
The ng-style directive specifies the style attribute for the HTML element.

The value of the ng-style attribute must be an object, or an expression returning an object.

The object consists of CSS properties and values, in key value pairs.

Syntax
<element ng-style="expression"></element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression which returns an object where the keys are CSS properties, and the values are CSS values.

This directive is used for using CSS properties dynamically with HTML element.

(35)

AngularJS ng-submit Directive
	
Example
Run a function when the form is submitted:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>

<body ng-app="myApp" ng-controller="myCtrl">

<form ng-submit="myFunc()">
  <input type="text">
  <input type="submit">
</form>

<p>{{myTxt}}</p>

<p>This example demonstrates how to run an AngularJS function when a for is submitted.</p>

<script>
var app = angular.module("myApp", []);
app.controller("myCtrl", function($scope) {
  $scope.myTxt = "You have not yet clicked submit";
  $scope.myFunc = function () {
      $scope.myTxt = "You clicked submit!";
  }
});
</script>

</body>
</html>

Definition and Usage
The ng-submit directive specifies a function to run when the form is submitted.

If the form does not have an action ng-submit will prevent the form from being submitted.

Syntax
<form ng-submit="expression"></form>
Supported by the <form> element.

Parameter Values
Value	Description
expression	A function to be called when the form is being submitted, or an expression to be evaluated, which should return a function call.

The purpose of this directive is to use the submit button functionality.

(36)

AngularJS ng-switch Directive

Example
Show a section of HTML, only if it matches a certain value:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

My favorite topic is:
<select ng-model="myVar">
  <option value="dogs">Dogs
  <option value="tuts">Tutorials
  <option value="cars">Cars
</select>

<hr>
<div ng-switch="myVar">
  <div ng-switch-when="dogs">
     <h1>Dogs</h1>
     <p>Welcome to a world of dogs.</p>
  </div>
  <div ng-switch-when="tuts">
     <h1>Tutorials</h1>
     <p>Learn from examples.</p>
  </div>
  <div ng-switch-when="cars">
     <h1>Cars</h1>
     <p>Read about cars.</p>
  </div>
  <div ng-switch-default>
     <h1>Switch</h1>
     <p>Select topic from the dropdown, to switch the content of this DIV.</p>
  </div>
</div>
<hr>

<p>The ng-switch directive hides and shows HTML sections depending on a certain value.</p>

</body>
</html>

Definition and Usage
The ng-switch directive lets you hide/show HTML elements depending on an expression.

Child elements with the ng-switch-when directive will be displayed if it gets a match, otherwise the element, and its children will be removed.

You can also define a default section, by using the ng-switch-default directive, to show a section if non of the other sections get a match.

Syntax
<element ng-switch="expression">
  <element ng-switch-when="value"></element>
  <element ng-switch-when="value"></element>
  <element ng-switch-when="value"></element>
  <element ng-switch-default></element>
</element>
Supported by all HTML elements.

Parameter Values
Value	Description
expression	An expression that will remove elements with no match, and display elements with a match.

The purpose of this directive is to use the functionality of switch statement.

(37)

AngularJS ng-value Directive

Example
Set the value of the input field:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<input ng-model="myVar">

<p ng-bind = "myVar"></p>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.myVar = "Hello World!";
});
</script>

<p>This example shows how to use AngularJS expressions to set the value of an input field.</p>

</body>
</html>

Definition and Usage
The ng-value directive sets the value attribute of a input element, or a select element.

Syntax
<input ng-value="expression"></input>
Supported by <input> and <select> elements.

Parameter Values
Value	Description
expression	An expression that will set the element's value attribute.

This directive functionality is same as ng-bind but the only difference is that if we are using ng-bind with ng-model then two way binding is their but if we are using ng-bind without
ng-model then no two way binding will done.
 
40 : AngularJS Directives on HTML Elements

(1)

AngularJS form Directive

Example
This form's "valid state" will not be consider "true", as long as the required input field is empty:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<p>Try writing in the input field:</p>

<form name="myForm">
<input name="myInput" ng-model="myInput" required>
</form>

<p>The forms's valid state is:</p>
<h1>{{myForm.myInput.$valid}}</h1>
<p>The input field is required, so the form's valid state will not become true as long as the value is empty.</p>

</body>
</html>

Definition and Usage
AngularJS modifies the default behavior of the <form> element.

Forms inside an AngularJS application are given certain properties. These properties describes the current state of the form.

Forms have the following states:

$pristine No fields have been modified yet
$dirty One or more have been modified
$invalid The form content is not valid
$valid The form content is valid
$submitted The form is submitted
The value of each state represents a Boolean value, and is either true or false.

Forms in AngularJS prevents the default action, which is submitting the form to the server, if the action attribute is not specified.

Syntax
<form name="formname"></form>
Forms are being referred to by using the value of the name attribute.

CSS Classes
Forms inside an AngularJS application are given certain classes. These classes can be used to style forms according to their state.

The following classes are added:

novalidate: if we used this attribute with form then that form is not allowed to use the form validation of default browser/ HTML 5 form validation because angular js need to perform
			their own form validations.

ng-pristine: correspounding to field where we have used this attribute can able to use class of this attribute based on below condition : if we have not typed anythink under the
			 field value correspounding to field where we have used this attribute then the class of this attribute is used for that field but if we have entered some value to
			 the field where we are using this attribute then the class of this attribute will not used and ng-dirty class will be used for this field where we have used this field.
			  
ng-dirty: description mentioned in ng-pristine. These two attributes ' ng-pristine ', ' ng-dirty ' are not based properly on forms. Say for example : if we have three fields that are 
		  using ng-required attribute with each fields and if we did not entered value for one field but all two field have values then the form have class of ng-dirty for the 
		  form.

ng-touched: The class of this attribute is used with field (correspounding to which field we are using this attribute) when the field (correspounding to which field we are using 
	     	this attribute) text is touched and no matter if we have entered the value for this field (correspounding to which field we are using this attribute) or not. If the field
			(correspounding to which field we are using this attribute) is vice-a-versa of this attribute then the field (correspounding to which field we are using this attribute)
			is using the class of ng-touched.If the field (correspounding to which field we are using this attribute) is untouched (while we are loading the form for first time) then
			we can say that the field (correspounding to which field we are using this attribute) value is not met based on input field (correspounding to which field we are using 
			this attribute) type then this field (correspounding to which field we are using this attribute) is having the class of ng-untouched instead of ng-touched.
			
ng-untouched: The class of this attribute is used with field (correspounding to which field we are using this attribute) when the field (correspounding to which field we are using 
	     	  this attribute) text is untouched. These two fields (ng-touched, ng-untouched) are independent to each fields which we have used in the form. These attributes 
			  ng-touched, ng-untouched) are not used with form. If the field (correspounding to which field we are using this attribute) is vice-a-versa of this attribute then the 
			  field (correspounding to which field we are using this attribute) is using the class of ng-untouched.

ng-valid: The class of this attribute is used with field (correspounding to which field we are using this attribute) when the field (correspounding to which field we are using 
	      this attribute) value is having valid input based on input element type. If the field (correspounding to which field we are using this attribute) is vice-a-versa of this 
		  attribute then the field (correspounding to which field we are using this attribute) is using the class of ng-invalid. If the field (correspounding to which field we are
		  using this attribute) is null (when we are  loading the form for first time) then we can say that the field (correspounding to which field we are using this attribute) 
		  value is not met based on input field(correspounding to which field we are using this attribute) type then this field (correspounding to which field we are using this 
		  attribute) is having the class of ng-invalid instead of ng-valid.

ng-invalid: The class of this attribute is used with field (correspounding to which field we are using this attribute) when the field (correspounding to which field we are using 
	      this attribute) value is having invalid input based on input element type. If the field (correspounding to which field we are using this attribute) is vice-a-versa of this 
		  attribute then the field (correspounding to which field we are using this attribute) is using the class of ng-valid. These two attributes ' ng-valid ', ' ng-invalid ' are 
		  based properly on forms. Say for example : if we have three fields that are using ng-required attribute with each fields and if we did not have valid value for one field 
		  (based on input type) but all two field have valid values then the form have class of ng-invlaid for the form it means if all the fields of the form have valid values then
		  form have ng-valid class.
		  
For all above attributes (ng-pristine, ng-touched, ng-untouched, ng-valid, ng-invalid, ng-dirty) are used with form. 		


If we are using the code ' input.ng-invalid.ng-touched , textarea.ng-invalid.ng-touched { border: 2px solid red }' in CSS file for one of the form then if we only 
			  touched the field of any input type/textare type then navigate to other field without entering any value into field (of input/textarea type) then the border of that 
			  field will become red.

Form Properties : 

Class        	Property

ng-pristine  	$pristine : value for this property can be true, false. If the value of 		  
ng-dirty  		$dirty : value for this property can be true, false.		  
ng-touched 		$touched : value for this property can be true, false.		  
ng-untouched    $untouched : value for this property can be true, false.		  
ng-valid        $valid : value for this property can be true, false.		  
ng-invalid      $invalid : value for this property can be true, false. If we want to use these attributes then we have to use normal HTML 'name' attribute with form as well as with
				form fields.

If we want to perform all practical example for above discussions then you can see example ' Login.html '.
			  
ng-valid-key One key for each validation. Example: ng-valid-required, useful when there are more than one thing that must be validated
ng-invalid-key Example: ng-invalid-required
The classes are removed if the value they represent is false.

Example
Apply styles for unmodified (pristine) forms, and for modified forms:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<style>
form.ng-pristine {
    background-color:lightblue;
}
form.ng-dirty {
    background-color:pink;
}
</style>
<body ng-app="">

<form name="myForm">
<p>Try writing in the input field:</p>

<input name="myName" ng-model="myName" required>

<p>The form gets a "ng-dirty" class when the form has been modified, and will therefore turn pink.</p>
</form>

</body>
</html>

The purpose of this directive is to use form attribute in angular js in normal behaviour and modifies the default behaviour of the <form> element.

(2)

AngularJS input Directive

Example
An input field with data-binding:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<p>Everything you write in the input field will also be the content of the heading below:</p>

<input ng-model="myInput">

<p>The content of the input field is;</p>
<h1>{{myInput}}</h1>

</body>
</html>

Definition and Usage
AngularJS modifies the default behavior of <input> elements, but only if the ng-model attribute is present.

They provide data-binding, which means they are part of the AngularJS model, and can be referred to, and updated, both in AngularJS functions and in the DOM.

They provide validation. Example: an <input> element with a required attribute, has the $valid state set to false as long as it is empty.

They also provide state control. AngularJS holds the current state of all input elements.

Input fields have the following states:

$untouched The field has not been touched yet
$touched The field has been touched
$pristine The field has not been modified yet
$dirty The field has been modified
$invalid The field content is not valid
$valid The field content is valid
The value of each state represents a Boolean value, and is either true or false.

Syntax
<input ng-model="name">
Input elements are being referred to by using the value of the ng-model attribute.

CSS Classes
<input> elements inside an AngularJS application are given certain classes. These classes can be used to style input elements according to their state.

The following classes are added:

ng-untouched The field has not been touched yet
ng-touched The field has been touched
ng-pristine The field has not been  modified yet
ng-dirty The field has been modified
ng-valid The field content is valid
ng-invalid The field content is not valid
ng-valid-key One key for each validation. Example: ng-valid-required, useful when there are more than one thing that must be validated
ng-invalid-key Example: ng-invalid-required
The classes are removed if the value they represent is false.

Example
Apply styles for valid and invalid input elements, using standard CSS:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<style>
input.ng-invalid {
    background-color:pink;
}
input.ng-valid {
    background-color:lightgreen;
}
</style>
<body ng-app="">

<p>Try writing in the input field:</p>

<input ng-model="myName" required>

<p>The input field requires content, and will therefore become green when you write in it.</p>

</body>
</html>

The purpose of this directive is to use input attribute in angular js in normal behaviour and modifies the default behaviour of the <input> element.

(3)

AngularJS textarea Directive

Example
An textarea with data-binding:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<p>Everything you write in the textarea will also be the content of the heading below:</p>

<textarea ng-model="myTextarea"></textarea>

<p>The content of the textarea is;</p>
<h1>{{myTextarea}}</h1>

</body>
</html>

Definition and Usage
AngularJS modifies the default behavior of <textarea> elements, but only if the ng-model attribute is present.

They provide data-binding, which means they are part of the AngularJS model, and can be referred to, and updated, both in AngularJS functions and in the DOM.

They provide validation. Example: an <textarea> element with a required attribute, has the $valid state set to false as long as it is empty.

They also provide state control. AngularJS holds the current state of all textarea elements.

Textarea fields have the following states:

$untouched The field has not been touched yet
$touched The field has been touched
$pristine The field has not been modified yet
$dirty The field has been modified
$invalid The field content is not valid
$valid The field content is valid
The value of each state represents a Boolean value, and is either true of false.

Syntax
<textarea ng-model="name"></textarea>
Textarea elements are being referred to by using the value of the ng-model attribute.

CSS Classes
<textarea> elements inside an AngularJS application are given certain classes. These classes can be used to style textarea elements according to their state.

The following classes are added:

ng-untouched The field has not been touched yet
ng-touched The field has been touched
ng-pristine The field has not been  modified yet
ng-dirty The field has been modified
ng-valid The field content is valid
ng-invalid The field content is not valid
ng-valid-key One key for each validation. Example: ng-valid-required, useful when there are more than one thing that must be validated
ng-invalid-key Example: ng-invalid-required
The classes are removed if the value they represent is false.

Example
Apply styles for valid and invalid textarea elements, using standard CSS:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<style>
textarea.ng-invalid {
    background-color:pink;
}
textarea.ng-valid {
    background-color:lightgreen;
}
</style>
<body ng-app="">

<p>Try writing in the textarea field:</p>

<textarea ng-model="myName" required>

The purpose of this directive is to use textarea attribute in angular js in normal behaviour and modifies the default behaviour of the <textarea> element.

41 : Angular JS Filters : 

(1)

AngularJS currency Filter

Example
Display the number as a currency format:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="costCtrl">

<p>Price = {{ price | currency }}</p>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('costCtrl', function($scope) {
    $scope.price = 9.66;
});
</script>

<p>The currency filter formats a number to a currency format.</p>

</body>
</html>

Definition and Usage
The currency filter formats a number to a currency format.

By default, the locale currency format is used.

Syntax
{{ number | currency : symbol : fractionsize }}
Parameter Values
Value	Description
symbol	Optional. The currency symbol to be displayed. The symbol can be any character or text.
fractionsize	Optional. The number of decimals.

Example
Display the price in the Norwegian currency format:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="costCtrl">

<p>Price = {{ price | currency : "NOK"}}</p>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('costCtrl', function($scope) {
    $scope.price = 9.99;
});
</script>

<p>You can change the currency symbol by setting the symbol parameter.</p>

</body>
</html>

Example
Display the price with three deciamls:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="costCtrl">

<p>Price = {{ price | currency : "NOK" : 3}}</p>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('costCtrl', function($scope) {
    $scope.price = 9.99;
});
</script>

<p>You can change the number of decimals by setting the fractionsize parameter.</p>

</body>
</html>

All above examples of Currency filters.

(2)

AngularJS date Filter

Example
Display the number as a currency format:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="datCtrl">

<p>Date = {{ today | date }}</p>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('datCtrl', function($scope) {
    $scope.today = new Date();
});
</script>

<p>The date filter formats a date object to a readable format.</p>

</body>
</html>


Definition and Usage
The date filter formats a date to a specified format.

The date can be a date object, milliseconds, or a datetime string like "2016-01-05T09:05:05.035Z"

By default, the format is "MMM d, y" (Jan 5, 2016).

Syntax
{{ date | date : format : timezone }}
Parameter Values
Value	Description
format	Optional. The date format to display the date in, which can be one or more of the following:
"yyyy" year (2016)
"yy" year (16)
"y" year (2016)
"MMMM" month (January)
"MMM" month (Jan)
"MM" month (01)
"M" month (1)
"dd" day (06) 
"d" day (6)
"EEEE" day (Tuesday)
"EEE" day (Tue)
"HH" hour, 00-23 (09)
"H" hour 0-23 (9)
"hh" hour in AM/PM, 00-12 (09)
"h" hour in AM/PM, 0-12 (9)
"mm" minute (05)
"m" minute (5)
"ss" second (05)
"s" second (5)
"sss" millisecond (035)
"a" (AM/PM)
"Z" timezone (from -1200 to +1200)
"ww" week (00-53)
"w" week (0-53)
"G" era (AD)
"GG" era (AD)
"GGG" era (AD)
"GGGG" era (Anno Domini)

The format value can also be one of the following predefined formats:
"short" same as "M/d/yy h:mm a" (1/5/16 9:05 AM)
"medium" same as "MMM d, y h:mm:ss a" (Jan 5, 2016 9:05:05 AM)
"shortDate" same as "M/d/yy" (1/5/16)
"mediumDate" same as "MMM d, y" (Jan 5, 2016)
"longDate" same as "MMMM d, y" (January 5, 2016)
"fullDate" same as "EEEE, MMMM d, y" (Tuesday, January 5, 2016)
"shortTime" same as "h:mm a" (9:05 AM)
"mediumTime" same as "h:mm:ss a" (9:05:05 AM)
timezone	Optional. The timezone used to format the date.


Example
Display a date in a custom format:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="datCtrl">

<p>Date = {{ today | date : "dd.MM.y" }}</p>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('datCtrl', function($scope) {
    $scope.today = new Date();
});
</script>

<p>You can write the date in many different formats.</p>

</body>
</html>


Example
Display a date combination of text and a predefined format:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="datCtrl">

<p>Date = {{ today | date : "fullDate" }}</p>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('datCtrl', function($scope) {
    $scope.today = new Date();
});
</script>

<p>You can use predefinted formats when displaying a date.</p>

</body>
</html>


Example
The date as a datetime string:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="">

<p>Date = {{ "2016-01-05T09:05:05.035Z" | date }}</p>

</div>

<p>The date can be a date object, milliseconds, or, like in this example, a datetime string.</p>

</body>
</html>

All above examples of Date filters.

(3)

AngularJS filter Filter

Example
Display the items that contains the letter "A":

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="arrCtrl">

<ul>
<li ng-repeat="x in cars | filter : 'A'">{{x}}</li>
</ul>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('arrCtrl', function($scope) {
    $scope.cars = ["Aston Martin", "Audi", "Bentley", "BMW", "Bugatti"];
});
</script>

<p>Return only the items that matches your filter.</p>

</body>
</html>



Definition and Usage
The filter filter allows us to filter an array, and return an array containing only the matching items.

This filter can only be used for arrays.

Syntax
{{ arrayexpression | filter : expression : comparator }}
Parameter Values
Value	Description
expression	The expression used when selecting items from the array. The expression can be of type:

String: The array items that match the string will be returned.

Object: The object is a pattern to search for in the array. Example: {"name" : "H", "city": "London"} will return the array items with a name containing the letter "H", where the city contains the word "London". See example below.

Function: A function which will be called for each array item, and items where the function returns true will be in the result array.
comparator	Optional. Defines how strict the comparison should be. The value can be:

true : Returns a match only if the value of the array item is exactly what we compare it with.

false : Returns a match if the value of the array item contains what we compare it with. This comparison is not case sensitiv. This is the default value.

function : A function where we can define what will be considered a match or not.
More Examples
Example
Use an object as a filter:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="arrCtrl">

<ul>
<li ng-repeat="x in customers | filter : {'name' : 'O', 'city' : 'London'}">{{x.name + ", " + x.city}}</li>
</ul>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('arrCtrl', function($scope) {
    $scope.customers = [
        {"name" : "Alfreds Futterkiste", "city" : "Berlin"},
        {"name" : "Around the Horn", "city" : "London"},
        {"name" : "B's Beverages", "city" : "London"},
        {"name" : "Bólido Comidas preparadas", "city" : "Madrid"},
        {"name" : "Bon app", "city" : "Marseille"},
        {"name" : "Bottom-Dollar Marketse" ,"city" : "Tsawassen"},
        {"name" : "Cactus Comidas para llevar", "city" : "Buenos Aires"}
    ];
});
</script>

<p>The filter will give a match if there is an "O" in the name, and the city is "London".</p>

</body>
</html>


(4)

AngularJS json Filter

Example
Display a JavaScript object as a JSON string:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="jsCtrl">

<h1>Customer:</h1>

<pre>{{customer | json}}</pre>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('jsCtrl', function($scope) {
    $scope.customer = {
        "name" : "Alfreds Futterkiste",
        "city" : "Berlin",
        "country" : "Germany"
    };
});
</script>

<p>The json filter converts a JavaScript object into a JSON string.</p>

</body>
</html>


Definition and Usage
The json filter converts a JavaScript object into a JSON string.

This filter can be useful when debugging your applications.

The JavaScript object can be any kind of JavaScript object.

Syntax
{{ object | json : spacing }}
Parameter Values
Value	Description
spacing	Optional. A number specifying how many spaces to user per indentation. The default value is 2

Example
Make sure that the JSON string is written with 12 spaces per indentation:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="jsCtrl">

<h1>Customer:</h1>

<pre>{{customer | json : 12}}</pre>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('jsCtrl', function($scope) {
    $scope.customer = {
        "name" : "Alfreds Futterkiste",
        "city" : "Berlin",
        "country" : "Germany"
    };
});
</script>

<p>A JSON string with 12 spaces per indentation.</p>

</body>
</html>


Example
The JavaScript object as an array:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="jsCtrl">

<h1>Carnames:</h1>

<pre>{{cars | json}}</pre>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('jsCtrl', function($scope) {
    $scope.cars = ["Audi", "BMW", "Ford"];
});
</script>

<p>The JavaScript object can be of any type, here as an array.</p>

</body>
</html>

(5)

AngularJS limitTo Filter

Example
Display only the first three items of an array:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="sizeCtrl">

<ul>
<li ng-repeat="x in cars | limitTo : 5">{{x}}</li>
</ul>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('sizeCtrl', function($scope) {
    $scope.cars = ["Audi", "BMW", "Dodge", "Fiat", "Ford", "Volvo"];
});
</script>

<p>Only the first three items of the array are displayed.</p>

</body>
</html>


Definition and Usage
The limitTo filter returns an array or a string containing only a specified number of elements.

When the limitTo filter is used for arrays, it returns an array containing only the specified number of items.

When the limitTo filter is used for strings, it returns a string containing, only the specified number of characters.

When the limitTo filter is used for numbers, it returns a string containing only the specified number of digits.

Use negative numbers to return elements starting from the end of the element, instead of the beginning.

Syntax
{{ object | limitTo : limit : begin }}
Parameter Values
Value	Description
limit	 A number, specifying how many elements to return
begin	Optional. A number specifying where to begin the limitation. Default is 0

Example
Display the last three items of the array:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="sizeCtrl">

<ul>
<li ng-repeat="x in cars | limitTo : -3">{{x}}</li>
</ul>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('sizeCtrl', function($scope) {
    $scope.cars = ["Audi", "BMW", "Dodge", "Fiat", "Ford", "Volvo"];
});
</script>

<p>Only the last three items of the array are displayed.</p>

</body>
</html>


Example
Display three items, starting at position 1:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="sizeCtrl">

<ul>
<li ng-repeat="x in cars | limitTo : 3 : 1">{{x}}</li>
</ul>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('sizeCtrl', function($scope) {
    $scope.cars = ["Audi", "BMW", "Dodge", "Fiat", "Ford", "Volvo"];
});
</script>

<p>Only three items of the array are displayed, starting from position 1 (which is the second item of the array).</p>

</body>
</html>


Example
Display the first three characters of the string:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="sizeCtrl">

<h1>{{txt | limitTo : 3}}</h1>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('sizeCtrl', function($scope) {
    $scope.txt = "Hello, welcome to AngularJS";
});
</script>

<p>Only the first three characters are displayed.</p>

</body>
</html>


Example
Display the first three digits og the number:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="sizeCtrl">

<h1>{{phone | limitTo : 3}}</h1>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('sizeCtrl', function($scope) {
    $scope.phone = "123456789";
});
</script>

<p>Only the first three digits are displayed.</p>

</body>
</html>

(6)

AngularJS lowercase Filter

Example
Display the text in lowercase letters:

<div ng-app="myApp" ng-controller="caseCtrl">

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="caseCtrl">

<h1>{{txt | lowercase}}</h1>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('caseCtrl', function($scope) {
    $scope.txt = "Hello World! G;KG;LKD;LKK;KLKD;KD;KD;KD;DK;DK;D";
});
</script>

<p>The text is written in lowercase letters.</p>

</body>
</html>


Definition and Usage
The lowercase filter converts a string to lowercase letters.

Syntax
{{ string | lowercase }}

(7)

AngularJS number Filter

Example
Format the prize as a number::

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="nCtrl">

<h1>{{prize | number}}</h1>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('nCtrl', function($scope) {
    $scope.prize = 10053534;
});
</script>

<p>The prize is written as a string, but formatted as a number.</p>

</body>
</html>


Definition and Usage
The number filter formats a number to a string.

Syntax
{{ string | number : fractionsize}}
Parameter Values
Value	Description
fractionsize	 A number, specifying the number of decimals.

Example
Display the weight with 3 decimals:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="nCtrl">

<h1>{{weight | number : 3}} kg</h1>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('nCtrl', function($scope) {
    $scope.weight = 99996876;
});
</script>

<p>The weight is written with three decimals.</p>

</body>
</html>

(8)

AngularJS orderBy Filter

Example
Display the items alphabetically:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="orderCtrl">

<ul>
<li ng-repeat="x in cars | orderBy">{{x}}</li>
</ul>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('orderCtrl', function($scope) {
    $scope.cars = ["Dodge", "Fiat", "Audi", "Volvo", "BMW", "Ford"];
});
</script>

<p>The array items are displayed alphabetically.</p>

</body>
</html>


Definition and Usage
The orderBy filter allows us to sort an array.

By default, strings are sorted alphabetically, and numbers are sorted numerically.

Syntax
{{ array | orderBy : expression : reverse }}
Parameter Values
Value	Description
expression	The expression used to determine the order. The expression can be of type:

String: If the array is an array of objects, you can sort the array by the value of one of the object properties. See the examples below.

Function: You can create a function to organize the sorting.

Array: Use an array if you need more than one object property to determine the sorting order. The array items can be both strings and functions.
reverse	Optional. Set to true if you want to reverse the order of the array.

Example
Sort the array by "city":

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="orderCtrl">

<ul>
<li ng-repeat="x in customers | orderBy : 'city'">
    {{x.name + ", " + x.city}}
</li>
</ul>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('orderCtrl', function($scope) {
    $scope.customers = [
        {"name" : "Bottom-Dollar Marketse" ,"city" : "Tsawassen"},
        {"name" : "Alfreds Futterkiste", "city" : "Berlin"},
        {"name" : "Bon app", "city" : "Marseille"},
        {"name" : "Cactus Comidas para llevar", "city" : "Buenos Aires"},
        {"name" : "Bolido Comidas preparadas", "city" : "Madrid"},
        {"name" : "Around the Horn", "city" : "London"},
        {"name" : "B's Beverages", "city" : "London"}
    ];
});
</script>

<p>The array items are sorted by "city".</p>

</body>
</html>


Example
Sort the array by "city", in descending order:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="orderCtrl">

<ul>
<li ng-repeat="x in customers | orderBy : '-city'">
    {{x.name + ", " + x.city}}
</li>
</ul>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('orderCtrl', function($scope) {
    $scope.customers = [
        {"name" : "Bottom-Dollar Marketse" ,"city" : "Tsawassen"},
        {"name" : "Alfreds Futterkiste", "city" : "Berlin"},
        {"name" : "Bon app", "city" : "Marseille"},
        {"name" : "Cactus Comidas para llevar", "city" : "Buenos Aires"},
        {"name" : "Bolido Comidas preparadas", "city" : "Madrid"},
        {"name" : "Around the Horn", "city" : "London"},
        {"name" : "B's Beverages", "city" : "London"}
    ];
});
</script>

<p>Use the minus sign to sort descending (-city).</p>

</body>
</html>

(9)

AngularJS uppercase Filter

Example
Display the text in uppercase letters:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="caseCtrl">

<h1>{{txt | uppercase}}</h1>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('caseCtrl', function($scope) {
    $scope.txt = "Hello World!";
});
</script>

<p>The text is written in uppercase letters.</p>

</body>
</html>


Definition and Usage
The uppercase filter converts a string to uppercase letters.

Syntax
{{ string | uppercase}}

(10)

AngularJS Form Validation

AngularJS can validate input data.

Form Validation
AngularJS offers client-side form validation.

AngularJS monitors the state of the form and input fields (input, textarea, select), and lets you notify the user about the current state.

AngularJS also holds information about whether they have been touched, or modified, or not.

You can use standard HTML5 attributes to validate input, or you can make your own validation functions.

Client-side validation cannot alone secure user input. Server side validation is also necessary.

Required
Use the HTML5 attribute required to specify that the input field must be filled out:

Example
The input field is required:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<p>Try writing in the input field:</p>

<form name="myForm">
<input name="myInput" ng-model="myInput" required>
</form>

<p>The input's valid state is:</p>
<h1>{{myForm.myInput.$valid}}</h1>

</body>
</html>


E-mail
Use the HTML5 type email to specify that the value must be an e-mail:

Example
The input field has to be an e-mail:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<p>Try writing an E-mail address in the input field:</p>

<form name="myForm">
<input type="email" name="myInput" ng-model="myInput">
</form>

<p>The input's valid state is:</p>
<h1>{{myForm.myInput.$valid}}</h1>
<p>Note that the state of the input field is "true" before you start writing in it, even if it does not contain an e-mail address.</p>

</body>
</html>


Form State and Input State
AngularJS is constantly updating the state of both the form and the input fields.

Input fields have the following states:

$untouched The field has not been touched yet
$touched The field has been touched
$pristine The field has not been modified yet
$dirty The field has been modified
$invalid The field content is not valid
$valid The field content is valid
They are all properties of the input field, and are either true or false.

Forms have the following states:

$pristine No fields have been modified yet
$dirty One or more have been modified
$invalid The form content is not valid
$valid The form content is valid
$submitted The form is submitted
They are all properties of the form, and are either true or false.

You can use these states to show meaningful messages to the user. Example, if a field is required, and the user leaves it blank, you should give the user a
warning:

Example
Show an error message if the field has been touched AND is empty:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<p>Try leaving the first input field blank:</p>

<form name="myForm">
<p>Name:
<input name="myName" ng-model="myName" required>
<span ng-show="myForm.myName.$touched && myForm.myName.$invalid">The name is required.</span>
</p>

<p>Address:
<input name="myAddress" ng-model="myAddress" required>
</p>

</form>

<p>We use the ng-show directive to only show the error message if the field has been touched AND is empty.</p>

</body>
</html>


CSS Classes
AngularJS adds CSS classes to forms and input fields depending on their states.

The following classes are added to, or removed from, input fields:

ng-untouched The field has not been touched yet
ng-touched The field has been touched
ng-pristine The field has not been  modified yet
ng-dirty The field has been modified
ng-valid The field content is valid
ng-invalid The field content is not valid
ng-valid-key One key for each validation. Example: ng-valid-required, useful when there are more than one thing that must be validated
ng-invalid-key Example: ng-invalid-required
The following classes are added to, or removed from, forms:

ng-pristine No fields has not been modified yet
ng-dirty One or more fields has been modified
ng-valid The form content is valid
ng-invalid The form content is not valid
ng-valid-key One key for each validation. Example: ng-valid-required, useful when there are more than one thing that must be validated
ng-invalid-key Example: ng-invalid-required
The classes are removed if the value they represent is false.

Add styles for these classes to give your application a better and more intuitive user interface.

Example
Apply styles, using standard CSS:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<style>
input.ng-invalid {
    background-color:pink;
}
input.ng-valid {
    background-color:lightgreen;
}
</style>
<body ng-app="">

<p>Try writing in the input field:</p>

<form name="myForm">
<input name="myName" ng-model="myName" required>
</form>

<p>The input field requires content, and will therefore become green when you write in it.</p>

</body>
</html>


Forms can also be styled:

Example
Apply styles for unmodified (pristine) forms, and for modified forms:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<style>
form.ng-pristine {
    background-color:lightblue;
}
form.ng-dirty {
    background-color:pink;
}
</style>
<body ng-app="">

<form name="myForm">
<p>Try writing in the input field:</p>

<input name="myName" ng-model="myName" required>

<p>The form gets a "ng-dirty" class when the form has been modified, and will therefore turn pink.</p>
</form>

</body>
</html>


Custom Validation
To create your own validation function is a bit more tricky. You have to add a new directive to your application, and deal with the validation inside a 
function with certain specified arguments.

Example
Create your own directive, containing a custom validation function, and refer to it by using my-directive.

The field will only be valid if the value contains the character "e":

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="myApp">

<p>Try writing in the input field:</p>

<form name="myForm">
<input name="myInput" ng-model="myInput" required my-directive>
</form>

<p>The input's valid state is:</p>
<h1>{{myForm.myInput.$valid}}</h1>

<script>
var app = angular.module('myApp', []);
app.directive('myDirective', function() {
    return {
        require: 'ngModel',
        link: function(scope, element, attr, mCtrl) {
            function myValidation(value) {
                if (value.indexOf("e") > -1) {
                    mCtrl.$setValidity('charE', true);
                } else {
                    mCtrl.$setValidity('charE', false);
                }
                return value;
            }
            mCtrl.$parsers.push(myValidation);
        }
    };
});
</script>

<p>The input field must contain the character "e" to be consider valid.</p>

</body>
</html>


Example Explained:
In HTML, the new directive will be referred to by using the attribute my-directive.

In the JavaScript we start by adding a new directive named myDirective.

Remember, when naming a directive, you must use a camel case name, myDirective, but when invoking it, you must use - separated name, my-directive.

Then, return an object where you specify that we require  ngModel, which is the ngModelController.

Make a linking function which takes some arguments, where the fourth argument, mCtrl, is the ngModelController,

Then specify a function, in this case named myValidation, which takes one argument, this argument is the value of the input element.

Test if the value contains the letter "e", and set the validity of the model controller to either true or false.

At last, mCtrl.$parsers.push(myValidation); will add the myValidation function to an array of other functions, which will be executed every time the input
value changes.

Validation Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<h2>Validation Example</h2>

<form ng-app="myApp" ng-controller="validateCtrl"
name="myForm" novalidate>

<p>Username:<br>
<input type="text" name="user" ng-model="user" required>
<span style="color:red" ng-show="myForm.user.$dirty && myForm.user.$invalid">
<span ng-show="myForm.user.$error.required">Username is required.</span>
</span>
</p>

<p>Email:<br>
<input type="email" name="email" ng-model="email" required>
<span style="color:red" ng-show="myForm.email.$dirty && myForm.email.$invalid">
<span ng-show="myForm.email.$error.required">Email is required.</span>
<span ng-show="myForm.email.$error.email">Invalid email address.</span>
</span>
</p>

<p>
<input type="submit"
ng-disabled="myForm.user.$dirty && myForm.user.$invalid ||
myForm.email.$dirty && myForm.email.$invalid">
</p>

</form>

<script>
var app = angular.module('myApp', []);
app.controller('validateCtrl', function($scope) {
    $scope.user = 'John Doe';
    $scope.email = 'john.doe@gmail.com';
});
</script>

</body>
</html>


The HTML form attribute novalidate is used to disable default browser validation.

(11)

AngularJS API

API stands for Application Programming Interface.

AngularJS Global API
The AngularJS Global API is a set of global JavaScript functions for performing common tasks like:

Comparing objects
Iterating objects
Converting data
The Global API functions are accessed using the angular object.

Below is a list of some common API functions:

API	Description
angular.lowercase()	Converts a string to lowercase
angular.uppercase()	Converts a string to uppercase
angular.isString()	Returns true if the reference is a string
angular.isNumber()	Returns true if the reference is a number

angular.lowercase()
Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
<p>{{ x1 }}</p>
<p>{{ x2 }}</p>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.x1 = "JOHN";
    $scope.x2 = angular.lowercase($scope.x1);
});
</script>

</body>
</html>


angular.uppercase()
Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
<p>{{ x1 }}</p>
<p>{{ x2 }}</p>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.x1 = "John";
    $scope.x2 = angular.uppercase($scope.x1);
});
</script>

</body>
</html>


angular.isString()
Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
<p>{{ x1 }}</p>
<p>{{ x2 }}</p>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.x1 = "JOHN";
    $scope.x2 = angular.isString($scope.x1);
});
</script>

</body>
</html>


angular.isNumber()

Example
<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>

<body>

<div ng-app="myApp" ng-controller="myCtrl">
<p>{{ x1 }}</p>
<p>{{ x2 }}</p>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.x1 = "JOHN";
    $scope.x2 = angular.isNumber($scope.x1);
});
</script>

</body>
</html>

42 : AngularJS Directives

AngularJS lets you extend HTML with new attributes called Directives.

AngularJS has a set of built-in directives which offers functionality to your applications.

AngularJS also lets you define your own directives.

AngularJS Directives
AngularJS directives are extended HTML attributes with the prefix ng-.

The ng-app directive initializes an AngularJS application.

The ng-init directive initializes application data.

The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.

Read about all AngularJS directives in our AngularJS directive reference.

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="" ng-init="firstName='John'">

<p>Input something in the input box:</p>
<p>Name: <input type="text" ng-model="firstName"></p>
<p>You wrote: {{ firstName }}</p>

</div>

</body>
</html>


The ng-app directive also tells AngularJS that the <div> element is the "owner" of the AngularJS application.

Data Binding
The {{ firstName }} expression, in the example above, is an AngularJS data binding expression.

Data binding in AngularJS binds AngularJS expressions with AngularJS data.

{{ firstName }} is bound with ng-model="firstName".

In the next example two text fields are bound together with two ng-model directives:

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div data-ng-app="" data-ng-init="quantity=1;price=5">

<h2>Cost Calculator</h2>

Quantity: <input type="number" ng-model="quantity">
Price: <input type="number" ng-model="price">

<p><b>Total in dollar:</b> {{quantity * price}}</p>

</div>

</body>
</html>


Using ng-init is not very common. You will learn how to initialize data in the chapter about controllers.

Repeating HTML Elements
The ng-repeat directive repeats an HTML element:

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="" ng-init="names=['Jani','Hege','Kai']">
  <p>Looping with ng-repeat:</p>
  <ul>
    <li ng-repeat="x in names">
      {{ x }}
    </li>
  </ul>
</div>

</body>
</html>


AngularJS is perfect for database CRUD (Create Read Update Delete) applications.
Just imagine if these objects were records from a database.

The ng-app Directive
The ng-app directive defines the root element of an AngularJS application.

The ng-app directive will auto-bootstrap (automatically initialize) the application when a web page is loaded.

The ng-init Directive
The ng-init directive defines initial values for an AngularJS application.

Normally, you will not use ng-init. You will use a controller or module instead.

You will learn more about controllers and modules later.

The ng-model Directive
The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.

The ng-model directive can also:

Provide type validation for application data (number, email, required).
Provide status for application data (invalid, dirty, touched, error).
Provide CSS classes for HTML elements.
Bind HTML elements to HTML forms.
Read more about the ng-model directive in the next chapter.

Create New Directives
In addition to all the built-in AngularJS directives, you can create your own directives.

New directives are created by using the .directive function.

To invoke the new directive, make an HTML element with the same tag name as the new directive.

When naming a directive, you must use a camel case name, w3TestDirective, but when invoking it, you must use - separated name, w3-test-directive:

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="myApp">

<w3-test-directive></w3-test-directive>

<script>
var app = angular.module("myApp", []);
app.directive("w3TestDirective", function() {
    return {
        template : "<h1>Made by a directive!</h1>"
    };
});
</script>

</body>
</html>


You can invoke a directive by using:

Element name
Attribute
Class
Comment
The examples below will all produce the same result:

Element name

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="myApp">

<w3-test-directive></w3-test-directive>

<script>
var app = angular.module("myApp", []);
app.directive("w3TestDirective", function() {
    return {
        template : "<h1>Made by a directive!</h1>"
    };
});
</script>

</body>
</html>


Attribute

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="myApp">

<div w3-test-directive></div>

<script>
var app = angular.module("myApp", []);
app.directive("w3TestDirective", function() {
    return {
        template : "<h1>Made by a directive!</h1>"
    };
});
</script>

</body>
</html>


Class

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="myApp">

<div class="w3-test-directive"></div>

<script>
var app = angular.module("myApp", []);
app.directive("w3TestDirective", function() {
    return {
        restrict : "C",
        template : "<h1>Made by a directive!</h1>"
    };
});
</script>

<p><strong>Note:</strong> You must add the value "C" to the restrict property to be able to invoke the directive from a class name.</p>

</body>
</html>


Comment

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="myApp">

<!-- directive: w3-test-directive -->

<script>
var app = angular.module("myApp", []);
app.directive("w3TestDirective", function() {
    return {
        restrict : "M",
        replace : true,
        template : "<h1>Made by a directive!</h1>"
    };
});
</script>

<p><strong>Note:</strong> We've added the <strong>replace</strong> property in this example, otherwise the comment would be invisible.</p>

<p><strong>Note:</strong> You must add the value "M" to the <strong>restrict</strong> property to be able to invoke the directive from a comment.</p>

</body>
</html>


Restrictions
You can restrict your directives to only be invoked by some of the methods.

Example
By adding a restrict property with the value "A", the directive can only be invoked by attributes:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="myApp">

<w3-test-directive></w3-test-directive>

<div w3-test-directive></div>

<script>
var app = angular.module("myApp", []);
app.directive("w3TestDirective", function() {
    return {
        restrict : "A",
        template : "<h1>Made by a directive!</h1>"
    };
});
</script>

<p><strong>Note:</strong> By setting the <strong>restrict</strong> property to "A", only the HTML element with the "w3-test-directive" attribute has invoked the directive.</p>

</body>
</html>


The legal restrict values are:

E for Element name
A for Attribute
C for Class
M for Comment
By default the value is EA, meaning that both Element names and attribute names can invoke the directive.

43 : AngularJS ng-model Directive

The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.

The ng-model Directive
With the ng-model directive you can bind the value of an input field to a variable created in AngularJS.

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
Name: <input ng-model="name">
{{name}}
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.name = "John Doe";
});
</script>

<p>Use the ng-model directive to bind the value of the input field to a property made in the controller.</p>

</body>
</html>


Two-Way Binding
The binding goes both ways. If the user changes the value inside the input field, the AngularJS property will also change its value:

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
Name: <input ng-model="name">
<h1>You entered: {{name}}</h1>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.name = "John Doe";
});
</script>

<p>Change the name inside the input field, and you will see the name in the header changes accordingly.</p>

</body>
</html>


Validate User Input
The ng-model directive can provide type validation for application data (number, e-mail, required):

Example
<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<form ng-app="" name="myForm">
    Email:
    <input type="email" name="myAddress" ng-model="text">
    <span ng-show="myForm.myAddress.$error.email">Not a valid e-mail address</span>
</form>

<p>Enter your e-mail address in the input field. AngularJS will display an errormessage if the address is not an e-mail.</p>

</body>
</html>


In the example above, the span will be displayed only if the expression in the ng-show attribute returns true.

If the property in the ng-model attribute does not exist, AngularJS will create one for you.

Application Status
The ng-model directive can provide status for application data (invalid, dirty, touched, error):

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<form ng-app="" name="myForm" ng-init="myText = 'post@myweb.com'">

Email:
<input type="email" name="myAddress" ng-model="myText" required>
<p>Edit the e-mail address, and try to change the status.</p>
<h1>Status</h1>
<p>Valid: {{myForm.myAddress.$valid}} (if true, the value meets all criteria).</p>
<p>Dirty: {{myForm.myAddress.$dirty}} (if true, the value has been changed).</p>
<p>Touched: {{myForm.myAddress.$touched}} (if true, the field has been in focus).</p>

</form>

</body>
</html>


CSS Classes
The ng-model directive provides CSS classes for HTML elements, depending on their status:

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<style>
input.ng-invalid {
    background-color: lightblue;
}
</style>
<body>

<form ng-app="" name="myForm">
    Enter your name:
    <input name="myName" ng-model="myText" required>
</form>

<p>Edit the text field and it will get/lose classes according to the status.</p>
<p><b>Note:</b> A text field with the "required" attribute is not valid when it is empty.</p>

</body>
</html>


The ng-model directive adds/removes the following classes, according to the status of the form field:

ng-empty
ng-not-empty
ng-touched
ng-untouched
ng-valid
ng-invalid
ng-dirty
ng-pending
ng-pristine

44 : AngularJS Data Binding

Data binding in AngularJS is the synchronization between the model and the view.

Data Model
AngularJS applications usually have a data model. The data model is a collection of data available for the application.

Example
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.firstname = "John";
    $scope.lastname = "Doe";
});

HTML View
The HTML container where the AngularJS application is displayed, is called the view.

The view has access to the model, and there are several ways of displaying model data in the view.

You can use the ng-bind directive, which will bind the innerHTML of the element to the specified model property:

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
    <p ng-bind="firstname"></p>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.firstname = "John";
    $scope.lastname = "Doe";
});
</script>

<p>Use the ng-bind directive to bind the innerHTML of an element to a property in the data model.</p>

</body>
</html>


You can also use double braces {{ }} to display content from the model:

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
    <p>First name: {{firstname}}</p>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.firstname = "John";
    $scope.lastname = "Doe";
});
</script>

<p>You can use double braces to display content from the data model.</p>

</body>
</html>


Or you can use the ng-model directive on HTML controls to bind the model to the view.

The ng-model Directive
Use the ng-model directive to bind data from the model to the view on HTML controls (input, select, textarea)

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
    <input ng-model="firstname">
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.firstname = "John";
    $scope.lastname = "Doe";
});
</script>

<p>Use the ng-model directive on HTML controls (input, select, textarea) to bind data between the view and the data model.</p>

</body>
</html>


The ng-model directive provides a two-way binding between the model and the view.

Two-way Binding
Data binding in AngularJS is the synchronization between the model and the view.

When data in the model changes, the view reflects the change, and when data in the view changes, the model is updated as well. This happens immediately and automatically, which makes sure that the model and the view is updated at all times.

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
    Name: <input ng-model="firstname">
    <h1>{{firstname}}</h1>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.firstname = "John";
    $scope.lastname = "Doe";
});
</script>

<p>Change the name inside the input field, and the model data will change automatically, and therefore also the header will change its value.</p>

</body>
</html>


AngularJS Controller
Applications in AngularJS are controlled by controllers. Read about controllers in the AngularJS Controllers chapter.

Because of the immediate synchronization of the model and the view, the controller can be completely separated from the view, and simply concentrate on the model data. Thanks to the data binding in AngularJS, the view will reflect any changes made in the controller.

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
    <h1 ng-click="changeName()">{{firstname}}</h1>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.firstname = "John";
    $scope.changeName = function() {
        $scope.firstname = "Nelly";
    }
});
</script>

<p>Click on the header to run the "changeName" function.</p>

<p>This example demonstrates how to use the controller to change model data.</p>

</body>
</html>

45 : AngularJS Controllers

AngularJS controllers control the data of AngularJS applications.

AngularJS controllers are regular JavaScript Objects.

AngularJS Controllers
AngularJS applications are controlled by controllers.

The ng-controller directive defines the application controller.

A controller is a JavaScript Object, created by a standard JavaScript object constructor.

AngularJS Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

First Name: <input type="text" ng-model="firstName"><br>
Last Name: <input type="text" ng-model="lastName"><br>
<br>
Full Name: {{firstName + " " + lastName}}

</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.firstName = "John";
    $scope.lastName = "Doe";
});
</script>

</body>
</html>


Application explained:

The AngularJS application is defined by  ng-app="myApp". The application runs inside the <div>.

The ng-controller="myCtrl" attribute is an AngularJS directive. It defines a controller.

The myCtrl function is a JavaScript function.

AngularJS will invoke the controller with a $scope object.

In AngularJS, $scope is the application object (the owner of application variables and functions).

The controller creates two properties (variables) in the scope (firstName and lastName).

The ng-model directives bind the input fields to the controller properties (firstName and lastName).

Controller Methods
The example above demonstrated a controller object with two properties: lastName and firstName.

A controller can also have methods (variables as functions):

AngularJS Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="personCtrl">

First Name: <input type="text" ng-model="firstName"><br>
Last Name: <input type="text" ng-model="lastName"><br>
<br>
Full Name: {{fullName()}}

</div>

<script>
var app = angular.module('myApp', []);
app.controller('personCtrl', function($scope) {
    $scope.firstName = "John";
    $scope.lastName = "Doe";
    $scope.fullName = function() {
        return $scope.firstName + " " + $scope.lastName;
    };
});
</script>

</body>
</html>


AngularJS Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="namesCtrl">

<ul>
  <li ng-repeat="x in names">
    {{ x.name + ', ' + x.country }}
  </li>
</ul>

</div>

<script src="namesController.js"></script>

</body>
</html>


Save the file as  namesController.js:
angular.module('myApp', []).controller('namesCtrl', function($scope) {
    $scope.names = [
        {name:'Jani',country:'Norway'},
        {name:'Hege',country:'Sweden'},
        {name:'Kai',country:'Denmark'}
    ];
});

46 : AngularJS Scope

The scope is the binding part between the HTML (view) and the JavaScript (controller).

The scope is an object with the available properties and methods.

The scope is available for both the view and the controller.

How to Use the Scope?
When you make a controller in AngularJS, you pass the $scope object as an argument:

Example
Properties made in the controller, can be referred to in the view:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<h1>{{carname}}</h1>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.carname = "Volvo";
});
</script>

<p>The property "carname" was made in the controller, and can be referred to in the view by using the {{ }} brackets.</p>

</body>
</html>


When adding properties to the $scope object in the controller, the view (HTML) gets access to these properties.

In the view, you do not use the prefix $scope, you just refer to a propertyname, like {{carname}}.

Understanding the Scope
If we consider an AngularJS application to consist of:

View, which is the HTML.
Model, which is the data available for the current view.
Controller, which is the JavaScript function that makes/changes/removes/controls the data.
Then the scope is the Model.

The scope is a JavaScript object with properties and methods, which are available for both the view and the controller.

Example
If you make changes in the view, the model and the controller will be updated:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<input ng-model="name">

<h1>My name is {{name}}</h1>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.name = "John Doe";
});
</script>

<p>When you change the name in the input field, the changes will affect the model, and it will also affect the name property in the controller.</p>

</body>
</html>


Know Your Scope
It is important to know which scope you are dealing with, at any time.

In the two examples above there is only one scope, so knowing your scope is not an issue, but for larger applications there can be sections in the HTML DOM which can only access certain scopes.

Example
When dealing with the ng-repeat directive, each repetition has access to the current repetition object:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<ul>
    <li ng-repeat="x in names">{{x}}</li>
</ul>

</div>

<script>
var app = angular.module('myApp', []);

app.controller('myCtrl', function($scope) {
    $scope.names = ["Emil", "Tobias", "Linus"];
});
</script>

<p>The variable "x" has a different value for each repetition, proving that each repetition has its own scope.</p>

</body>
</html>


Each <li> element has access to the current repetition object, in this case a string, which is referred to by using x.

47 : AngularJS Services

In AngularJS you can make your own service, or use one of the many built-in services.

What is a Service?
In AngularJS, a service is a function, or object, that is available for, and limited to, your AngularJS application.

AngularJS has about 30 built-in services. One of them is the $location service.

The $location service has methods which return information about the location of the current web page:

Example
Use the $location service in a controller:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">
<p>The url of this page is:</p>
<h3>{{myUrl}}</h3>
</div>

<p>This example uses the built-in $location service to get the absolute url of the page.</p>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope, $location) {
    $scope.myUrl = $location.absUrl();
});
</script>

</body>
</html>


Note that the $location service is passed in to the controller as an argument. In order to use the service in the controller, it must be defined as a dependency.

Why use Services?
For many services, like the $location service, it seems like you could use objects that are already in the DOM, like the window.location object, and you could, but it would have some limitations, at least for your AngularJS application.

AngularJS constantly supervises your application, and for it to handle changes and events properly, AngularJS prefers that you use the $location service instead of the window.location object.

The $http Service
The $http service is one of the most common used services in AngularJS applications. The service makes a request to the server, and lets your application handle the response.

Example
Use the $http service to request data from the server:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<p>Today's welcome message is:</p>

<h1>{{myWelcome}}</h1>

</div>

<p>The $http service requests a page on the server, and the response is set as the value of the "myWelcome" variable.</p>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope, $http) {
  $http.get("welcome.htm").then(function (response) {
      $scope.myWelcome = response.data;
  });
});
</script>

</body>
</html>


This example demonstrates a very simple use of the $http service. Learn more about the $http service in the AngularJS Http Tutorial.

The $timeout Service
The $timeout service is AngularJS' version of the window.setTimeout function.

Example
Display a new message after two seconds:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<p>This header will change after two seconds:</p>

<h1>{{myHeader}}</h1>

</div>

<p>The $timeout service runs a function after a sepecified number of milliseconds.</p>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope, $timeout) {
  $scope.myHeader = "Hello World!";
  $timeout(function () {
      $scope.myHeader = "How are you today?";
  }, 2000);
});
</script>

</body>
</html>


The $interval Service
The $interval service is AngularJS' version of the window.setInterval function.

Example
Display the time every second:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<p>The time is:</p>

<h1>{{theTime}}</h1>

</div>

<p>The $interval service runs a function every specified millisecond.</p>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope, $interval) {
  $scope.theTime = new Date().toLocaleTimeString();
  $interval(function () {
      $scope.theTime = new Date().toLocaleTimeString();
  }, 1000);
});
</script>

</body>
</html>


Create Your Own Service
To create your own service, connect your service to the module:

Also, services in angularjs is singleton means that we have executed the service once and if we want to again execute the service at same time without reloading the whole page then it
will show the result of previous version of service executed.

Also, this keyword is used in services in order to referrer the property (method) for particular (where property we have defined) service.

Create a service named hexafy:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>
<div ng-app="myApp" ng-controller="myCtrl">

<p>The hexadecimal value of 255 is:</p>

<h1>{{hex}}</h1>

</div>

<p>A custom service whith a method that converts a given number into a hexadecimal number.</p>

<script>
var app = angular.module('myApp', []);

app.service('hexafy', function() {
    this.myFunc = function (x) {
        return x.toString(16);
    }
});
app.controller('myCtrl', function($scope, hexafy) {
  $scope.hex = hexafy.myFunc(255);
});
</script>

</body>
</html>



Use a Custom Service Inside a Filter
Once you have created a service, and connected it to your application, you can use the service in any controller, directive, filter, or even inside other services.

To use the service inside a filter, add it as a dependency when defining the filter:

The service hexafy used in the filter myFormat:

app.filter('myFormat',['hexafy', function(hexafy) {
    return function(x) {
        return hexafy.myFunc(x);
    };
}]);
Try it Yourself »
You can use the filter when displaying values from an object, or an array:

Create a service named hexafy:

<ul>
<li ng-repeat="x in counts">{{x | myFormat}}</li>
</ul>

48 : AngularJS AJAX - $http

$http is an AngularJS service for reading data from remote servers.

AngularJS $http
The AngularJS $http service makes a request to the server, and returns a response.

Example
Make a simple request to the server, and display the result in a header:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<p>Today's welcome message is:</p>

<h1>{{myWelcome}}</h1>

</div>

<p>The $http service requests a page on the server, and the response is set as the value of the "myWelcome" variable.</p>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope, $http) {
  $http.get("welcome.htm")
  .then(function(response) {
      $scope.myWelcome = response.data;
  });
});
</script>

</body>
</html>


Methods
The example above uses the .get method of the $http service.

The .get method is a shortcut method of the $http service. There are several shortcut methods:

.delete()
.get()
.head()
.jsonp()
.patch()
.post()
.put()
The methods above are all shortcuts of calling the $http service:

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<p>Today's welcome message is:</p>

<h1>{{myWelcome}}</h1>

</div>

<p>The $http service requests a page on the server, and the response is set as the value of the "myWelcome" variable.</p>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope, $http) {
  $http({
    method : "GET",
    url : "welcome.htm"
  }).then(function mySucces(response) {
      $scope.myWelcome = response.data;
    }, function myError(response) {
      $scope.myWelcome = response.statusText;
  });
});
</script>

</body>
</html>


The example above executes the $http service with an object as an argument. The object is specifying the HTTP method, the url, what to do on success, and what to do on failure.

Properties
The response from the server is an object with these properties:

.config the object used to generate the request.
.data a string, or an object, carrying the response from the server.
.headers a function to use to get header information.
.status a number defining the HTTP status.
.statusText a string defining the HTTP status.

Example
<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<p>Data : {{content}}</p>
<p>Status : {{statuscode}}</p>
<p>StatusText : {{statustext}}</p>

</div>

<p>The response object has many properties. This example demonstrate the value of the data, status, and statusText properties.</p>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope, $http) {
  $http.get("welcome.htm")
  .then(function(response) {
      $scope.content = response.data;
      $scope.statuscode = response.status;
      $scope.statustext = response.statusText;
  });
});
</script>

</body>
</html>


To handle errors, add one more functions to the .then method:

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<h1>{{content}}</h1>

</div>

<p>The $http service executes different functions on success and failure.</p>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope, $http) {
  $http.get("wrongfilename.htm")
  .then(function(response) {
      $scope.content = response.data;
  }, function(response) {
      $scope.content = "Something went wrong";
  });
});
</script>

</body>
</html>


JSON
The data you get from the response is expected to be in JSON format.

JSON is a great way of transporting data, and it is easy to use within AngularJS, or any other JavaScript.

Example: On the server we have a file that returns a JSON object containing 15 customers, all wrapped in array called records.

Take a look at the JSON object.

Example
The ng-repeat directive is perfect for looping through an array:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="customersCtrl">

<ul>
  <li ng-repeat="x in myData">
    {{ x.Name + ', ' + x.Country }}
  </li>
</ul>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('customersCtrl', function($scope, $http) {
  $http.get("customers.php").then(function (response) {
      $scope.myData = response.data.records;
  });
});
</script>

</body>
</html>


Application explained:

The application defines the customersCtrl controller, with a $scope and $http object.

$http is an XMLHttpRequest object for requesting external data.

$http.get() reads JSON data from http://www.w3schools.com/angular/customers.php.

On success, the controller creates a property, myData, in the scope, with JSON data from the server.

Also, we can use success and error methods in case of successful response from database or in case of error from database.

49 : AngularJS Tables

The ng-repeat directive is perfect for displaying tables.

Displaying Data in a Table
Displaying tables with angular is very simple:

AngularJS Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="customersCtrl">

<table>
  <tr ng-repeat="x in names">
    <td>{{ x.Name }}</td>
    <td>{{ x.Country }}</td>
  </tr>
</table>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('customersCtrl', function($scope, $http) {
    $http.get("http://www.w3schools.com/angular/customers.php")
    .then(function (response) {$scope.names = response.data.records;});
});
</script>

</body>
</html>


Displaying with CSS Style
To make it nice, add some CSS to the page:

CSS Style

<!DOCTYPE html>
<html>
<style>
table, th , td  {
  border: 1px solid grey;
  border-collapse: collapse;
  padding: 5px;
}
table tr:nth-child(odd) {
  background-color: #f1f1f1;
}
table tr:nth-child(even) {
  background-color: #ffffff;
}
</style>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="customersCtrl">

<table>
  <tr ng-repeat="x in names">
    <td>{{ x.Name }}</td>
    <td>{{ x.Country }}</td>
  </tr>
</table>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('customersCtrl', function($scope, $http) {
    $http.get("http://www.w3schools.com/angular/customers.php")
    .then(function (response) {$scope.names = response.data.records;});
});
</script>

</body>
</html>


Display with orderBy Filter
To sort the table, add an orderBy filter: 

AngularJS Example

<!DOCTYPE html>
<html>
<style>
table, th , td  {
  border: 1px solid grey;
  border-collapse: collapse;
  padding: 5px;
}
table tr:nth-child(odd) {
  background-color: #f1f1f1;
}
table tr:nth-child(even) {
  background-color: #ffffff;
}
</style>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="customersCtrl">

<table>
  <tr ng-repeat="x in names | orderBy : 'Country'">
    <td>{{ x.Name }}</td>
    <td>{{ x.Country }}</td>
  </tr>
</table>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('customersCtrl', function($scope, $http) {
    $http.get("http://www.w3schools.com/angular/customers.php")
    .then(function (response) {$scope.names = response.data.records;});
});
</script>

</body>
</html>


Display with uppercase Filter
To display uppercase, add an uppercase filter: 

<!DOCTYPE html>
<html>
<style>
table, th , td  {
  border: 1px solid grey;
  border-collapse: collapse;
  padding: 5px;
}
table tr:nth-child(odd) {
  background-color: #f1f1f1;
}
table tr:nth-child(even) {
  background-color: #ffffff;
}
</style>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="customersCtrl">

<table>
  <tr ng-repeat="x in names">
    <td>{{ x.Name }}</td>
    <td>{{ x.Country | uppercase }}</td>
  </tr>
</table>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('customersCtrl', function($scope, $http) {
    $http.get("http://www.w3schools.com/angular/customers.php")
    .then(function (response) {$scope.names = response.data.records;});
});
</script>

</body>
</html>

Display the Table Index ($index)
To display the table index, add a <td> with $index: 

AngularJS Example

<!DOCTYPE html>
<html>
<style>
table, th , td  {
  border: 1px solid grey;
  border-collapse: collapse;
  padding: 5px;
}
table tr:nth-child(odd) {
  background-color: #f1f1f1;
}
table tr:nth-child(even) {
  background-color: #ffffff;
}
</style>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="customersCtrl">

<table>
  <tr ng-repeat="x in names">
    <td>{{ $index + 1 }}</td>
    <td>{{ x.Name }}</td>
    <td>{{ x.Country }}</td>
  </tr>
</table>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('customersCtrl', function($scope, $http) {
    $http.get("http://www.w3schools.com/angular/customers.php")
    .then(function (response) {$scope.names = response.data.records;});
});
</script>

</body>
</html>


Using $even and $odd
AngularJS Example

<!DOCTYPE html>
<html>
<style>
table, td  {
  border: 1px solid grey;
  border-collapse: collapse;
  padding: 5px;
}
</style>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="customersCtrl">

<table>
  <tr ng-repeat="x in names">
    <td ng-if="$odd" style="background-color:#f1f1f1">
    {{ x.Name }}</td>
    <td ng-if="$even">
    {{ x.Name }}</td>
    <td ng-if="$odd" style="background-color:#f1f1f1">
    {{ x.Country }}</td>
    <td ng-if="$even">
    {{ x.Country }}</td>
  </tr>
</table>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('customersCtrl', function($scope, $http) {
    $http.get("http://www.w3schools.com/angular/customers.php")
    .then(function (response) {$scope.names = response.data.records;});
});
</script>

</body>
</html>

50 : AngularJS Select Boxes

AngularJS lets you create dropdown lists based on items in an array, or an object.

Creating a Select Box Using ng-options
If you want to create a dropdown list, based on an object or an array in AngularJS, you should use the ng-options directive:

Example

<div ng-app="myApp" ng-controller="myCtrl">

<select ng-model="selectedName" ng-options="x for x in names">
</select>

</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.names = ["Emil", "Tobias", "Linus"];
});
</script>
Try it Yourself »
ng-options vs ng-repeat
You can also use the ng-repeat directive to make the same dropdown list:

Example
<select>
<option ng-repeat="x in names">{{x}}</option>
</select>
Try it Yourself »
Because the ng-repeat directive repeats a block of HTML code for each item in an array, it can be used to create options in a dropdown list, but the ng-options directive was made especially for filling a dropdown list with options, and has at least one important advantage:

Dropdowns made with ng-options allows the selected value to be an object, while dropdowns made from ng-repeat has to be a string.

What Do I Use?
Assume you have an array of objects:

$scope.cars = [
    {model : "Ford Mustang", color : "red"},
    {model : "Fiat 500", color : "white"},
    {model : "Volvo XC90", color : "black"}
];
The ng-repeat directive has its limitations, the selected value must be a string:

Example
Using ng-repeat:

<select ng-model="selectedCar">
<option ng-repeat="x in cars" value="{{x.model}}">{{x.model}}</option>
</select>

<h1>You selected: {{selectedCar}}</h1>
Try it Yourself »
When using the ng-options directive, the selected value can be an object:

Example
Using ng-options:

<select ng-model="selectedCar" ng-options="x.model for x in cars">
</select>

<h1>You selected: {{selectedCar.model}}</h1>
<p>Its color is: {{selectedCar.color}}</p>
Try it Yourself »
When the selected value can be an object, it can hold more information, and your application can be more flexible.

We will use the ng-options directive in this tutorial.

The Data Source as an Object
In the previous examples the data source was an array, but we can also use an object.

Assume you have an object with key-value pairs:

$scope.cars = {
    car01 : "Ford",
    car02 : "Fiat",
    car03 : "Volvo"
};
The expression in the ng-options attribute is a bit different for objects:

Example
Using an object as the data source, x represents the key, and y represents the value:

<select ng-model="selectedCar" ng-options="x for (x, y) in cars">
</select>

<h1>You selected: {{selectedCar}}</h1>
Try it Yourself »
The selected value will always be the value in a key-value pair.

The value in a key-value pair can also be an object:

Example
The selected value will still be the value in a key-value pair, only this time it is an object:

$scope.cars = {
car01 : {brand : "Ford", model : "Mustang", color : "red"},
car02 : {brand : "Fiat", model : "500", color : "white"},
car03 : {brand : "Volvo", model : "XC90", color : "black"}
};
Try it Yourself »
The options in the dropdown list does not have to be the key in a key-value pair, it can also be the value, or a property of the value object:

Example
<select ng-model="selectedCar" ng-options="y.brand for (x, y) in cars">
</select>

51 : AngularJS HTML DOM

AngularJS has directives for binding application data to the attributes of HTML DOM elements.

The ng-disabled Directive
The ng-disabled directive binds AngularJS application data to the disabled attribute of HTML elements.

AngularJS Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="" ng-init="mySwitch=true">
<p>
<button ng-disabled="mySwitch">Click Me!</button>
</p>
<p>
<input type="checkbox" ng-model="mySwitch"/>Button
</p>
<p>
{{ mySwitch }}
</p>
</div>

</body>
</html>


Application explained:

The ng-disabled directive binds the application data mySwitch to the HTML button's disabled attribute.

The ng-model directive binds the value of the HTML checkbox element to the value of mySwitch.

If the value of mySwitch evaluates to true, the button will be disabled: 

<p>
<button disabled>Click Me!</button>
</p>
If the value of mySwitch evaluates to false, the button will not be disabled: 

<p>
<button>Click Me!</button>
</p>
The ng-show Directive
The ng-show directive shows or hides an HTML element.

AngularJS Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="">

<p ng-show="true">I am visible.</p>

<p ng-show="false">I am not visible.</p>

</div>

</body>
</html>


The ng-show directive shows (or hides) an HTML element based on the value of ng-show.

In the next chapter, there are more examples, using the click of a button to hide HTML elements.

The ng-hide Directive
The ng-hide directive hides or shows an HTML element.

AngularJS Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="">

<p ng-hide="true">I am not visible.</p>

<p ng-hide="false">I am visible.</p>

</div>

</body>
</html>

52 : Toggle, True/False
If you want to show a section of HTML code when a button is clicked, and hide when the button is clicked again, like a dropdown menu, make the button behave
like a toggle switch:

Click Me

Menu:
Pizza
Pasta
Pesce
Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<button ng-click="myFunc()">Click Me!</button>

<div ng-show="showMe">
    <h1>Menu:</h1>
    <div>Pizza</div>
    <div>Pasta</div>
    <div>Pesce</div>
</div>

</div>
<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.showMe = false;
    $scope.myFunc = function() {
        $scope.showMe = !$scope.showMe;
    }
});
</script>

<p>Click the button to show/hide the menu.</p>

</body>
</html>


The showMe variable starts out as the Boolean value false.

The myFunc function sets the showMe variable to the opposite of what it is, by using the ! (not) operator.

$event Object
You can pass the $event object as an argument when calling the function.

The $event object contains the browser's event object:

Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="myCtrl">

<h1 ng-mousemove="myFunc($event)">Mouse Over Me!</h1>

<p>Coordinates: {{x + ', ' + y}}</p>

</div>
<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.myFunc = function(myE) {
        $scope.x = myE.clientX;
        $scope.y = myE.clientY;
    }
});
</script>

<p>Mouse over the heading to display the value of clientX and clientY from the event object.</p>

</body>
</html>

53 : AngularJS Forms

Forms in AngularJS provides data-binding and validation of input controls.

Input Controls
Input controls are the HTML input elements:

input elements
select elements
button elements
textarea elements
Data-Binding
Input controls provides data-binding by using the ng-model directive.

<input type="text" ng-model="firstname">
The application does now have a property named firstname.

The ng-model directive binds the input controller to the rest of your application.

The property firstname, can be referred to in a controller:

Example
<script>
var app = angular.module('myApp', []);
app.controller('formCtrl', function($scope) {
    $scope.firstname = "John";
});
</script>
Try it Yourself »
It can also be referred to elsewhere in the application:

Example
<form>
First Name: <input type="text" ng-model="firstname">
</form>

<h1>You entered: {{firstname}}</h1>
Try it Yourself »
Checkbox
A checkbox has the value true or false. Apply the ng-model directive to a checkbox, and use its value in your application.

Example
Show the header if the checkbox is checked:

 <form>
    Check to show a header:
    <input type="checkbox" ng-model="myVar">
</form>

<h1 ng-show="myVar">My Header</h1>
Try it Yourself »
Radiobuttons
Bind radio buttons to your application with the ng-model directive.

Radio buttons with the same ng-model can have different values, but only the selected one will be used.

Example
Display some text, based on the value of the selected radio button:

 <form>
Pick a topic:
<input type="radio" ng-model="myVar" value="dogs">Dogs
<input type="radio" ng-model="myVar" value="tuts">Tutorials
<input type="radio" ng-model="myVar" value="cars">Cars
</form>
Try it Yourself »
The value of myVar will be either dogs, tuts, or cars.

Selectbox

Bind select boxes to your application with the ng-model directive.

The property defined in the ng-model attribute will have the value of the selected option in the selectbox.

Example
Display some text, based on the value of the selected option:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<form>
  Select a topic:
  <select ng-model="myVar">
    <option value="">
    <option value="dogs">Dogs
    <option value="tuts">Tutorials
    <option value="cars">Cars
  </select>
</form>

<div ng-switch="myVar">
  <div ng-switch-when="dogs">
     <h1>Dogs</h1>
     <p>Welcome to a world of dogs.</p>
  </div>
  <div ng-switch-when="tuts">
     <h1>Tutorials</h1>
     <p>Learn from examples.</p>
  </div>
  <div ng-switch-when="cars">
     <h1>Cars</h1>
     <p>Read about cars.</p>
  </div>
</div>

<p>The ng-switch directive hides and shows HTML sections depending on the value of the dropdown list.</p>

</body>
</html>


The value of myVar will be either dogs, tuts, or cars.

An AngularJS Form Example
First Name:

John

Last Name:

Doe
 

RESET
form = {"firstName":"John","lastName":"Doe"}

master = {"firstName":"John","lastName":"Doe"}

Application Code

<!DOCTYPE html>
<html lang="en">
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="formCtrl">
  <form novalidate>
    First Name:<br>
    <input type="text" ng-model="user.firstName"><br>
    Last Name:<br>
    <input type="text" ng-model="user.lastName">
    <br><br>
    <button ng-click="reset()">RESET</button>
  </form>
  <p>form = {{user}}</p>
  <p>master = {{master}}</p>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('formCtrl', function($scope) {
    $scope.master = {firstName:"John", lastName:"Doe"};
    $scope.reset = function() {
        $scope.user = angular.copy($scope.master);
    };
    $scope.reset();
});
</script>

</body>
</html>


The novalidate attribute is new in HTML5. It disables any default browser validation.

Example Explained
The ng-app directive defines the AngularJS application.

The ng-controller directive defines the application controller.

The ng-model directive binds two input elements to the user object in the model.

The formCtrl controller sets initial values to the master object, and defines the reset() method.

The reset() method sets the user object equal to the master object.

The ng-click directive invokes the reset() method, only if the button is clicked.

The novalidate attribute is not needed for this application, but normally you will use it in AngularJS forms, to override standard HTML5 validation.

54 : AngularJS Form Validation

AngularJS can validate input data.

Form Validation
AngularJS offers client-side form validation.

AngularJS monitors the state of the form and input fields (input, textarea, select), and lets you notify the user about the current state.

AngularJS also holds information about whether they have been touched, or modified, or not.

You can use standard HTML5 attributes to validate input, or you can make your own validation functions.

Client-side validation cannot alone secure user input. Server side validation is also necessary.

Required
Use the HTML5 attribute required to specify that the input field must be filled out:

Example
The input field is required:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<p>Try writing in the input field:</p>

<form name="myForm">
<input name="myInput" ng-model="myInput" required>
</form>

<p>The input's valid state is:</p>
<h1>{{myForm.myInput.$valid}}</h1>

</body>
</html>


E-mail
Use the HTML5 type email to specify that the value must be an e-mail:

Example
The input field has to be an e-mail:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body ng-app="">

<p>Try writing an E-mail address in the input field:</p>

<form name="myForm">
<input type="email" name="myInput" ng-model="myInput">
</form>

<p>The input's valid state is:</p>
<h1>{{myForm.myInput.$valid}}</h1>
<p>Note that the state of the input field is "true" before you start writing in it, even if it does not contain an e-mail address.</p>

</body>
</html>


Form State and Input State
AngularJS is constantly updating the state of both the form and the input fields.

Input fields have the following states:

$untouched The field has not been touched yet
$touched The field has been touched
$pristine The field has not been modified yet
$dirty The field has been modified
$invalid The field content is not valid
$valid The field content is valid
They are all properties of the input field, and are either true or false.

Forms have the following states:

$pristine No fields have been modified yet
$dirty One or more have been modified
$invalid The form content is not valid
$valid The form content is valid
$submitted The form is submitted
They are all properties of the form, and are either true or false.

CSS Classes
AngularJS adds CSS classes to forms and input fields depending on their states.

The following classes are added to, or removed from, input fields:

ng-untouched The field has not been touched yet
ng-touched The field has been touched
ng-pristine The field has not been  modified yet
ng-dirty The field has been modified
ng-valid The field content is valid
ng-invalid The field content is not valid
ng-valid-key One key for each validation. Example: ng-valid-required, useful when there are more than one thing that must be validated
ng-invalid-key Example: ng-invalid-required
The following classes are added to, or removed from, forms:

ng-pristine No fields has not been modified yet
ng-dirty One or more fields has been modified
ng-valid The form content is valid
ng-invalid The form content is not valid
ng-valid-key One key for each validation. Example: ng-valid-required, useful when there are more than one thing that must be validated
ng-invalid-key Example: ng-invalid-required
The classes are removed if the value they represent is false.

Add styles for these classes to give your application a better and more intuitive user interface.

Example
Apply styles, using standard CSS:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<style>
input.ng-invalid {
    background-color:pink;
}
input.ng-valid {
    background-color:lightgreen;
}
</style>
<body ng-app="">

<p>Try writing in the input field:</p>

<form name="myForm">
<input name="myName" ng-model="myName" required>
</form>

<p>The input field requires content, and will therefore become green when you write in it.</p>

</body>
</html>

Forms can also be styled:

Example
Apply styles for unmodified (pristine) forms, and for modified forms:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<style>
form.ng-pristine {
    background-color:lightblue;
}
form.ng-dirty {
    background-color:pink;
}
</style>
<body ng-app="">

<form name="myForm">
<p>Try writing in the input field:</p>

<input name="myName" ng-model="myName" required>

<p>The form gets a "ng-dirty" class when the form has been modified, and will therefore turn pink.</p>
</form>

</body>
</html>

Validation Example

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<h2>Validation Example</h2>

<form ng-app="myApp" ng-controller="validateCtrl"
name="myForm" novalidate>

<p>Username:<br>
<input type="text" name="user" ng-model="user" required>
<span style="color:red" ng-show="myForm.user.$dirty && myForm.user.$invalid">
<span ng-show="myForm.user.$error.required">Username is required.</span>
</span>
</p>

<p>Email:<br>
<input type="email" name="email" ng-model="email" required>
<span style="color:red" ng-show="myForm.email.$dirty && myForm.email.$invalid">
<span ng-show="myForm.email.$error.required">Email is required.</span>
<span ng-show="myForm.email.$error.email">Invalid email address.</span>
</span>
</p>

<p>
<input type="submit"
ng-disabled="myForm.user.$dirty && myForm.user.$invalid ||
myForm.email.$dirty && myForm.email.$invalid">
</p>

</form>

<script>
var app = angular.module('myApp', []);
app.controller('validateCtrl', function($scope) {
    $scope.user = 'John Doe';
    $scope.email = 'john.doe@gmail.com';
});
</script>

</body>
</html>

55 : AngularJS Includes

With AngularJS, you can include HTML from an external file.

Include AngularJS Code
The HTML files you include with the ng-include directive, can also contain AngularJS code:

myTable.htm:
<table>
<tr ng-repeat="x in names">
<td>{{ x.Name }}</td>
<td>{{ x.Country }}</td>
</tr>
</table>

Include the file "myTable.htm" in your web page, and all AngularJS code will be executed, even the code inside the included file:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<div ng-app="myApp" ng-controller="customersCtrl">
  <div ng-include="'myTable.htm'"></div>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('customersCtrl', function($scope, $http) {
    $http.get("customers.php").then(function (response) {
        $scope.names = response.data.records;
    });
});
</script>

<p>The HTML, and AngularJS code, for this table are located in the file "myTable.htm".</p>

</body>
</html>

56 : AngularJS Routing

The ngRoute module helps your application to become a Single Page Application.

What is Routing in AngularJS?
If you want to navigate to different pages in your application, but you also want the application to be a SPA (Single Page Application), with no page 
reloading, you can use the ngRoute module.

The ngRoute module routes your application to different pages without reloading the entire application.

Example:
Navigate to "red.htm", "green.htm", and "blue.htm":

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-route.js"></script>

<body ng-app="myApp">

<p><a href="#/">Main</a></p>

<a href="#red">Red</a>
<a href="#green">Green</a>
<a href="#blue">Blue</a>

<div ng-view></div>

<script>
var app = angular.module("myApp", ["ngRoute"]);
app.config(function($routeProvider) {
    $routeProvider
    .when("/", {
        templateUrl : "main.htm"
    })
    .when("/red", {
        templateUrl : "red.htm"
    })
    .when("/green", {
        templateUrl : "green.htm"
    })
    .when("/blue", {
        templateUrl : "blue.htm"
    });
});
</script>

<p>Click on the links to navigate to "red.htm", "green.htm", "blue.htm", or back to "main.htm"</p>
</body>
</html>


What do I Need?
To make your applications ready for routing, you must include the AngularJS Route module:

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-route.js"></script>
Then you must add the ngRoute as a dependency in the application module::

var app = angular.module("myApp", ["ngRoute"]);
Now your application has access to the route module, which provides the $routeProvider.

Use the $routeProvider to configure different routes in your application:

app.config(function($routeProvider) {
  $routeProvider
  .when("/", {
    templateUrl : "main.htm"
  })
  .when("/red", {
    templateUrl : "red.htm"
  })
  .when("/green", {
    templateUrl : "green.htm"
  })
  .when("/blue", {
    templateUrl : "blue.htm"
  });
});
Where Does it Go?
Your application needs a container to put the content provided by the routing.

This container is the ng-view directive.

There are three different ways to include the ng-view directive in your application:

Example:

<div ng-view></div>

Example:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-route.js"></script>

<body ng-app="myApp">

<p><a href="#/">Main</a></p>

<a href="#red">Red</a>
<a href="#green">Green</a>
<a href="#blue">Blue</a>

<div ng-view></div>

<script>
var app = angular.module("myApp", ["ngRoute"]);
app.config(function($routeProvider) {
    $routeProvider
    .when("/", {
        templateUrl : "main.htm"
    })
    .when("/red", {
        templateUrl : "red.htm"
    })
    .when("/green", {
        templateUrl : "green.htm"
    })
    .when("/blue", {
        templateUrl : "blue.htm"
    });
});
</script>

<p>Click on the links.</p>

<p>This example uses the ng-view directive as an attribute to a DIV element.</p>
</body>
</html>


<ng-view></ng-view>

Example:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-route.js"></script>

<body ng-app="myApp">

<p><a href="#/">Main</a></p>

<a href="#red">Red</a>
<a href="#green">Green</a>
<a href="#blue">Blue</a>

<ng-view></ng-view>

<script>
var app = angular.module("myApp", ["ngRoute"]);
app.config(function($routeProvider) {
    $routeProvider
    .when("/", {
        templateUrl : "main.htm"
    })
    .when("/red", {
        templateUrl : "red.htm"
    })
    .when("/green", {
        templateUrl : "green.htm"
    })
    .when("/blue", {
        templateUrl : "blue.htm"
    });
});
</script>

<p>Click on the links.</p>

<p>This example uses the ng-view directive as an element.</p>
</body>
</html>

<div class="ng-view"></div>

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-route.js"></script>

<body ng-app="myApp">

<p><a href="#/">Main</a></p>

<a href="#red">Red</a>
<a href="#green">Green</a>
<a href="#blue">Blue</a>

<div class="ng-view"></div>

<script>
var app = angular.module("myApp", ["ngRoute"]);
app.config(function($routeProvider) {
    $routeProvider
    .when("/", {
        templateUrl : "main.htm"
    })
    .when("/red", {
        templateUrl : "red.htm"
    })
    .when("/green", {
        templateUrl : "green.htm"
    })
    .when("/blue", {
        templateUrl : "blue.htm"
    });
});
</script>

<p>Click on the links.</p>

<p>This example uses the ng-view directive as a class attribute to a DIV element.</p>
</body>
</html>


Applications can only have one ng-view directive, and this will be the placeholder for all views provided by the route.

$routeProvider
With the $routeProvider you can define what page to display when a user clicks a link.

Example:
Define a $routeProvider:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-route.js"></script>

<body ng-app="myApp">

<p><a href="#/">Main</a></p>

<a href="#london">City 1</a>
<a href="#paris">City 2</a>

<p>Click on the links to read about London and Paris.</p>

<div ng-view></div>

<script>
var app = angular.module("myApp", ["ngRoute"]);
app.config(function($routeProvider) {
    $routeProvider
    .when("/", {
        templateUrl : "main.htm"
    })
    .when("/london", {
        templateUrl : "london.htm"
    })
    .when("/paris", {
        templateUrl : "paris.htm"
    });
});
</script>

</body>
</html>

Define the $routeProvider using the config method of your application. Work registered in the config method will be performed when the application is loading.

Controllers
With the $routeProvider you can also define a controller for each "view".

Example:
Add controllers:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-route.js"></script>

<body ng-app="myApp">

<p><a href="#/">Main</a></p>

<a href="#london">City 1</a>
<a href="#paris">City 2</a>

<p>Click on the links.</p>

<p>Note that each "view" has its own controller which each gives the "msg" variable a value.</p>

<div ng-view></div>

<script>
var app = angular.module("myApp", ["ngRoute"]);
app.config(function($routeProvider) {
    $routeProvider
    .when("/", {
        templateUrl : "main.htm",
    })
    .when("/london", {
        templateUrl : "london.htm",
        controller : "londonCtrl"
    })
    .when("/paris", {
        templateUrl : "paris.htm",
        controller : "parisCtrl"
    });
});
app.controller("londonCtrl", function ($scope) {
    $scope.msg = "I love London";
});
app.controller("parisCtrl", function ($scope) {
    $scope.msg = "I love Paris";
});

</script>

</body>
</html>


The "london.htm" and "paris.htm" are normal HTML files, which you can add AngularJS expressions as you would with any other HTML sections of your AngularJS application.

The files looks like this:

london.htm

<h1>London</h1>
<h3>London is the capital city of England.</h3>
<p>It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>
<p>{{msg}}</p>
paris.htm

<h1>Paris</h1>
<h3>Paris is the capital city of France.</h3>
<p>The Paris area is one of the largest population centers in Europe, with more than 12 million inhabitants.</p>
<p>{{msg}}</p>

Template
In the previous examples we have used the templateUrl property in the $routeProvider.when method.

You can also use the template property, which allows you to write HTML directly in the property value, and not refer to a page.

Example:
Write templates:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-route.js"></script>

<body ng-app="myApp">

<p><a href="#/">Main</a></p>

<a href="#banana">Banana</a>
<a href="#tomato">Tomato</a>

<p>Click on the links to change the content.</p>

<p>The HTML shown in the ng-view directive are written in the template property of the $routeProvider.when method.</p>

<div ng-view></div>

<script>
var app = angular.module("myApp", ["ngRoute"]);
app.config(function($routeProvider) {
    $routeProvider
    .when("/", {
        template : "<h1>Main</h1><p>Click on the links to change this content</p>"
    })
    .when("/banana", {
        template : "<h1>Banana</h1><p>Bananas contain around 75% water.</p>"
    })
    .when("/tomato", {
        template : "<h1>Tomato</h1><p>Tomatoes contain around 95% water.</p>"
    });
});
</script>

</body>
</html>


The otherwise method
In the previous examples we have used the when method of the $routeProvider.

You can also use the otherwise method, which is the default route when none of the others get a match.

Example:
If neither the "Banana" nor the "Tomato" link has been clicked, let them know:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-route.js"></script>

<body ng-app="myApp">

<p><a href="#/">Main</a></p>

<a href="#banana">Banana</a>
<a href="#tomato">Tomato</a>

<p>Click on the links to change the content.</p>

<p>Use the "otherwise" method to define what to display when none of the links are clicked.</p>

<div ng-view></div>

<script>
var app = angular.module("myApp", ["ngRoute"]);
app.config(function($routeProvider) {
    $routeProvider
    .when("/banana", {
        template : "<h1>Banana</h1><p>Bananas contain around 75% water.</p>"
    })
    .when("/tomato", {
        template : "<h1>Tomato</h1><p>Tomatoes contain around 95% water.</p>"
    })
    .otherwise({
        template : "<h1>Nothing</h1><p>Nothing has been selected</p>"
    });
});
</script>

</body>
</html>

57 : AngularJS Application

It is time to create a real AngularJS Application.

Make a Shopping List
Lets use some of the AngularJS features to make a shopping list, were you can add or remove items:

<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<body>

<script>
var app = angular.module("myShoppingList", []);
app.controller("myCtrl", function($scope) {
    $scope.products = ["Milk", "Bread", "Cheese","Test"];
    $scope.addItem = function () {
        $scope.errortext = "";
        if ($scope.products.indexOf($scope.addMe) == -1) {
            $scope.products.push($scope.addMe);
        } else {
            $scope.errortext = "The item is already in your shopping list.";
        }
    }
    $scope.removeItem = function (x) {
        $scope.errortext = "";
alert('X :: '+x);
        $scope.products.splice(x);
    }
});
</script>

<div ng-app="myShoppingList" ng-controller="myCtrl">
  <ul>
    <li ng-repeat="x in products">{{x}}<span ng-click="removeItem($index)">×</span></li>
  </ul>
  <input ng-model="addMe">
  <button ng-click="addItem()">Add</button>
  <p>{{errortext}}</p>
</div>

<p>Try to add the same item twice, and you will get an error message.</p>

</body>
</html>

58 : Custom Directives : For more information regarding Custom directives you see the example 'CustomDir'.

59 : Difference between services, factory, providers.

Services returns nothing but using this keyword.

Factory returns the object and also using object.

Provider can return object as well as this keyword. Services and factory are implemented using Providers. User can easily control the Providers as compare to services and factory.

60 : Angular JS Forms is collection of input cotrolls such as input elements, select elements, button elements, textarea elements. 

61 : AJAX is done by pre-defined service ' http '. If we are using ng-repeat directive in order to print data (that we have fetched from database) in table form, then we can use
hyper link in all the td's where we use ng-click function and in this directive (ng-click) we are passing $index that recoganize the row number of a table. In this directive
(ng-click) we are using function hyperLinkFunction(n) by passing ' n ' as a parameter which recoganizes row number. By using this row number we can display the data correspounding 
to which row number we have clicked by below code :-

s.empDetails.empName = s.emp[n].empName;

s.empDetails.empPh = s.emp[n].empPh;

where n refer as a row number,
emp refer as a employee objects array that we are using in ng-repeat directive,
s refer as a scope object,
empDetails refer as a current selected employee object.


we have to write below code in order to achieve the above functionality : 

ng-controller = "myController"

var app = angular.module('myApp',[]);

app.controller(function($scope){

$scope.empDetails = {"EmpId":"", "EmpName":"", "EmpSalary":""};

$scope.emp = we write the code for fetching the data from database.

$scope.show = function($n){

s.empDetails.empName = s.emp[n].empName;

s.empDetails.empPh = s.emp[n].empPh;

$scope.empDetails = {"EmpId":"", "EmpName":"", "EmpSalary":""};  //We have to add the row (by using new ' <tr></tr> ' after using ' <tr></tr> ' that we have used with ng-repeat) 
																 //for this add functionality.				

}

});

If we want to insert a data into the database then we can do by following code : 

<table ng-app="myApp">

<div ng-controller="myController">

<tr>

<td>Emp Id</td>
<td>Emp Name</td>
<td>Emp Salary</td>

</tr>

<tr>

<td><input type="text" ng-model = "empInsert.empId" /></td>
<td><input type="text" ng-model = "empInsert.empName" /></td>
<td><input type="text" ng-model = "empInsert.empSal" /></td>

</tr>

<input type="button" ng-click="insertData()" />

</div>

</table>

<script>

var app = angular.module('myApp');
app.controller('myController',function($scope){

$scope.empInsert = {"EmpId":"", "EmpName":"", "EmpSal":""};

$scope.insertData = function($scope,$http){

$scope.post(path where to insert data);

$scope.emp.push({"EmpId":$scope.empInsert.EmpId, "EmpName":$scope.empInsert.EmpName, "EmpSal":$scope.empInsert.EmpSal});  // This line is used to add the recently added data to GUI
																														  //immediately after adding new data. Also, emp is array of
																														  // employee objects which we have used in ng-repeat directive

$scope.empDetails = {"EmpId":"", "EmpName":"", "EmpSalary":""};																														  
																														  
}


});

</script>

Also, if want to delete the selected record then we can do by using ng-click directive on delete link. It means if we click on delete hyperlink then we pass the $index which refer as
a row number then based on this row (by using this code ' s.emp[n].empName; ') we will search whole employee object corresopounding to which to row we have click on delete hyperlink.

Also, we can bootstraping concept in order to use ng-app multiple times in single application by using below code : 

angular.element(document).ready(function(){

angular.element(document.getElementById("myDiv", ["mApp"]));  //'myDiv' is id values that we have provided ' id="myDiv" ' instead of ng-app directive in another part where we have 
															  //used second time ng-app.

});

Also, we can also use animation in angularjs by using four class which are ng-enter, ng-enter-active, ng-leave, ng-leave-active.

ng-enter, ng-enter-active : These two classes are used while we are adding the record  to the database.

ng-leave, ng-leave-active : These two classes are used while we are deleting the record  to the database.

We have two use the below for animation which are as follows : 

ng-enter{

transition: 1s;
background-color: Yellow;

}

ng-enter-active{

background-color: Green;

}

ng-leave{

transition: 1s;
background-color: Yellow;

}

ng-leave-active{

background-color: Red;

}

62 : We write the another file (for including all the angular js code starting from module writting) because of following reason :- 

- By doing this we can easily use this same code (that we have written in another file) for another HTML file as well.
- We can easily modify the HTML code and javascript code separately.
- We can easily do minification (minification means :- we change the format of javascript file in order to make file more readable and reduce the file space). We always do minifica
  tion because before running the angular js application over the server.
  

Example of minification : 

app.controller('myController1',function($rootScope,$scope){

$rootScope.commonName_1 = "Common Name First";

$scope.ctr_1_fname = "Manav";
$scope.ctr_1_lname = "Chadda";

s.clkFunction = function(){

alert('First Controller RootScope 1 :: '+$rootScope.commonName_1+' First Controller RootScope 2 :: '+$rootScope.commonName_2+' First Controller ctr_1_fname :: '+$scope.ctr_1_fname+'
First Controller ctr_1_lname :: '+$scope.ctr_1_lname);

}

});


If we are trying to minifying the above code then below code is generated after minifying the above code : 

app.controller("myController1",function(o,n){

o.commonName_1="Common Name First",

n.ctr_1_fname="Manav",

n.ctr_1_lname="Chadda",

s.clkFunction=function(){

alert("First Controller RootScope 1 :: "+o.commonName_1+" First Controller RootScope 2 :: "+o.commonName_2+" First Controller ctr_1_fname :: "+n.ctr_1_fname+"\nFirst Controller 
ctr_1_lname :: "+n.ctr_1_lname)

}

});

As you can see in above code $rootScope, $scope is replaced with o, n because minification will replaced all variables names that we have used in application but they will not 
replace the names of the string. In above result $rootScope, $scope all these are variable names that is why they are replaced with another names and if we are trying to run angular
js application with above result code then we will get the error but if we are using array with the above code (example below of two code one is array example and another is minified
version of array code) then we are doing minifying of that code and try to execute the angular js application then we will not get the error and the application will run 
successfully.


Below code is the array version :-

app.controller('myController1',["$rootScope","$scope",function(r,s){

r.commonName_1 = "Common Name First";

s.ctr_1_fname = "Manav";
s.ctr_1_lname = "Chadda";

s.clkFunction = function(){

alert('First Controller RootScope 1 :: '+r.commonName_1+' First Controller RootScope 2 :: '+r.commonName_2+' First Controller ctr_1_fname :: '+s.ctr_1_fname+' First Controller 
ctr_1_lname :: '+s.ctr_1_lname);

}

}]);

app.controller("myController1",["$rootScope","$scope",function(o,r){

o.commonName_1="Common Name First",

r.ctr_1_fname="Manav",
r.ctr_1_lname="Chadda",

r.clkFunction=function(){

alert("First Controller RootScope 1 :: "+o.commonName_1+" First Controller RootScope 2 :: "+o.commonName_2+" First Controller ctr_1_fname :: "+r.ctr_1_fname+" First Controller 
\nctr_1_lname :: "+r.ctr_1_lname)}


}]);

63 : ng-cloak directive is used at that time when we are seeing that some time page reloading will take more time and some elements of HTML page will not load fully in that case we
have to use the directive ng-cloak which do not allow the element to load untill the element is fully processed by angular js.

64 : For example scopes you can see example 'Scope.html'. Five points that are consider for scopes are as follows :-

(a) : Scope Hierarchy.
(b) : How to access the $rootScope property under <script> </script> and under HTML elements.
(c) : $rootScope property values changes if it modifies in any child of $rootScope changes the value of $rootScope property value.
(d) : How to define the $rootScope properties.

65 : For example watcher you can see example 'Watcher.html'. Below are the points for Watcher :-

Watcher is a kind of monitoring tool that will watch all the element of the HTML that are using data binding with their correspounding $scope variables. There are various types of 
watcher which are as follows :-

(a) : Normal Watcher :- .
(b) : Reference watcher :- .
(c) : Equality Watcher :- .
(d) : Watcher Group :- .
(e) : Watcher Collection :- .
All the above five Watcher types description is provided in above example 'Watcher.html'.

66 : Difference between $scope, $rootScope.

(a) : $scope properties is availaible to their own $scope and $rootScope properties is availaible to their all child of type $scope.
(b) : All the $scope is always the child of $rootScope and $rootScope is always the super class of all the $scope.
(c) : $rootScope properties will be modified and its get effected if these properties is modified by any child of $rootScope i.e $scope but the properties of single $scope will not
modified and its not get effected because the properties of one $scope is not accessed by another $scope.

67 : Design Process / Design cycle / Design loop.

All the watcher will saved in Watcher List and Watcher List is stored in Angular Js memory. Design Process will perform the following things :-

rootScope is having watcher list (watcher list consists of watcher) and correspounding to each controller we have scope and corespounding to each scope we have watcher list 
(consists of watcher).

(a) : Design Process will start checking the watcher from watcher list of rootScope.
(b) : Design Process will check the watcher from the watcher list and fetch the input control element (that have watcher on their own) then we will check if the fetched input control
element will become dirty (dirty means if the input control element value is changed or not) or not.
(c) : Design Process also check if the input control element value is changed if it is changed then watcher listener function will also executed.
(d) : Design Process will mark the input control elements whose value is changed and then after completing the design process cycle the DOM will become updated.

How many iteration that design process can done in one angular js application? 
Only 10 iteration during design process can be done for one angular js application.

How many watcher can be possible for one angular js application? 
Only 2000 watcher can be possible for one angular js application.

Design process will start from rootScope in order to check the watcher from watcher list of rootScope. If any watcher exists in watcher list of rootScope then we will check each 
watcher from watcher list of rootScope and if we find any watcher (from watcher list of rootScope) element value is changed then we marked this watcher and update their corresounding
DOM after the design process is completed. If no watcher exists or if no watcher element value is changed then angular js will search for $scope that are child of rootScope.

Then again, if we find any scope (that are child of rootScope) then their correspounding watcher list will be fetched which contains the watcher related to current scope. Again, If
any watcher exists in watcher list of current scope then we will check each watcher from watcher list of current scope and if we find any watcher (from watcher list of current scope)
element value is changed then we marked this watcher and update their corresounding DOM after the design process is completed. If no watcher exists or if no watcher element value is 
changed then angular js will search for $scope that are child of current scope and the same process goes until all scope and child scope are notified or not.

Now the question rise over here is that when the design process is kicked-up and from whom. Design process will be kicked-up by $apply concept i.e After events is performed by 
angular js i.e from "ng-" then $apply concept is started and then $apply concept will call the design process.


68 : $apply and $digest

These two ($apply and $digest) are used in order to kick up the digest process if we are not executing the angular js application from angular context. Angular context means if we
are using the different directives of angular js. Say for example if we are executing the angular js application but if we are trying to modify the ng-model value using console with 
$apply/$digest then modification i.e data binding will not implement because we are trying to modify the ng-model value from console with $apply/$digest which are not comes under the
angular context but if we are using ng-click directive then we can see that data binding will implement and if we are using HTML event such as onclick without $apply/$digest then 
again data binding will not implemented but if we are using the $apply/$digest then data binding will implement.

