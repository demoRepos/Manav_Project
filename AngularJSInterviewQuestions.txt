1) What is AngularJS?

AngularJS is a JavaScript framework i.e. used to create single web page application. It follows MVC (Model View Controller) pattern. It is open source, cross browser compliant and easy
to maintain.

2) What are the advantages of AngularJS?

allows us to create single page application
follows MVC pattern
predefined form validations
supports animation
open source
supports two way data binding
its code are unit testable

3) What are the disadvantages of AngularJS?

JavaScript Dependent: If end user disables JavaScript, AngularJS will not work.
Not Secured: It is JavaScript based framework so it is not safe to authenticate user through AngularJS only.

4) Is AngularJS dependent on JQuery?

No.

5) What IDE's are currently used for the development of AngularJS?

Eclipse
Visual Studio
WebStorm
TextMate etc.

6) What are the features of AngularJS?

MVC
Validations
Modules
Directives
Templates
Scope
Expressions
Data Binding
Filters
Services
Routing
Dependency Injection
Testing

7) What are directives in AngularJS?

Directives are the markers on DOM element that is used to specify behavior on that DOM element. AngularJS has a set of built-in directives which you can use to add functionality to
your application.All AngularJS directives start with the word "ng". There are many in-built directives in AngularJS such as "ng-app", "ng-model", "ng-controller", "ng-repeat" etc.

Let's see a simple example of AngularJS directive.

<input type="text" id="empName"  ng-model="EmpName"/>  

8) What are controllers in AngularJS?

Controllers are JavaScript functions that are used to provide data and logic to HTML UI. It acts as an interface between Server and HTML UI.

9) What are the usage of controllers in AngularJS?

AngularJS Controllers are used to:

Set up initial state of the $scope object, and Add behavior to the $scope object. Controllers are JavaScript functions that are bound to a particular scope. They are the prime actors
in AngularJS framework and carry functions to operate on data and decide which view is to be updated to show the updated model based data.

10) What is data binding in AngularJS?

Data Binding is the automatic synchronization of data between model and view. There are two ways of data binding:

One way data binding (used in classical template)
Two way data binding (used in AngularJS template)

11) What are services in AngularJS?

Services are objects that can be used to store and share data across the application. AngularJS offers many built-in services such as $http i.e. used to send/recieve the data from
the server.

12) What is scope in AngularJS?

Scope is an object that represents application model. Scopes are objects that refer to the model. They act as glue between controller and view.

Each AngularJS application can have only one root scope but can have multiple child scopes.

13) What is template in AngularJS?

A template consists of HTML, CSS and AngularJS directives that are used to render dynamic view. Templates are the rendered view with information from the controller and model. These 
can be a single file (like index.html) or multiple views in one page using "partials".

14) What are expressions in AngularJS?

Expressions are the code snippets that resolves to a value. AngularJS expressions are placed inside {{expression}}. For example:

{{1+1}}  

15) What is the use of filter in AngularJS?

A filter is used to format the value of expression to display the formatted output. AngularJS enables us to write our own filter. Filters select a subset of items from an array and 
return a new array. Filters are used to show filtered items from a list of items based on defined criteria.

16 : What is routing in AngularJS?
It is concept of switching views. AngularJS based configration function decides which view to render based on the business logic.

17 : What is deep linking in AngularJS?
Deep linking allows you to encode the state of application in the URL so that it can be bookmarked. The application can then be restored from the URL to the same state. For exmaple is
Routing where we are switching to different views based on template URL and we do not need to navigate to other HTML page even the another HTML page (that we need to view) will be 
placed into the particular location/path of current HTML page.

18 : What are the advantages of AngularJS?
Following are the advantages of AngularJS.

AngularJS provides capability to create Single Page Application in a very clean and maintainable way.

AngularJS provides data binding capability to HTML thus giving user a rich and responsive experience.

AngularJS code is unit testable.

AngularJS uses dependency injection and make use of separation of concerns.

AngularJS provides reusable components.

With AngularJS, developer writes less code and gets more functionality.

In AngularJS, views are pure html pages, and controllers written in JavaScript do the business processing.

AngularJS applications can run on all major browsers and smart phones including Android and iOS based phones/tablets.

18 : Which are the core directives of AngularJS?
Following are the three core directives of AngularJS.

ng-app − This directive defines and links an AngularJS application to HTML.

ng-model − This directive binds the values of AngularJS application data to HTML input controls.

ng-bind − This directive binds the AngularJS Application data to HTML tags.

19 : Explain AngularJS boot process.
When the page is loaded in the browser, following things happen:

HTML document is loaded into the browser, and evaluated by the browser. AngularJS JavaScript file is loaded; the angular global object is created. Next, JavaScript which registers 
controller functions is executed.

Next AngularJS scans through the HTML to look for AngularJS apps and views. Once view is located, it connects that view to the corresponding controller function.

Next, AngularJS executes the controller functions. It then renders the views with data from the model populated by the controller. The page gets ready.

20 : Explain ng-app directive.
ng-app directive defines and links an AngularJS application to HTML. It also indicate the start of the application.

21 : Explain ng-model directive.
ng-model directive binds the values of AngularJS application data to HTML input controls. It creates a model variable which can be used with the html page and within the container 
control( for example, div) having ng-app directive.

22 : Explain ng-bind directive.
ng-bind directive binds the AngularJS Application data to HTML tags. ng-bind updates the model created by ng-model directive to be displayed in the html tag whenever user input 
something in the control or updates the html control's data when model data is updated by controller.

23 : Explain ng-controller directive.
ng-controller directive tells AngularJS what controller to use with this view. AngularJS application mainly relies on controllers to control the flow of data in the application. A 
controller is a JavaScript object containing attributes/properties and functions. Each controller accepts $scope as a parameter which refers to the application/module that controller
is to control.

24 : How AngularJS integrates with HTML?
AngularJS being a pure javaScript based library integrates easily with HTML.

Step 1 − Include angularjs javascript libray in the html page

<head>
   <script src = "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
</head>
Step 2 − Point to AngularJS app

Next we tell what part of the HTML contains the AngularJS app. This done by adding the ng-app attribute to the root HTML element of the AngularJS app. You can either add it to html 
element or body element as shown below:

<body ng-app = "myapp">
</body>

25 : Explain ng-init directive.
ng-init directive initializes an AngularJS Application data. It is used to put values to the variables to be used in the application.

26 : What are AngularJS expressions?
Expressions are used to bind application data to html. Expressions are written inside double braces like {{ expression}}. Expressions behave in same way as ng-bind directives. 
AngularJS application expressions are pure JavaScript expressions and outputs the data where they are used.

27 : Explain ng-disabled directive.
ng-disabled directive disables a given control.

In below example, we've added ng-disabled attribute to a HTML button and pass it a model. Then we've attached the model to an checkbox and can see the variation.

<input type = "checkbox" ng-model = "enableDisableButton">Disable Button
<button ng-disabled = "enableDisableButton">Click Me!</button>

28 : How angular.module works?
angular.module is used to create AngularJS modules along with its dependent modules. Consider the following example:

var mainApp = angular.module("mainApp", []);
Here we've declared an application mainApp module using angular.module function. We've passed an empty array to it. This array generally contains dependent modules declared earlier.

29 : How to validate data in AngularJS?
AngularJS enriches form filling and validation. We can use $dirty and $invalid flags to do the validations in seamless way. Use novalidate with a form declaration to disable any 
browser specific validation.

Following can be used to track error.

$dirty − states that value has been changed.

$invalid − states that value entered is invalid.

$error − states the exact error.

30 : Explain ng-include directive.
Using AngularJS, we can embed HTML pages within a HTML page using ng-include directive.

<div ng-app = "" ng-controller = "studentController">
   <div ng-include = "'main.htm'"></div>
   <div ng-include = "'subjects.htm'"></div>
</div>

31 : How to make an ajax call using Angular JS?
AngularJS provides $http control which works as a service to make ajax call to read data from the server. The server makes a database call to get the desired records. AngularJS needs 
data in JSON format. Once the data is ready, $http can be used to get the data from server in the following manner:

function studentController($scope,$http) {
   var url = "data.txt";
   $http.get(url).success( function(response) {
      $scope.students = response; 
   });
}

32 : What is use of $routeProvider in AngularJS?
$routeProvider is the key service which set the configuration of urls, maps them with the corresponding html page or ng-template, and attaches a controller with the same.

33 : What is $rootScope?
Scope is a special JavaScript object which plays the role of joining controller with the views. Scope contains the model data. In controllers, model data is accessed via $scope object.
$rootScope is the parent of all of the scope variables that are created when we are using the directive ng-app.

34 : What is scope hierarchy in AngularJS?
Scopes are controllers specific. If we define nested controllers then child controller will inherit the scope of its parent controller.

<script>
      var mainApp = angular.module("mainApp", []);

      mainApp.controller("shapeController", function($scope) {
         $scope.message = "In shape controller";
         $scope.type = "Shape";
      });
	  
      mainApp.controller("circleController", function($scope) {
         $scope.message = "In circle controller";   
      });
</script>
Following are the important points to be considered in above example.

We've set values to models in shapeController.

We've overridden message in child controller circleController. When "message" is used within module of controller circleController, the overridden message will be used.

35 : What is a service?
Services are JavaScript functions and are responsible to do specific tasks only. Each service is responsible for a specific task for example, $http is used to make ajax call to get 
the server data. $route is used to define the routing information and so on. Inbuilt services are always prefixed with $ symbol.

36 : What is service method?
Using service method, we define a service and then assign method to it. We've also injected an already available service to it.

mainApp.service('CalcService', function(MathService){
   this.square = function(a) { 
      return MathService.multiply(a,a); 
	}
});

37 : What is factory method?
Using factory method, we first define a factory and then assign method to it.

var mainApp = angular.module("mainApp", []);
mainApp.factory('MathService', function() {     
   var factory = {};  
		
   factory.multiply = function(a, b) {
      return a * b 
   }
   return factory;
}); 

38 : What are the differences between service and factory methods?
factory method is used to define a factory which can later be used to create services as and when required whereas service method is used to create a service whose purpose is to do 
some defined task.

39 : Which components can be injected as a dependency in AngularJS?
AngularJS provides a supreme Dependency Injection mechanism. It provides following core components which can be injected into each other as dependencies.

value
factory
service
provider
constant

40 : Is AngularJS extensible?
Yes! In AngularJS we can create custom directive to extend AngularJS existing functionalities.

Custom directives are used in AngularJS to extend the functionality of HTML. Custom directives are defined using "directive" function. A custom directive simply replaces the element 
for which it is activated. AngularJS application during bootstrap finds the matching elements and do one time activity using its compile() method of the custom directive then process
the element using link() method of the custom directive based on the scope of the directive.

41 : On which types of component can we create a custom directive?
AngularJS provides support to create custom directives for following type of elements.

Element directives − Directive activates when a matching element is encountered.

Attribute − Directive activates when a matching attribute is encountered.

CSS − Directive activates when a matching css style is encountered.

Comment − Directive activates when a matching comment is encountered.

42 : What is internationalization?
Internationalization is a way to show locale specific information on a website. For example, display content of a website in English language in United States and in Danish in France.

43 : How to implement internationalization in AngularJS?

AngularJS supports inbuilt internationalization for three types of filters currency, date and numbers. We only need to incorporate corresponding js according to locale of the country.
By default it handles the locale of the browser. For example, to use Danish locale, use following script

<script src = "https://code.angularjs.org/1.2.5/i18n/angular-locale_da-dk.js"></script>

44 : Whcih options on page load how you can initialize a select box ?

You can initialize a select box with options on page load by using ng-init directive

45 : Explain what Angular JS routes does ?

Angular js routes enable you to create different URLs for different content in your application.  Different URLs for different content enables user to bookmark URLs to specific 
content.  Each such bookmarkable URL in AngularJS is called a route.

46 :  Mention the steps for the compilation process of HTML happens?

Compilation of HTML process occurs in following ways

Using the standard browser API, first the HTML is parsed into DOM By using the call to the $compile () method, compilation of the DOM is performed. 
The method traverses the DOM and matches the directives. 
Link the template with scope by calling the linking function returned from the previous step

47 : Mention what are the styling form that ngModel adds to CSS classes ?

ngModel adds these CSS classes to allow styling of form as well as control

ng- valid
ng- invalid
ng-pristine
ng-dirty

48 : Explain what is DI (Dependency Injection ) and how an object or function can get a hold of its dependencies ?

DI or Dependency Injection is a software design pattern that deals with how code gets hold of its dependencies.  In order to retrieve elements of the application which is required to 
be configured when module gets loaded , the operation “config” uses dependency injection.

These are the ways that object uses to hold of its dependencies

Typically using the new operator, dependency can be created
By referring to a global variable, dependency can be looked up
Dependency can be passed into where it is required

49 :  Explain the concept of scope hierarchy?  How many scope can an application have?

Each angular application consist of one root scope but may have several child scopes. As child controllers and some directives create new child scopes, application can have multiple 
scopes. When new scopes are formed or created they are added as a children of their parent scope. Similar to DOM, they also creates a hierarchical structure.

50 : Who created Angular JS ?

Intially it was developed by Misko Hevery and Adam Abrons. Currently it is being developed by Google.

51 : Explain what is the difference between AngularJS and backbone.js?

AngularJS combines the functionalities of most of the 3rd party libraries, it supports individual functionalities required to develop HTML5 Apps.  While Backbone.js do their jobs
individually.

52 : What should be the maximum number of concurrent “watches”? Bonus: How would you keep an eye on that number?

To reduce memory consumption and improve performance it is a good idea to limit the number of watches on a page to 2,000. A utility called ng-stats can help track your watch count and 
digest cycles. It is crucial that the scope digest cycles are as short as possible for your application to be responsive and smooth. Memory use and digest cycle performance are 
directly affected by the number of active watches. Therefore, it is best to keep the number of watches below 2,000. The open-source utility ng-stats gives developers insight into the 
number of watches. Angular is managing, as well as the frequency and duration of digest cycles over time.

The number of watches is simply a basic health signal. If you have many thousands of watches, or worse, if you see that number continue to grow as you interact with your page. Those 
are strong indications that you should look under the hood and review your code.

This question is valuable as it gives insight into how the candidate debugs runtime issues while creating a discussion about performance and optimization.

53 : What is the difference between ng-show/ng-hide and ng-if directives?

ng-show/ng-hide will always insert the DOM element, but will display/hide it based on the condition. ng-if will not insert the DOM element until the condition is not fulfilled.

ng-if is better when we needed the DOM to be loaded conditionally, as it will help load page bit faster compared to ng-show/ng-hide.

We only need to keep in mind what the difference between these directives is, so deciding which one to use totally depends on the task requirements.

54 : Where should we implement the DOM manipulation in AngularJS?

In the directives. DOM Manipulations should not exist in controllers, services or anywhere else but in directives.

55 : Is it a good or bad practice to use AngularJS together with jQuery?

It is definitely a bad practice. We need to stay away from jQuery and try to realize the solution with an AngularJS approach because Angular js provide the various features as compare
to jQuery.

56 : If you were to migrate from Angular 1.4 to Angular 1.5, what is the main thing that would need refactoring?

Changing .directive to .component to adapt to the new Angular 1.5 components.

57 : What is the difference between one-way binding and two-way binding?

– One way binding implies that the scope variable in the html will be set to the first value its model is bound to (i.e. assigned to)
– Two way binding implies that the scope variable will change it’s value everytime its model is assigned to a different value

58 : Explain how $scope.$apply() works

$scope.$apply re-evaluates all the declared ng-models and applies the change to any that have been altered (i.e. assigned to a new value).
Explanation: $scope.$apply() is one of the core angular functions that should never be used explicitly, it forces the angular engine to run on all the watched variables and all
external variables and apply the changes on their values.

59 : What directive would you use to hide elements from the HTML DOM by removing them from that DOM not changing their styling?

The ngIf Directive,ngShow, ngHide when applied to an element, will remove that element from the DOM if it’s condition is false.

60 : What makes the angular.copy() method so powerful?

It creates a deep copy of the variable. A deep copy of a variable means it doesn’t point to the same memory reference as that variable. Usually assigning one variable to another 
creates a “shallow copy”, which makes the two variables point to the same memory reference. Therefore if we change one, the other changes as well.

61 : What is the role of services in AngularJS and name any services made available by default?

– AngularJS Services can be created using a factory method or a service method.
– Services are singleton components. All components of the application (into which the service is injected) will work with single instance of the service.
– An AngularJS service allows developing of business logic without depending on the View logic which will work with it.

Few of the inbuilt services in AngularJS are:
– the $http service: The $http service is a core Angular service that facilitates communication with the remote HTTP servers via the browser’s XMLHttpRequest object or via JSONP
– the $log service: Simple service for logging. Default implementation safely writes the message into the browser’s console
– the $anchorScroll: it scrolls to the element related to the specified hash or (if omitted) to the current value of $location.hash()
Why should one know about AngularJS Services, you may ask. Well, understanding the purpose of AngularJS Services helps bring modularity to AngularJS code.
Services are the best may to evolve reusable API within and AngularJS app

Overview:

AngularJS Services help create reusable components.
A Service can be created either using the service() method or the factory() method.
A typical service can be injected into another service or into an AngularJS Controller.

62 : When creating a directive, it can be used in several different ways in the view. Which ways for using a directive do you know? How do you define the way your directive will be
used?

When you create a directive, it can be used as an attribute, element or class name. To define which way to use, you need to set the restrict option in your directive declaration.

The restrict option is typically set to:

‘A’ – only matches attribute name
‘E’ – only matches element name
‘C’ – only matches class name

These restrictions can all be combined as needed:

‘AEC’ – matches either attribute or element or class name.

63 : What is a singleton pattern and where we can find it in Angularjs?

Is a great pattern that restricts the use of a class more than once. We can find singleton pattern in angular in dependency injection and in the services. In a sense, if you do 2 
times ‘new Object()‘ without this pattern, you will be alocating 2 pieces of memory for the same object. With singleton pattern, if the object exists, you reuse it.

64 : What is an interceptor? What are common uses of it?

An interceptor is a middleware code where all the $http requests go through. The interceptor is a factory that are registered in $httpProvider. You have 2 types of requests that go 
through the interceptor, request and response (with requestError and responseError respectively). This piece of code is very useful for error handling, authentication or middleware in
all the requests/responses.

65 : How would you programatically change or adapt the template of a directive before it is executed and transformed?

You would use the compile function. The compile function gives you access to the directive’s template before transclusion occurs and templates are transformed, so changes can safely
be made to DOM elements. This is very useful for cases where the DOM needs to be constructed based on runtime directive parameters.

66 : How would you validate a text input field for a twitter username, including the @ symbol?

You would use the ngPattern directive to perform a regex match that matches Twitter usernames. The same principal can be applied to validating phone numbers, serial numbers, barcodes,
zip codes and any other text input.

67 : How would you implement application-wide exception handling in your Angular app?

Angular has a built-in error handler service called $exceptionHandler which can easily be overriden as seen below:

myApp.factory('$exceptionHandler', function($log, ErrorService) {
    return function(exception, cause) {
        
        if (console) {
            $log.error(exception);
            $log.error(cause);
        }

        ErrorService.send(exception, cause);
    };
});
This is very useful for sending errors to third party error logging services or helpdesk applications. Errors trapped inside of event callbacks are not propagated to this handler, but
can manually be relayed to this handler by calling $exceptionHandler(e) from within a try catch block.

68 : How do you hide an HTML element via a button click in AngularJS?

(Question provided by Nishant Kumar)

You can do this by using the ng-hide directive in conjunction with a controller we can hide an HTML element on button click.

<div ng-controller="MyCtrl">
	<button ng-click="hide()">Hide element</button>
	<p ng-hide="isHide">Hello World!</p>
</div>
function MyCtrl($scope){
	$scope.isHide = false;
	$scope.hide = function(){
		$scope.isHide = true;
	}
}

69 : How would you react on model changes to trigger some further action? For instance, say you have an input text field called email and you want to trigger or execute some code as
soon as a user starts to type in their email.

(Question provided by Nishant Kumar)

We can achieve this using $watch function in our controller.

function MyCtrl($scope) {
	$scope.email = "";

	$scope.$watch("email", function(newValue, oldValue) {
		if ($scope.email.length > 0) {
			console.log("User has started writing into email");
		}
	});
}

70 : How do you disable a button depending on a checkbox’s state?

(Question provided by Nishant Kumar)

We can use the ng-disabled directive and bind its condition to the checkbox’s state.

<body ng-app>
	<label><input type="checkbox" ng-model="checked"/>Disable Button</label>
	<button ng-disabled="checked">Select me</button>
</body>

71 : List at least three ways to communicate between modules of your application using core AngularJS functionality.

Common ways to communicate between modules of your application using core AngularJS functionality include:

Using services
Using events
By assigning models on $rootScope
Directly between controllers, using $parent, $$childHead, $$nextSibling, etc.
Directly between controllers, using ControllerAs, or other forms of inheritance.

72 : Which means of communication between modules of your application are easily testable?

Using a service is definitely easy to test. Services are injected, and in a test either a real service can be used or it can be mocked.

Events can be tested. In unit testing controllers, they usually are instantiated. For testing events on $rootScope, it must be injected into the test.

Testing $rootScope against the existence of some arbitrary models is testable, but sharing data through $rootScope is not considered a good practice.

For testing direct communication between controllers, the expected results should probably be mocked. Otherwise, controllers would need to be manually instantiated to have the right
context.

73 : 